-- Plugin for Epson L6xx projectors by Solo Works London
-- Built in Lua
-- For source, contact https://soloworks.co.uk

PluginInfo = {
	Name = "Epson~L6xx Projector (0.0.0.0-master)", -- The tilde here indicates folder structure in the Shematic Elements pane
	Version = "0.0.0.0-master",
	Id = "SoloWorks.Epson.L6xxProjector.0.0.0.0-master", -- show this is just a unique id. Show some commented out 'fun' unique ids
	Description = "Control for Epson range of L6xx projectors (ESC/VP21 protocol)",
	ShowDebug = true,
	Author = "Solo Works London"
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
	epson_blue = {16, 33, 139},
	White = {255, 255, 255},
	Black = {0, 0, 0},
	Red = {255, 0, 0},
	Green = {0, 255, 0}
}

function GetColor(props)
	return Colors.epson_blue
end

-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
	props = {
		{
			Name = "IP Address",
			Type = "string",
			--Value = "127.0.0.1"
			Value = "192.168.2.224"
		},
		{
			Name = "Force On High",
			Type = "boolean",
			Value = false
		}
	}
	return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
	return props
end

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
	ctls = {
		-- System Pins
		{
			Name = "Online",
			ControlType = "Indicator",
			IndicatorType = "Led",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		{
			Name = "ConnectionState",
			ControlType = "Indicator",
			IndicatorType = "Text"
		},
		{
			Name = "IPAddress",
			ControlType = "Indicator",
			IndicatorType = "Text",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "SerialNumber",
			ControlType = "Indicator",
			IndicatorType = "Text",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		-- Control Pins
		{
			Name = "Gain",
			ControlType = "Knob",
			ControlUnit = "Integer",
			Min = 0,
			Max = 255,
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "AVMute",
			ControlType = "Button",
			ButtonType = "Toggle",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "PowerOn",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Input",
			Count = 1,
			UserPin = true
		},
		{
			Name = "PowerOff",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Input",
			Count = 1,
			UserPin = true
		},
		{
			Name = "PowerState",
			ControlType = "Indicator",
			IndicatorType = "Text",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		-- Source
		{
			Name = "SourceActive",
			ControlType = "Knob",
			ControlUnit = "Integer",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		{
			Name = "SourceHDMI01",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "SourceHDMI02",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "SourceComputer01",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "SourceComputer02",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "SourceHDBaseT",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "SourceLAN",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "SourceUSB",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "SourceScreenMirroring",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		}
	}
	return ctls
end

-- Variable holding Page Names for ease
local pagenames = {"Display"}

-- This function allows you to populate pages in your plugin.
function GetPages(props)
	pages = {}
	table.insert(pages, {name = pagenames[1]})
	return pages
end

-- This function allows you to layout pages in your plugin.
function GetControlLayout(props)
	local layout = {}

	local btn_size = {48, 32}
	local title_size = {6 * btn_size[1], btn_size[2]}
	local status_groupbox_size = {title_size[1], 4 * btn_size[2]}
	local power_groupbox_position = {0, title_size[2] + status_groupbox_size[2] + (0.5 * btn_size[2])}
	local power_groupbox_size = {status_groupbox_size[1], 2.5 * btn_size[2]}
	local display_groupbox_position = {0, power_groupbox_position[2] + power_groupbox_size[2] + (0.5 * btn_size[2])}

	graphics = {
		{
			Type = "Header",
			Text = "Epson Projector",
			HTextAlign = "Center",
			Color = Colors.epson_blue,
			FontSize = 16,
			Position = {0, 0},
			Size = title_size
		},
		{
			Type = "GroupBox",
			Text = "Status",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.epson_blue,
			Color = Colors.epson_blue,
			StrokeWidth = 1,
			Position = {0, title_size[2]},
			Size = status_groupbox_size
		},
		{
			Type = "Text",
			Text = "Online:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {0, title_size[2] + (0.5 * btn_size[2])},
			Size = {2 * btn_size[1], btn_size[2]}
		},
		{
			Type = "Text",
			Text = "Connection:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {0, title_size[2] + (1.5 * btn_size[2])},
			Size = {2 * btn_size[1], btn_size[2]}
		},
		{
			Type = "Text",
			Text = "Serial No:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {0, title_size[2] + (2.5 * btn_size[2])},
			Size = {2 * btn_size[1], btn_size[2]}
		},
		{
			Type = "GroupBox",
			Text = "Power",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.epson_blue,
			Color = Colors.epson_blue,
			StrokeWidth = 1,
			Position = power_groupbox_position,
			Size = power_groupbox_size
		},
		{
			Type = "GroupBox",
			Text = "Display",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.epson_blue,
			Color = Colors.epson_blue,
			StrokeWidth = 1,
			Position = display_groupbox_position,
			Size = {status_groupbox_size[1], 4.5 * btn_size[2]}
		}
		--[[{
			Type = "GroupBox",
			Text = "Audio",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.Black,
			StrokeWidth = 1,
			Position = {x, y},
			Size = {256, 64} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
		}]]
	}

	-- Meta Data Infomation
	layout["Online"] = {
		PrettyName = "System~Online",
		Style = "Indicator",
		Color = {0, 255, 0},
		Position = {2 * btn_size[1], title_size[2] + (0.5 * btn_size[2])},
		Size = {btn_size[2], btn_size[2]}
	}
	layout["ConnectionState"] = {
		Style = "Text",
		HTextAlign = "Left",
		Padding = 5,
		StrokeWidth = 0,
		Position = {2 * btn_size[1], title_size[2] + (1.5 * btn_size[2])},
		Size = {3 * btn_size[1], btn_size[2]}
	}
	layout["SerialNumber"] = {
		PrettyName = "System~Serial Number",
		Style = "Text",
		HTextAlign = "Left",
		Padding = 5,
		StrokeWidth = 0,
		Position = {2 * btn_size[1], title_size[2] + (2.5 * btn_size[2])},
		Size = {3 * btn_size[1], btn_size[2]}
	}
	--power
	--[[
		layout["SourceActive"] = {
		PrettyName = "Display~Source Active",
		Style = "Fader",
		Position = {x + 100, y},
		Size = {36, 16}
	}]]
	layout["PowerOn"] = {
		Legend = "On",
		PrettyName = "Power~On",
		Style = "Button",
		ButtonStyle = "Momentary",
		Color = {223, 0, 36},
		UnlinkOffColor = false,
		Position = {0.5 * btn_size[1], power_groupbox_position[2] + btn_size[2]},
		Size = btn_size
	}
	layout["PowerOff"] = {
		Legend = "Off",
		PrettyName = "Power~Off",
		Style = "Button",
		ButtonStyle = "Momentary",
		Color = {223, 0, 36},
		UnlinkOffColor = false,
		Position = {1.5 * btn_size[1], power_groupbox_position[2] + btn_size[2]},
		Size = btn_size
	}
	layout["PowerState"] = {
		PrettyName = "Power~State",
		Style = "Indicator",
		OffColor = "gray",
		Color = "gray",
		UnlinkOffColor = true,
		Position = {2.5 * btn_size[1], power_groupbox_position[2] + btn_size[2]},
		Size = {3 * btn_size[1], btn_size[2]}
	}

	--display
	layout["AVMute"] = {
		Legend = "AV Mute",
		PrettyName = "Display~AV Mute",
		Style = "Button",
		ButtonStyle = "Toggle",
		Color = {223, 0, 36},
		UnlinkOffColor = false,
		Position = {0.5 * btn_size[1], display_groupbox_position[2] + btn_size[2]},
		Size = {4 * btn_size[1], btn_size[2]}
	}

	layout["SourceHDMI01"] = {
		Legend = "HDMI 1",
		PrettyName = "Display~HDMI 1",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {0.5 * btn_size[1], display_groupbox_position[2] + 2 * btn_size[2]},
		Size = btn_size
	}
	layout["SourceHDMI02"] = {
		Legend = "HDMI 2",
		PrettyName = "Display~HDMI 2",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {1.5 * btn_size[1], display_groupbox_position[2] + 2 * btn_size[2]},
		Size = btn_size
	}
	layout["SourceComputer01"] = {
		Legend = "Computer 1",
		PrettyName = "Display~Computer 1",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {2.5 * btn_size[1], display_groupbox_position[2] + 2 * btn_size[2]},
		Size = btn_size
	}
	layout["SourceComputer02"] = {
		Legend = "Computer 2",
		PrettyName = "Display~Computer 2",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {3.5 * btn_size[1], display_groupbox_position[2] + 2 * btn_size[2]},
		Size = btn_size
	}
	layout["SourceHDBaseT"] = {
		Legend = "HDBaseT",
		PrettyName = "Display~HDBaseT",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {0.5 * btn_size[1], display_groupbox_position[2] + 3 * btn_size[2]},
		Size = btn_size
	}
	layout["SourceLAN"] = {
		Legend = "LAN",
		PrettyName = "Display~LAN",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {1.5 * btn_size[1], display_groupbox_position[2] + 3 * btn_size[2]},
		Size = btn_size
	}
	layout["SourceUSB"] = {
		Legend = "USB",
		PrettyName = "Display~USB",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {2.5 * btn_size[1], display_groupbox_position[2] + 3 * btn_size[2]},
		Size = btn_size
	}
	layout["SourceScreenMirroring"] = {
		Legend = "Screen\rMirroring",
		PrettyName = "Display~Screen Mirroring",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {3.5 * btn_size[1], display_groupbox_position[2] + 3 * btn_size[2]},
		Size = btn_size
	}
	--[[layout["Gain"] = {
		PrettyName = "Audio~Gain",
		Style = "Fader",
		Position = {x + 50, y + 32},
		Size = {180, 30}
	}]]
	return layout, graphics
end

-- Components provide a way to save or retain certain settings without necessarily displaying it in another control such as a combobox.
-- For example, the when someone hits the "Save" button on this plugin, it saves the RGB values in the "rgb_storage" component below.
-- This allows us to do things 'under the hood' which gives the plugin a much sleeker feel.
function GetComponents(props)
	return {}
end

if Controls then
	-- Local Structure for holding State
	epson = {
		Host = "192.168.2.224",
		--Host = "127.0.0.1",
		Port = 3629,
		Rx = "",
		desiredPower = nil,
		desiredSource = nil,
		Tx = nil,
		ConnState = false,
		Debug = true
	}

	-- Simple Debug Logger
	function debug(s)
		if epson.Debug then
			print(s)
		end
	end

	-- Build TCP Client
	conn = TcpSocket.New()
	conn.ReadTimeout = 0
	conn.WriteTimeout = 0
	conn.ReconnectTimeout = 5

	timerTimeout = Timer.New()
	timerTimeout.EventHandler = function(timer)
		timer:Stop()
		conn:Disconnect()
		epson.ConnState = false
		Controls.ConnectionState.String = epson.Host .. ":" .. epson.Port .. " Resting"
	end

	-- Data Sending Helper Function
	function fnSend(cmd, data)
		if epson.ConnState == true then
			conn:Write(cmd .. " " .. data .. "\r")
			print(cmd .. " " .. data .. "\r")
		else
			fnConnect()
		end
	end

	-- Create and setup Polling
	timerPoll = Timer.New()

	timerPoll.EventHandler = function(timer)
		fnPoll()
	end

	function fnInitPoll()
		timerPoll:Stop()
		timerPoll:Start(20)
	end

	function fnPoll()
		if epson.ConnState == true then
			conn:Write("SNO?\r")
		end
	end

	function setCommsState(s)
		Controls.ConnectionState.String = epson.Host .. ":" .. epson.Port .. " " .. s
	end

	-- Setup Utility Callbacks as required
	conn.Connected = function(conn)
		--print("TCP socket is connected")
		setCommsState("Connected")
		epson.ConnState = true
		conn:Write("ESC/VP.net\x10\x03\x00\x00\x00\x00")
		conn:Write("SNO?\r")
		conn:Write("PWR?\r")
		conn:Write("SOURCE?\r")
		Controls.Online.Boolean = true
	end
	conn.Reconnect = function(conn)
		setCommsState("Reconnect")
		--print("TCP socket is reconnecting")
	end
	conn.Closed = function(conn)
		setCommsState("Closed")
		fnPowerFeedback("Error")
		--print("TCP socket was closed by the remote end")
	end
	conn.Error = function(conn, err)
		setCommsState("Error")
		fnPowerFeedback("Error")
		--print("TCP socket had an error:", err)
	end
	conn.Timeout = function(conn, err)
		setCommsState("Timeout")
		fnPowerFeedback("Error")
		--print("TCP socket timed out", err)
	end

	-- Helper Function - Open TCP Connection
	function fnConnect()
		conn:Connect(epson.Host, epson.Port)
		Controls.IPAddress.String = epson.Host .. ":" .. epson.Port
		Controls.ConnectionState.String = epson.Host .. ":" .. epson.Port .. " Connecting"
	end

	-- Gain Pacing - reduce jitter of display unable to handle blitz of commands by adding pacing
	local gainPaceVal
	local gainPacePend = false

	function sendGain()
		gainPacePend = false -- Indicate timer has ended
		if gainPaceVal ~= nil then -- If there is a value to send
			fnSend("VOL", gainPaceVal) -- Actually send Value
			gainPaceVal = nil -- Clear Value as Sent
			Timer.CallAfter(sendGain, 0.1) -- Start a timer
			gainPacePend = true -- Set value to show timer is running
		end
	end

	-- Create and setup Source Timer
	timerSource = Timer.New()

	timerSource.EventHandler = function(timer)
		timer:Stop()
		fnSend("SOURCE", epson.requestedSource)
		epson.requestedSource = nil
	end

	function switchSource(s)
		epson.requestedSource = s
		if Controls.PowerState.Boolean ~= true then
			debug("Source Triggered Power On!")
			fnSend("PWR", "ON")
			--Controls.PowerState.Boolean = true
			timerSource:Stop()
			timerSource:Start(12)
		else
			debug("Switch Source" .. epson.requestedSource)
			fnSend("SOURCE", epson.requestedSource)
		end
	end

	-- Setup Event Handlers
	for k, v in pairs(Controls) do
		-- Setup Event Handler (IP Address Pin)
		if k == "IP Address" then
			-- Setup Event Handler (Mute)
			v.EventHandler = function(changedControl)
				fnConnect()
			end
		elseif k == "PowerOn" then
			v.EventHandler = function(changedControl)
				if changedControl.Boolean == true then
					debug("Pin:Sending PowerOn")
					fnSend("PWR", "ON")
					--Controls.PowerState.Boolean = true
					epson.desiredPower = true
					conn:Write("PWR?\r")
				end
			end
		elseif k == "PowerOff" then
			v.EventHandler = function(changedControl)
				if changedControl.Boolean == true then
					debug("Pin:Sending PowerOff")
					fnSend("PWR", "OFF")
					--Controls.PowerState.Boolean = false
					epson.desiredPower = false
					conn:Write("PWR?\r")
				end
			end
		elseif k:sub(1, #"Source") == "Source" then
			k = k:sub(#"Source" + 1)
			v.EventHandler = function(changedControl)
				if k == "HDMI01" then
					debug("Pin:Sending HDMI01")
					epson.desiredSource = "30"
				elseif k == "HDMI02" then
					debug("Pin:Sending HDMI02")
					epson.desiredSource = "A0"
				elseif k == "Computer01" then
					debug("Pin:Sending Computer01")
					epson.desiredSource = "11"
				elseif k == "Computer02" then
					debug("Pin:Sending Computer02")
					epson.desiredSource = "21"
				elseif k == "HDBaseT" then
					debug("Pin:Sending HDBaseT")
					epson.desiredSource = "80"
				elseif k == "LAN" then
					debug("Pin:Sending LAN")
					epson.desiredSource = "53"
				elseif k == "USB" then
					debug("Pin:Sending USB")
					epson.desiredSource = "52"
				elseif k == "ScreenMirroring" then
					debug("Pin:Sending ScreenMirroring")
					epson.desiredSource = "56"
				end
				if changedControl.Boolean == true then
					switchSource(epson.desiredSource)
					epson.desiredPower = true
				end
			end
		elseif k == "AVMute" then
			v.EventHandler = function(changedControl)
				if changedControl.Boolean == true then
					fnSend("MUTE", "ON")
				else
					fnSend("MUTE", "OFF")
				end
				conn:Write("MUTE?\r")
			end
		elseif k == "Gain" then
			v.EventHandler = function(changedControl)
				print(string.sub(tostring(changedControl.Value), 1, -3))
				gainPaceVal = string.sub(tostring(changedControl.Value), 1, -3)
				if gainPacePend == false then
					sendGain() -- Send Value
				end
			end
		end
	end

	-- Create and setup the Communications Timeout
	timerComms = Timer.New()
	timerComms.EventHandler = function(timer)
		timer:Stop()
		Controls.Online.Boolean = false
	end

	function fnPowerFeedback(status)
		if status == "Standby Mode (Network OFF)" then
			debug("Power Status: Standby Mode (Network OFF)")
			Controls.PowerState.Boolean = false
			Controls.PowerState.String = "Standby - Network OFF"
			Controls.PowerState.Color = "gray"
		elseif status == "Standby Mode (Network ON)" then
			debug("Power Status: Standby Mode (Network ON)")
			Controls.PowerState.Boolean = false
			Controls.PowerState.String = "Standby"
			Controls.PowerState.Color = "gray"
		elseif status == "Warmup" then
			debug("Power Status: Warmup")
			Controls.PowerState.Boolean = true
			Controls.PowerState.String = "Standby - Warming up..."
			Controls.PowerState.Color = "yellow"
		elseif status == "Cooldown" then
			debug("Power Status: Cooldown")
			Controls.PowerState.Boolean = true
			Controls.PowerState.String = "Standby - Cooling down..."
			Controls.PowerState.Color = "yellow"
		elseif status == "Lamp ON" then
			debug("Power Status: Lamp ON")
			Controls.PowerState.Boolean = true
			Controls.PowerState.String = "Lamp ON"
			Controls.PowerState.Color = "green"
		elseif status == "Abnormality standby" then
			debug("Power Status: " .. string.sub(line, 14, 15) .. " Abnormality standby")
			Controls.PowerState.String = "Warning - Abnormality standby"
			Controls.PowerState.Color = "red"
			Controls.PowerState.Boolean = false
		elseif status == "Error" then
			debug("Error - Unknown Power state")
			Controls.PowerState.Color = "orange"
			Controls.PowerState.Boolean = false
		end
	end

	-- Process Feedback Helper
	function fnProcessFeedback(data)
		line = data
		debug("TCP socket has data:" .. line)
		-- Serial number
		if string.sub(line, 1, 3) == "SNO" then
			debug("Serial Number: " .. string.sub(line, 5, -3))
			Controls.SerialNumber.String = string.sub(line, 5, -3)
		end
		-- Power status
		if string.sub(line, 1, 3) == "PWR" then
			debug("Power Status: " .. string.sub(line, -4, -3))
			if string.sub(line, -4, -2) == "00" then
				fnPowerFeedback("Standby Mode (Network OFF)")
			elseif string.sub(line, -4, -3) == "01" then
				fnPowerFeedback("Lamp ON")
			elseif string.sub(line, -4, -3) == "02" then
				fnPowerFeedback("Warmup")
			elseif string.sub(line, -4, -3) == "03" then
				fnPowerFeedback("Cooldown")
			elseif string.sub(line, -4, -3) == "04" then
				fnPowerFeedback("Standby Mode (Network ON)")
			elseif string.sub(line, -4, -3) == "05" then
				fnPowerFeedback("Abnormality standby")
			else
				fnPowerFeedback("Error")
			end
		end
		-- Power IMEVENT
		if string.sub(line, 1, 12) == "IMEVENT=0001" then
			if string.sub(line, 14, 15) == "00" then
				fnPowerFeedback("Standby Mode (Network OFF)")
			elseif string.sub(line, 14, 15) == "01" then
				fnPowerFeedback("Standby Mode (Network ON)")
			elseif string.sub(line, 14, 15) == "02" then
				fnPowerFeedback("Warmup")
			elseif string.sub(line, 14, 15) == "03" then
				fnPowerFeedback("Lamp ON")
			elseif string.sub(line, 14, 15) == "04" then
				fnPowerFeedback("Cooldown")
			elseif string.sub(line, 14, 15) == "05" then
				fnPowerFeedback("Abnormality standby")
			end
		end
		-- Sources
		if string.sub(line, 1, 6) == "SOURCE" then
			debug("Input source code: " .. string.sub(line, -4, -3))
			if string.sub(line, -4, -3) == "11" then
				debug("Active Source: " .. "Computer1")
			elseif string.sub(line, -4, -3) == "21" then
				debug("Active Source: " .. "Computer2")
			elseif string.sub(line, -4, -3) == "30" then
				debug("Active Source: " .. "HDMI1")
			elseif string.sub(line, -4, -3) == "52" then
				debug("Active Source: " .. "USB1")
			elseif string.sub(line, -4, -3) == "53" then
				debug("Active Source: " .. "LAN")
			elseif string.sub(line, -4, -3) == "56" then
				debug("Active Source: " .. "Screen Mirroring")
			elseif string.sub(line, -4, -3) == "80" then
				debug("Active Source: " .. "HDBaseT")
			elseif string.sub(line, -4, -3) == "A0" then
				debug("Active Source: " .. "HDMI2")
			end
		end
		-- Signal Presence
		if string.sub(line, 1, 6) == "SIGNAL" then
			if string.sub(line, -4, -3) == "00" then
				print("No signal")
			elseif string.sub(line, -4, -3) == "01" then
				print("Signal detected")
			elseif string.sub(line, -4, -3) == "FF" then
				print("Unsupported signal")
			end
		end
	end

	-- Setup Data Callbacks as required
	conn.Data = function(conn)
		fnProcessFeedback(conn:Read(conn.BufferLength))
		-- Stop and restart Comms timer
		timerComms:Stop()
		if Controls.Online then -- Check for when developing in a Control Script block
			Controls.Online.Boolean = true
		end
		timerComms:Start(30)
	end

	-- Set IP address from Properties if present
	if Properties then
		if Properties["IP Address"].Value ~= "" then
			epson.Host = Properties["IP Address"].Value
			fnInitPoll()
		else
			print("IP Address Property Not Set")
		end
	end
end
