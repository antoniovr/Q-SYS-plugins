-- Information block for the plugin
PluginInfo = {
  Name = "OBS Websocket",
  Version = "1.0",
  BuildVersion = "1.1.0.2",
  Id = "667567fa-1ad0-4c9c-ae16-db1b7152f525",
  Author = "Jason Foord",
  Description = "Control of OBS Studio via the Websocket extension."  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 33,33,33 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return string.format("OBS Websocket\n[%s]", PluginInfo.Version)
end

-- Optional function used if plugin has multiple pages
PageNames = { "Dashboard", "Configuration" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  return props
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls, {
    Name = "status",
    ControlType = "Indicator",
    IndicatorType = "Status",
    Count = 1,
    UserPin = true,
    PinStyle = "Output"
  })
  
  table.insert(ctrls, {
    Name = "ip-address",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "password",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "connect",
    ControlType = "Button",
    ButtonType = "Toggle",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "obs-version",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "websocket-version",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "scenes",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "sources",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "audio-mixer",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "is-streaming",
    ControlType = "Indicator",
    IndicatorType = "LED",
    Count = 1,
    UserPin = true,
    PinStyle = "Output"
  })
  
  table.insert(ctrls, {
    Name = "is-recording",
    ControlType = "Indicator",
    IndicatorType = "LED",
    Count = 1,
    UserPin = true,
    PinStyle = "Output"
  })
  
  table.insert(ctrls, {
    Name = "recording-paused",
    ControlType = "Indicator",
    IndicatorType = "LED",
    Count = 1,
    UserPin = true,
    PinStyle = "Output"
  })
  
  table.insert(ctrls, {
    Name = "replay-buffer-active",
    ControlType = "Indicator",
    IndicatorType = "LED",
    Count = 1,
    UserPin = true,
    PinStyle = "Output"
  })
  
  table.insert(ctrls, {
    Name = "virtual-camera-active",
    ControlType = "Indicator",
    IndicatorType = "LED",
    Count = 1,
    UserPin = true,
    PinStyle = "Output"
  })
  
  table.insert(ctrls, {
    Name = "transition-type",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "transition-duration",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Max = 5000,
    Min = 1,
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "source-volume",
    ControlType = "Knob",
    ControlUnit = "dB",
    Max = 0,
    Min = -100,
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "source-mute",
    ControlType = "Button",
    ButtonType = "Toggle",
    Icon = "Volume Strike",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "source-render",
    ControlType = "Button",
    ButtonType = "Toggle",
    Icon = "Eye",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "source-locked",
    ControlType = "Button",
    ButtonType = "Toggle",
    Icon = "Lock",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "source-forward",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Arrow Up",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "source-backward",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Arrow Down",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "recording-filename",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "stream-timecode",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "recording-timecode",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "virtual-cam-timecode",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "start-streaming",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Play",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "stop-streaming",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Stop",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "start-recording",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Record",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "stop-recording",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Stop",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "pause-recording",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Pause",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "resume-recording",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Play Pause",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "start-replay-buffer",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Play",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "stop-replay-buffer",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Stop",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "save-replay-buffer",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Download",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "start-virtual-cam",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Play",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "stop-virtual-cam",
    ControlType = "Button",
    ButtonType = "Trigger",
    Icon = "Stop",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "stream-status-bitrate",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "stream-status-fps",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "stream-status-strain",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "stream-status-cpu",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "stream-status-memory",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "stream-status-disk",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both"
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  if CurrentPage == "Dashboard" then
  
    table.insert(graphics,{
      Type = "GroupBox",
      CornerRadius = 15,
      Fill = {58,58,58},
      StrokeWidth = 0,
      Position = {0,0},
      Size = {1000, 430}
    })
  
    Logo = ""
    table.insert(graphics,
      {Type = "Image",
      Image = Logo,
      Position = {8,8},
      Size = {100,100}
    })
  
    table.insert(graphics,{
      Type = "Label",
      Text = "OBS Studio",
      Position = {118,8},
      Size = {200,100},
      Font = "Roboto",
      FontSize = 30,
      FontStyle = "Light",
      Color = {255,255,255},
      HTextAlign = "Left",
    })
  
    for i, name in ipairs({
      "OBS Version",
      "Websocket Version",
    }) do
  
    table.insert(graphics,{
      Type = "Label",
      Text = name,
      Position = {318,8+(16*(i-1))},
      Size = {110,16},
      Font = "Roboto",
      FontStyle = "Light",
      Color = {204,204,204},
      HTextAlign = "Left",
    })
  
    layout[string.gsub(string.lower(name), " ", "-")] = {
      PrettyName = string.format("Plugin Information~%s", name),
      Style = "Text",
      TextBoxStyle = "Normal",
      Font = "Roboto",
      FontStyle = "Light",
      IsReadOnly = true,
      Margin = 1,
      Color = {194,194,194},
      Position = {318+110,8+(16*(i-1))},
      Size = {64,16}
    }
  end
  
    local sections = {
      {8, 130},
      {202, 130},
      {396, 130},
      {590, 130},
      {784, 130}
    }
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Scenes",
      Position = sections[1],
      Size = {190,20},
      Font = "Roboto",
      FontStyle = "Light",
      Color = {204,204,204},
      Fill = {70,70,70}
    })
  
    layout["scenes"] = {
      PrettyName = "Scenes",
      Style = "ListBox",
      Position = {sections[1][1],130+24},
      Size = {190,155}
    }
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Sources",
      Position = sections[2],
      Size = {190,20},
      Font = "Roboto",
      FontStyle = "Light",
      Color = {204,204,204},
      Fill = {70,70,70}
    })
  
    layout["sources"] = {
      PrettyName = "Sources",
      Style = "ListBox",
      Position = {sections[2][1],130+24},
      Size = {190,155}
    }
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Audio Mixer",
      Position = sections[3],
      Size = {190,20},
      Font = "Roboto",
      FontStyle = "Light",
      Color = {204,204,204},
      Fill = {70,70,70}
    })
  
    layout["audio-mixer"] = {
      PrettyName = "Audio Mixer",
      Style = "ListBox",
      Position = {sections[3][1],130+24},
      Size = {190,155}
    }
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Scene Transitions",
      Position = sections[4],
      Size = {190,20},
      Font = "Roboto",
      FontStyle = "Light",
      Color = {204,204,204},
      Fill = {70,70,70}
    })
  
    table.insert(graphics,{
      Type = "Label",
      Text = "Type",
      Position = {sections[4][1],130+24},
      Size = {60,16},
      Font = "Roboto",
      FontStyle = "Light",
      Color = {204,204,204},
      HTextAlign = "Left",
    })
  
    layout["transition-type"] = {
      PrettyName = "Transition~Type",
      Style = "ComboBox",
      CornerRadius = 2,
      Position = {sections[4][1]+60,130+24},
      Margin = 1,
      Size = {130,16}
    }
  
    table.insert(graphics,{
      Type = "Label",
      Text = "Duration",
      Position = {sections[4][1],130+24+16},
      Size = {60,16},
      Font = "Roboto",
      FontStyle = "Light",
      Color = {204,204,204},
      HTextAlign = "Left",
    })
  
    layout["transition-duration"] = {
      PrettyName = "Transition~Duration",
      Style = "Text",
      CornerRadius = 2,
      TextBoxStyle = "Normal",
      Margin = 1,
      Position = {sections[4][1]+60,130+24+16},
      Size = {100,16}
    }
  
    table.insert(graphics,{
      Type = "Label",
      Text = "ms",
      Position = {sections[4][1]+60+100,130+24+16},
      Size = {30,16},
      Font = "Roboto",
      FontStyle = "Light",
      Color = {204,204,204},
      HTextAlign = "Left",
    })
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Controls",
      Position = sections[5],
      Size = {190,20},
      Font = "Roboto",
      FontStyle = "Light",
      Color = {204,204,204},
      Fill = {70,70,70}
    })
  
    for i, name in ipairs({
        "Start Streaming",
        "Stop Streaming",
        "Start Recording",
        "Stop Recording",
        "Pause Recording",
        "Resume Recording",
        "Start Replay Buffer",
        "Stop Replay Buffer",
        "Save Replay Buffer",
        "Start Virtual Cam",
        "Stop Virtual Cam"
      }) do
  
      table.insert(graphics,{
        Type = "Label",
        Text = name,
        Position = {sections[5][1],sections[5][2]+6+(i*16)},
        Size = {154,16},
        Font = "Roboto",
        FontStyle = "Light",
        Color = {204,204,204},
        HTextAlign = "Left",
      })
  
      layout[string.gsub(string.lower(name), " ", "-")] = {
        PrettyName = string.format("Controls~Main~%s", name),
        ButtonStyle = "Trigger",
        CornerRadius = 2,
        Font = "Roboto",
        FontStyle = "Light",
        Position = {sections[5][1]+154,sections[5][2]+6+(i*16)},
        Size = {36,16}
      }
    end
  
    for i, name in ipairs({
        "Source Forward",
        "Source Backward",
        "Source Render",
        "Source Locked"
      }) do
      layout[string.gsub(string.lower(name), " ", "-")] = {
        PrettyName = string.format("Controls~Source~%s", name),
        ButtonStyle = (i<=2 and "Trigger" or "Toggle"),
        CornerRadius = 2,
        Font = "Roboto",
        FontStyle = "Light",
        Position = {sections[2][1]+((i-1)*28),sections[2][2]+24+155},
        Size = {28,28},
        Color = {31,31,31},
        UnlinkOffColor = true,
        OffColor = {58,58,58},
        StrokeWidth = 0
      }
    end
  
    table.insert(graphics,{
      Type = "Text",
      Text = 'Tip: Recordings cannot be paused if the recording quality is set to "Same as stream".',
      Position = {8,sections[2][2]+24+165+28},
      Size = {578,21},
      Font = "Roboto",
      FontStyle = "Medium",
      Color = {192,117,33},
      HTextAlign = "Left",
    })
  
    table.insert(graphics,{
      Type = "Text",
      Text = 'Tip: "Enable Replay Buffer" must be enabled in Settings -> Output -> Recording.',
      Position = {8,sections[2][2]+24+165+28+21},
      Size = {578,21},
      Font = "Roboto",
      FontStyle = "Medium",
      Color = {192,117,33},
      HTextAlign = "Left",
    })
  
    table.insert(graphics,{
      Type = "Text",
      Text = 'Tip: For discrete Scene/Source/Audio Mixer controls, create a copy of the ListBox control and change the presentation to Button -> String, with the "Button String" value as the item name.',
      Position = {8,sections[2][2]+24+165+28+21+21},
      Size = {578,30},
      Font = "Roboto",
      FontStyle = "Medium",
      Color = {192,117,33},
      HTextAlign = "Left",
    })
  
    layout["source-volume"] = {
      PrettyName = "Controls~Audio Mixer~Volume",
      Style = "Fader",
      Color = {254,248,164},
      Position = {sections[3][1],sections[3][2]+24+155},
      Size = {162,28}
    }
  
    layout["source-mute"] = {
      PrettyName = "Controls~Audio Mixer~Mute",
      Style = "Button",
      Position = {sections[3][1]+162,sections[3][2]+24+155},
      Size = {28,28},
      Color = {205,50,50},
      UnlinkOffColor = true,
      OffColor = {58,58,58},
      StrokeWidth = 0
    }
  
    for i, name in ipairs({
        "Is Streaming",
        "Virtual Camera Active",
        "Is Recording",
        "Recording Paused",
        "Replay Buffer Active",
      }) do
  
        table.insert(graphics,{
          Type = "Label",
          Text = name,
          Position = {sections[4][1],8+((i-1)*16)},
          Size = {110,16},
          Font = "Roboto",
          FontStyle = "Light",
          Color = {204,204,204},
          HTextAlign = "Left",
        })
  
        layout[string.gsub(string.lower(name), " ", "-")] = {
          PrettyName = string.format("LED~%s", name),
          Style = "Led",
          Position = {sections[4][1]+110,8+((i-1)*16)},
          Size = {16,16},
          Color = {128,255,0},
          UnlinkOffColor = true,
          OffColor = {124,0,0}
        }
    end
  
    for i, name in ipairs({
      "Stream Timecode",
      "Virtual Cam Timecode",
      "Recording Timecode",
    }) do
  
      layout[string.gsub(string.lower(name), " ", "-")] = {
        PrettyName = string.format("Timecode~%s", name),
        Style = "Text",
        IsReadOnly = true,
        Color = {194,194,194},
        Margin = 1,
        Position = {sections[4][1]+126,8+((i-1)*16)},
        Size = {64,16}
      }
  end
  
    for i, name in ipairs({
      "Stream Status Bitrate",
      "Stream Status FPS",
      "Stream Status Strain",
      "Stream Status CPU",
      "Stream Status Memory",
      "Stream Status Disk",
    }) do
  
      table.insert(graphics,{
        Type = "Label",
        Text = string.gsub(name, 'Stream Status ', ""),
        Position = {sections[5][1],8+((i-1)*16)},
        Size = {100,16},
        Font = "Roboto",
        FontStyle = "Light",
        Color = {204,204,204},
        HTextAlign = "Left",
      })
  
      layout[string.gsub(string.lower(name), " ", "-")] = {
        PrettyName = string.format("Stream Statistics~%s", name),
        Style = "Text",
        IsReadOnly = true,
        Color = {194,194,194},
        Margin = 1,
        Position = {sections[5][1]+100,8+((i-1)*16)},
        Size = {90,16}
      }
  end
  
  elseif CurrentPage == "Configuration" then
    local y = {}
    for i, label in ipairs({
      "Status",
      "IP Address",
      "Password",
      "Connect"
    }) do
      table.insert(y, (i-1)*18)
      table.insert(graphics,{
        Type = "Text",
        Text = label,
        Position = {0, y[i]},
        Size = {128,16},
        HTextAlign = "Left"
      })
    end
    layout["status"] = {
      PrettyName = "Configuration~Status",
      -- Style = "Button",
      Position = {128,y[1]},
      Size = {160,16},
    }
    layout["ip-address"] = {
      PrettyName = "Configuration~IP Address",
      Style = "Text",
      Position = {128,y[2]},
      Size = {96,16},
    }
    layout["password"] = {
      PrettyName = "Configuration~Password",
      Style = "Text",
      Position = {128,y[3]},
      Size = {96,16},
    }
    layout["connect"] = {
      PrettyName = "Configuration~Connect",
      Style = "Button",
      Position = {128,y[4]},
      Size = {36,16},
    }
  
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  rapidjson = require("rapidjson")
  
  iswebsock = false
  websockbuffer = ""
  poll_timer = Timer.New()
  websock = TcpSocket.New()
  websock.ReadTimeout = 10
  websock.WriteTimeout = 0
  websock.ReconnectTimeout = 2
  
  ------------------------------------------------------------------------------------------------------------------------------------------ Websock Functions \/
  
  -- The following is based on lua-websockets by Gerhard Lipp. This has been hacked together to work within Q-Sys, and is a very rough proof of concept. Further work is required. - CB
  
  --[[
  Copyright (c) 2012 by Gerhard Lipp <gelipp@gmail.com>
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  --]]
  
  bit = require"bit32"
  rol = bit.rol
  bxor = bit.bxor
  bor = bit.bor
  band = bit.band
  bnot = bit.bnot
  lshift = bit.lshift
  rshift = bit.rshift
  tconcat = table.concat
  sunpack = string.unpack
  base64_encode = enc
  DEFAULT_PORTS = {ws = 80, wss = 443}
  pack_bytes = string.char
  write_int8 = pack_bytes
  
  --------------------------------------------------------------
  ------------------- Read & Write Functions -------------------
  --------------------------------------------------------------
  
  local read_n_bytes = function(str, pos, n)
    pos = pos or 1
    return pos+n, string.byte(str, pos, pos + n - 1)
  end
  
  local read_int8 = function(str, pos)
    return read_n_bytes(str, pos, 1)
  end
  
  local read_int16 = function(str, pos)
    local new_pos,a,b = read_n_bytes(str, pos, 2)
    return new_pos, lshift(a, 8) + b
  end
  
  local read_int32 = function(str, pos)
    local new_pos,a,b,c,d = read_n_bytes(str, pos, 4)
    return new_pos,
    lshift(a, 24) +
    lshift(b, 16) +
    lshift(c, 8 ) +
    d
  end
  
  local write_int16 = function(v)
    return pack_bytes(rshift(v, 8), band(v, 0xFF))
  end
  
  local write_int32 = function(v)
    return pack_bytes(
      band(rshift(v, 24), 0xFF),
      band(rshift(v, 16), 0xFF),
      band(rshift(v,  8), 0xFF),
      band(v, 0xFF)
    )
  end
  
  -------------------------------------------------------------
  -------------------- Encoding & Decoding --------------------
  -------------------------------------------------------------
  
  -- Following Websocket RFC: http://tools.ietf.org/html/rfc6455
  
  local bits = function(...)
    local n = 0
    for _,bitn in pairs{...} do
      n = n + 2^bitn
    end
    return n
  end
  
  local bit_7 = bits(7)
  local bit_0_3 = bits(0,1,2,3)
  local bit_0_6 = bits(0,1,2,3,4,5,6)
  
  -- TODO: improve performance
  local xor_mask = function(encoded,mask,payload)
    local transformed,transformed_arr = {},{}
    -- xor chunk-wise to prevent stack overflow.
    -- sbyte and schar multiple in/out values
    -- which require stack
    for p=1,payload,2000 do
      local last = math.min(p+1999,payload)
      local original = {string.byte(encoded,p,last)}
      for i=1,#original do
        local j = (i-1) % 4 + 1
        transformed[i] = bxor(original[i],mask[j])
      end
      local xored = string.char(table.unpack(transformed,1,#original))
      table.insert(transformed_arr,xored)
    end
    return tconcat(transformed_arr)
  end
  
  local encode_header_small = function(header, payload)
    return string.char(header, payload)
  end
  
  local encode_header_medium = function(header, payload, len)
    return string.char(header, payload, band(rshift(len, 8), 0xFF), band(len, 0xFF))
  end
  
  local encode_header_big = function(header, payload, high, low)
    return string.char(header, payload)..write_int32(high)..write_int32(low)
  end
  
  local encode = function(data,opcode,masked,fin)
    local header = opcode or 1-- TEXT is default opcode
    if fin == nil or fin == true then
      header = bor(header,bit_7)
    end
    local payload = 0
    if masked then
      payload = bor(payload,bit_7)
    end
    local len = #data
    local chunks = {}
    if len < 126 then
      payload = bor(payload,len)
      table.insert(chunks,encode_header_small(header,payload))
    elseif len <= 0xffff then
      payload = bor(payload,126)
      table.insert(chunks,encode_header_medium(header,payload,len))
    elseif len < 2^53 then
      local high = math.floor(len/2^32)
      local low = len - high*2^32
      payload = bor(payload,127)
      table.insert(chunks,encode_header_big(header,payload,high,low))
    end
    if not masked then
      table.insert(chunks,data)
    else
      local m1 = math.random(0,0xff)
      local m2 = math.random(0,0xff)
      local m3 = math.random(0,0xff)
      local m4 = math.random(0,0xff)
      local mask = {m1,m2,m3,m4}
      table.insert(chunks,write_int8(m1,m2,m3,m4))
      table.insert(chunks,xor_mask(data,mask,#data))
    end
    return tconcat(chunks)
  end
  
  local decode = function(encoded)
    local encoded_bak = encoded
    if #encoded < 2 then
      return nil,2-#encoded
    end
    local pos,header,payload
    pos,header = read_int8(encoded,1)
    pos,payload = read_int8(encoded,pos)
    local high,low
    --if #encoded < pos then return nil, nil end  --cb
    encoded = string.sub(encoded,pos)
    local bytes = 2
    local fin = band(header,bit_7) > 0
    local opcode = band(header,bit_0_3)
    local mask = band(payload,bit_7) > 0
    payload = band(payload,bit_0_6)
    if payload > 125 then
      if payload == 126 then
        if #encoded < 2 then
          return nil,2-#encoded
        end
        pos,payload = read_int16(encoded,1)
      elseif payload == 127 then
        if #encoded < 8 then
          return nil,8-#encoded
        end
        pos,high = read_int32(encoded,1)
        pos,low = read_int32(encoded,pos)
        payload = high*2^32 + low
        if payload < 0xffff or payload > 2^53 then
          assert(false,"INVALID PAYLOAD "..payload)
        end
      else
        assert(false,"INVALID PAYLOAD "..payload)
      end
      
    --if #encoded < pos then return nil, nil end  --cb
      encoded = string.sub(encoded,pos)
      bytes = bytes + pos - 1
    end
    local decoded
    if mask then
      local bytes_short = payload + 4 - #encoded
      if bytes_short > 0 then
        return nil,bytes_short
      end
      local m1,m2,m3,m4
      
    --if #encoded < pos then return nil, nil end  --cb
      pos,m1 = read_int8(encoded,1)
      pos,m2 = read_int8(encoded,pos)
      pos,m3 = read_int8(encoded,pos)
      pos,m4 = read_int8(encoded,pos)
      encoded = string.sub(encoded,pos)
      local mask = {
        m1,m2,m3,m4
      }
      decoded = xor_mask(encoded,mask,payload)
      bytes = bytes + 4 + payload
      read(bytes)
    else
      local bytes_short = payload - #encoded
      if bytes_short > 0 then
        return nil,bytes_short
      end
      if #encoded > payload then
      
    --if #encoded < pos then return nil, nil end  --cb
        decoded = string.sub(encoded,1,payload)
      else
        decoded = encoded
      end
      bytes = bytes + payload
      read(bytes)
    end
    --if #encoded < pos then return nil, nil end  --cb
    return decoded,fin,opcode,encoded_bak:sub(bytes+1),mask
  end
  
  function read(chars)                                                          -- Buffer read function. Replaces sock:Read for websocket.
    local result = string.sub(websockbuffer, 1, chars)
    if chars == #websockbuffer then websockbuffer = "" return result end
    websockbuffer = string.sub(websockbuffer, -(#websockbuffer-chars))
    return result
  end
  
  -------------------------------------------------------------
  -------------------- OBS Socket Handling --------------------
  -------------------------------------------------------------
  
  websock.Connected = function(sock)
  
    print("Sock.Info: Socket Connected")
    
    local request = string.format(
      "GET / HTTP/1.1\r\nHost: %s:%s\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Key: %s\r\nSec-WebSocket-Version: 13\r\n\r\n",
      server,
      string.format("%u", port),
      Crypto.Base64Encode(System.LockingId, true)
    )
    
    Debug(string.format("Sending Websocket Upgrade Request:\n\n%s", request))
    websock:Write(request)
  end
  
  websock.Reconnect = function(sock)
    Controls["status"].Value = 2
    Controls["status"].String = "Socket Reconnecting"
    iswebsock = false
    print("Sock.Info: Socket Reconnecting")
  end
  
  websock.Data = function()
    
    websockbuffer = websockbuffer..websock:Read(websock.BufferLength)
    --print(websockbuffer)
    local continue = true
    repeat
    continue = true
    if iswebsock then
      local indata2, correct = decode(websockbuffer)
        if correct and indata2 ~= nil then
          if string.len(indata2) > 0 then
            ParseResponse(indata2)
          end
          continue = false
        end
    else
      local loc = string.find(websockbuffer, string.char(129))
      if string.find(websockbuffer, "Connection: Upgrade") then
        iswebsock = true
        GotWebsocketUpgrade()
      end
      if loc then
        msg = read(loc-1)
      else
        msg = read(#websockbuffer)
      end
    end
    until continue
  end
  
  websock.Closed = function(sock)
    Controls["status"].Value = 2
    Controls["status"].String = "Socket Closed"
    iswebsock = false
    print("Sock.Info: Socket Closed by Remote")
  end
  
  websock.Error = function(sock, err)
    Controls["status"].Value = 2
    Controls["status"].String = "Socket has Error"
    iswebsock = false
    print(string.format("Sock.Info: Socket has Error [%s]", err))
  end
  
  websock.Timeout = function(sock, err)
    Controls["status"].Value = 2
    Controls["status"].String = "Socket Timed Out"
    iswebsock = false
    print(string.format("Sock.Info: Socket Timed Out [%s]", err))
  end
  
  -------------------------------------------------------------
  -------------------- OBS API Functionality ------------------
  -------------------------------------------------------------
  
  function Initialize()
    
    ResetTimers()
    
    Controls["status"].Value = 5
    Controls["status"].String = ""
    
    Controls["is-streaming"].Boolean = false
    Controls["is-recording"].Boolean = false
    
    InitListBox("scenes")
    InitListBox("sources")
  end
  
  function Connect()
    
    server, port = Controls["ip-address"].String, 4444
    
    iswebsock = false
    
    if websock.IsConnected then websock:Disconnect() end
    
    if (not Controls["connect"].Boolean) then 
      ResetTimers()
      Controls["status"].Value = 3
      Controls["status"].String = "Manually Disconnected"
    return end
    
    Controls["status"].Value = 5
    Controls["status"].String = "Connecting..."
    
    websock:Connect(server, port);
    
  end
  
  function GotWebsocketUpgrade()
  
    if (not iswebsock) then return Debug("Error [Upgrade Rejected]") end
    
    ObsRequest({request_type = "GetAuthRequired"}, {message_id = "auth-required"})
    
  end
  
  function Authenticate(tbl)
  
    Initialize()
    
    local password = Controls["password"].String
    
    if (password == "") then 
      print("Set a Password!")
      Controls['status'].String = "Password Required"
    return end
    
    local challenge = tbl["challenge"]
    local salt = tbl["salt"]
    
    local secret_string = password .. salt
    local secret_hash = Crypto.Digest("sha256", secret_string)
    local secret = Crypto.Base64Encode(secret_hash)
    
    local auth_response_string = secret .. challenge
    local auth_response_hash = Crypto.Digest("sha256", auth_response_string)
    local auth_response = Crypto.Base64Encode(auth_response_hash)
    
    Debug("Attempting to Authenticate...")
    
    ObsRequest({request_type = "Authenticate"}, {auth = auth_response}, {message_id = "authenticate"})
  end
  
  function Begin()
    
    static_audio_sources = {}
    
    Controls["status"].Value = 0
    Controls["status"].String = string.format("Connected: %s", server)
    
    ObsRequest({request_type = "GetVersion"}, {name = "obs-studio-version"}, {message_id = ""})
    ObsRequest({request_type = "GetSourceTypesList"}, {message_id = "source-types-list"})
    ObsRequest({request_type = "GetTransitionList"}, {message_id = "get-transition-list"})
    ObsRequest({request_type = "GetTransitionDuration"}, {message_id = "get-transition-duration"})
    poll_timer:Start(1)
        
  end
  
  function SendWebsocket(data)
    if iswebsock and websock.IsConnected then
      websock:Write(encode(data, 1, 1))
    else
      Debug("Error [Websocket Upgrade Failed - Cannot Send Data]")
    end
  end
  
  function GetScene(string)
    for i, v in ipairs(Controls["scenes"]) do
      if string == v.String then
        return i
      end
    end
  end
  
  function ResetTimers()
    poll_timer:Stop()
  end
  
  function InitListBox(ctl_group)
  
    Controls[ctl_group].Choices = {}
    Controls[ctl_group].String = ""
    
  end
  
  function Poll()
    --print("Polling Status [Streaming?] [Studio Mode?] [Replay Buffer?]")
        
    ObsRequest({request_type = "GetStudioModeStatus"}, {message_id = "studio-mode-poll"})
    ObsRequest({request_type = "GetStreamingStatus"}, {message_id = "stream-status-poll"})
    ObsRequest({request_type = "GetReplayBufferStatus"}, {message_id = "replaybuffer-status-poll"})
  end
  
  function ObsRequest(...)
  
    tbl = {}
    
    local args = table.pack(...); args.n = nil
    
    for i, arg_table in ipairs(args) do
      for k, value in pairs(arg_table) do
        key = string.gsub(k, "_", "-")
        tbl[key] = value
      end
    end
    
    SendWebsocket(rapidjson.encode(tbl))
  end
  
  function SetLED(name, state, i)
  
    if (i) then
      Controls[name][i].Boolean = state
    else
      Controls[name].Boolean = state
    end
    
  end
  
  function DirectCut(scene)
    if (scene == "") then return end
    Debug(string.format("Cutting to Scene [%s]", scene))
    ObsRequest({request_type = "SetCurrentScene"}, {scene_name = scene}, {message_id = ""})
  end
  
  function SetSourceProps(this, ctl, vis)
    for i, v in pairs(props_presets) do
      if ctl.String == props_presets[i]["name"] then
      
        Debug(string.format("Setting Properties for Scene Item [%s]", Controls["sources"][this].String))
        
        ObsRequest(
          {request_type = "SetSceneItemProperties"}, 
          {scene_name = current_scene},
          {item = Controls["sources"].String},
          {visible = Controls["Source Render"].Boolean},
          {message_id = "set-props"}
        )
      end
    end
  end
  
  function Debug(input)
    if type(input) == "table" then
      --print(rapidjson.encode(input, {pretty = true}))
    else
      --print(input)
    end
  end
  
  function ParseResponse(data)
  
    tbl = rapidjson.decode(data)
    
    Debug(tbl)
    
    if ((tbl["status"] == "error") and (tbl["error"] == "Not Authenticated")) then
      Controls["status"].Value = 2
      Controls["status"].String = "Not Authenticated"
      return ObsRequest({request_type = "GetAuthRequired"}, {message_id = "auth-required"})
    end
    
    if (tbl["message-id"] == "auth-required") then
    
      if (tbl["authRequired"]) then
        Controls["status"].Value = 1
        Controls["status"].String = "Authentication Required"
        return Authenticate(tbl)
      else
        Begin()
      end
    
    elseif (tbl["message-id"] == "authenticate") then
    
      if (tbl["status"] == "ok") then
        Begin()
        Debug("Authentication Complete.")
      else
        Controls["status"].Value = 2
        Controls["status"].String = "Authentication Failed"
      end
    
    elseif tbl["obs-studio-version"] then
      
      Controls["obs-version"].String = tbl["obs-studio-version"]
      Controls["websocket-version"].String = tbl["obs-websocket-version"]
      
      local AvailableRequests = {}
      
      for request in tbl["available-requests"]:gmatch("(%w+),") do
        table.insert(AvailableRequests, request)
      end
      
      Debug(AvailableRequests)
  
      --Controls["Available Requests"].Choices = AvailableRequests
      
    elseif tbl["message-id"] == "stream-status-poll" then
      
      Debug(string.format("Streaming [%s], Recording [%s], Virtual Camera [%s]", tbl["streaming"], tbl["recording"], tbl["virtualcam"]))
      
      Controls["is-streaming"].Boolean = tbl["streaming"]
      Controls["stream-timecode"].String = tbl["stream-timecode"] and tbl["stream-timecode"]:match("[%w:]+") or ""
      
      if (not tbl["streaming"]) then
        Controls["stream-status-bitrate"].String = ""
        Controls["stream-status-fps"].String = ""
        Controls["stream-status-strain"].String = ""
        Controls["stream-status-cpu"].String = ""
        Controls["stream-status-memory"].String = ""
        Controls["stream-status-disk"].String = ""
      end
      
      Controls["is-recording"].Boolean = tbl["recording"]
      SetLED("recording-paused", tbl["recording-paused"])
      Controls["recording-timecode"].String = tbl["rec-timecode"] and tbl["rec-timecode"]:match("[%w:]+") or ""
      
      Controls["virtual-camera-active"].Boolean = tbl["virtualcam"]
      Controls["virtual-cam-timecode"].String = tbl["virtualcam-timecode"] and tbl["virtualcam-timecode"]:match("[%w:]+") or ""
      
    elseif tbl["message-id"] == "replaybuffer-status-poll" then
      
      Debug(string.format("Replay Buffer [%s]", tbl["isReplayBufferActive"]))
      
      Controls["replay-buffer-active"].Boolean = tbl["isReplayBufferActive"]
      Controls["save-replay-buffer"].IsDisabled = not tbl["isReplayBufferActive"]
      
    elseif tbl["update-type"] == "StreamStatus" then
      
      Controls["stream-status-bitrate"].String = string.format("%d Kbps", tbl["kbits-per-sec"])
      Controls["stream-status-fps"].String = math.floor(tbl["fps"])
      Controls["stream-status-strain"].String = string.format("%d%%", math.floor(tbl["strain"]))
      Controls["stream-status-cpu"].String = string.format("%d%%", math.floor(tbl["cpu-usage"]))
      Controls["stream-status-memory"].String = string.format("%d MB", math.floor(tbl["memory-usage"]))
      Controls["stream-status-disk"].String = string.format("%d MB", math.floor(tbl["free-disk-space"]))
        
      bitrate = tbl["kbits-per-sec"]
      dropped_frames = tbl["num-dropped-frames"]
      strain = tbl["strain"]
      fps = string.format("%.f", tbl["fps"])
      
    end
    
    for i, update_type in ipairs({"RecordingStarted", "RecordingStopping", "RecordingStopped"}) do
      if (tbl["update-type"] == update_type) then
      
        Controls["recording-filename"].String = tbl["recordingFilename"]
      
      end
    end
    
    -----------------------------------
    ----- Update Scenes & Sources -----
    -----------------------------------
    
    if tbl["message-id"] == "scene-list" then
      
      scene_list = {}
      current_scene = {}
      source_list = {}
      source_properties = {}
      
      current_scene = tbl["current-scene"]
      
      for i, scene in ipairs(tbl.scenes) do
        table.insert(scene_list, scene.name)
      end
      
      Controls["scenes"].Choices = scene_list
      Controls["scenes"].String = current_scene
      Controls["sources"].String = ""
      Controls["audio-mixer"].String = ""
      Controls["source-locked"].Boolean = false
      Controls["source-render"].Boolean = false
      Controls["source-mute"].Boolean = false
      Controls["source-volume"].Boolean = false
      Controls["source-locked"].IsDisabled = true
      Controls["source-render"].IsDisabled = true
      Controls["source-mute"].IsDisabled = true
      Controls["source-volume"].IsDisabled = true
      Controls["source-forward"].IsDisabled = true 
      Controls["source-backward"].IsDisabled = true
      
      ObsRequest({request_type = "GetSceneItemList"},{message_id = "scene-item-list"})
    
    elseif tbl["message-id"] == "reorder-scene-items" then
  
      ObsRequest({request_type = "GetSceneItemList"},{message_id = "scene-item-list"})
  
    elseif tbl["message-id"] == "get-scene-item-props" then 
  
      Controls["source-render"].Boolean = tbl.visible
      Controls["source-locked"].Boolean = tbl.locked
      Controls["source-mute"].Boolean = tbl.muted
      Controls["source-forward"].IsDisabled = false
      Controls["source-backward"].IsDisabled = false
      Controls["source-locked"].IsDisabled = false
      Controls["source-render"].IsDisabled = false
  
    elseif tbl["message-id"] == "get-scene-item-mute" then 
    
  
      if (tbl.muted == nil) then return end
  
      Controls["source-mute"].Boolean = tbl.muted
      Controls["source-mute"].IsDisabled = false
  
    elseif tbl["message-id"] == "get-scene-item-volume" then 
  
      if not tbl.volume then return end
  
      Controls["source-volume"].Value = tbl.volume
      Controls["source-volume"].IsDisabled = false
  
    elseif tbl["message-id"] == "source-types-list" then
  
      types = {}
  
      for i, tbl in ipairs(tbl.types) do
        types[tbl.typeId] = {}
        types[tbl.typeId].hasAudio = tbl.caps.hasAudio
      end
  
      ObsRequest({request_type = "GetSourcesList"},{message_id = "source-list"})    
  
    elseif tbl["message-id"] == "source-list" then
  
      --[[for i,tbl in ipairs(tbl.sources) do
  
        if tbl.typeId == "wasapi_input_capture" or tbl.typeId == "wasapi_output_capture" then 
          table.insert(static_audio_sources, tbl.name)
        end 
  
      end]]
  
      ObsRequest({request_type = "GetSceneList"}, {name = "scenes"}, {message_id = "scene-list"})
  
      --Controls["audio-mixer"].Choices = static_audio_sources
  
    elseif tbl["message-id"] == "get-current-scene" then
      
    elseif tbl["message-id"] == "scene-item-list" then
  
      source_list = {}
      source_properties = {}
      local audio_mixer = {}
  
      -- copy global audio sources into the audio mixer table
      for i, source in ipairs(static_audio_sources) do
        table.insert(audio_mixer, 1, source)
      end
  
      for i, source in ipairs(tbl.sceneItems) do
        table.insert(source_list, 1, source.sourceName)
        
        source_properties[source.sourceName] = {}
        source_properties[source.sourceName]["sourceKind"] = source.sourceKind
        source_properties[source.sourceName]["sourceType"] = source.sourceType
  
        -- insert scene items with audio into the audio mixer table
        if types[source.sourceKind].hasAudio then table.insert(audio_mixer, 1, source.sourceName) end
      end
  
      Controls["audio-mixer"].Choices = audio_mixer
      Controls["sources"].Choices = source_list
      
    elseif tbl["message-id"] == "get-transition-list" then
  
      if (not tbl.transitions) then return end
  
      local transitions = {}
  
      for i, tbl in ipairs(tbl["transitions"]) do 
        table.insert(transitions, tbl.name)
      end
  
      Controls["transition-type"].Choices = transitions
      Controls["transition-type"].String = tbl["current-transition"]
  
    elseif tbl["message-id"] == "get-transition-duration" then
  
      if (not tbl["transition-duration"]) then return end
  
      Controls["transition-duration"].Value = tbl["transition-duration"]
  
    end
    
    -------------------------
    ----- Update Events -----
    -------------------------
    
    for i, update in ipairs({
    "SwitchTransition",
    "TransitionListChanged",
    "TransitionDurationChanged"
  }) do
      if update == tbl["update-type"] then
        Debug(string.format("Update Event Received [%s] - Fetching Transition Information...", update))
        ObsRequest({request_type = "GetTransitionList"}, {message_id = "get-transition-list"})
        ObsRequest({request_type = "GetTransitionDuration"}, {message_id = "get-transition-duration"})
      break end
    end
  
    for i, update in ipairs({
    "SwitchScenes",
    "ScenesChanged",
    "SceneCollectionChanged",
    "SceneCollectionListChanged"
  }) do
      if update == tbl["update-type"] then
        Debug(string.format("Update Event Received [%s] - Fetching Scene List Again...", update))
        ObsRequest({request_type = "GetSceneList"}, {name = "scenes"}, {message_id = "scene-list"})
      break end
    end
  
  for i, update in ipairs({
    "SceneItemAdded",
    "SceneItemRemoved",
    "SceneItemVisibilityChanged",
    "SceneItemLockChanged",
    "SceneItemTransformChanged",
    "SceneItemSelected",
    "SceneItemDeselected",
    "SourceCreated",
    "SourceDestroyed",
    "SourceVolumeChanged",
    "SourceMuteStateChanged",
    "SourceAudioSyncOffsetChanged",
    "SourceAudioDeactivated",
    "SourceAudioActivated",
    "SourceAudioMixersChanged",
    "SourceRenamed",
    "SourceFilterAdded",
    "SourceFilterRemoved",
    "SourceFilterVisibilityChanged",
    "SourceFiltersReordered",
    "SourceOrderChanged",
  }) do
      if update == tbl["update-type"] then
        Debug(string.format("Source Update Event Received [%s] - Fetching Scene Items...", update))
        ObsRequest({request_type = "GetSceneItemList"},{message_id = "scene-item-list"})
      break end
    end
    ---------------------------------
    ----- Force Studio Mode Off -----
    ---------------------------------
    
    if tbl["message-id"] == "studio-mode-poll" then
      if tbl["studio-mode"] then
        Debug("Studio Mode Detected - Automatically Disabling Studio Mode.")
        Timer.CallAfter(function() ObsRequest({request_type = "DisableStudioMode"}, {message_id = ""}) end, 1)
      end
    end
    
  end
  
  -------------------------------------------------------
  -------------------- EventHandlers --------------------
  -------------------------------------------------------
  
  poll_timer.EventHandler = Poll
  
  Controls["ip-address"].EventHandler = Connect
  Controls["password"].EventHandler = Connect
  Controls["connect"].EventHandler = Connect
  
  Controls["transition-type"].EventHandler = function(c)
    ObsRequest({request_type = "SetCurrentTransition"}, {transition_name = c.String}, {message_id = ""})
  end
  
  Controls["scenes"].EventHandler = function(c) DirectCut(c.String) end
  
  Controls["sources"].EventHandler = function(c)
  
    if (c.String == "") then return end
  
    ObsRequest(
      {request_type = "GetSceneItemProperties"}, 
      {scene_name = current_scene},
      {item = Controls["sources"].String},
      {message_id = "get-scene-item-props"}
    )
  
  end
  
  Controls["audio-mixer"].EventHandler = function(c)
    
    if (c.String == "") then return end
  
    ObsRequest(
      {request_type = "GetMute"},
      {source = Controls["audio-mixer"].String},
      {message_id = "get-scene-item-mute"}
    )
  
    ObsRequest(
      {request_type = "GetVolume"},
      {source = Controls["audio-mixer"].String},
      {useDecibel = true},
      {message_id = "get-scene-item-volume"}
    )
  
  end
  
  for i, controlName in ipairs({"source-forward", "source-backward"}) do 
    Controls[controlName].EventHandler = function()
      if (Controls["sources"].String == "") then return end
  
      local order = {}
      local id = nil 
  
      for i, source in ipairs(Controls["sources"].Choices) do
        table.insert(order, {name = source})
        if source == Controls["sources"].String then id = i end
      end
  
      if not id then return end
  
      table.remove(order, id)
  
      if controlName == "source-forward" then 
        id = id - 1
      elseif controlName == "source-backward" then 
        id = id + 1
      end
  
      result, err = pcall(function()
        table.insert(order, id, {name = Controls["sources"].String})
      end)
  
      if err then return end
  
      ObsRequest({request_type = "ReorderSceneItems"}, {scene = Controls["scenes"].String}, {items = order}, {message_id = "reorder-scene-items"})
      end
  end
  
  Controls["source-locked"].EventHandler = function(c)
  
    if (c.String == "") then return end
  
    ObsRequest(
      {request_type = "SetSceneItemProperties"}, 
      {scene_name = current_scene},
      {item = Controls["sources"].String},
      {locked = c.Boolean},
      {message_id = "set-props"}
    )
  end
  
  Controls["source-render"].EventHandler = function(c)
  
    if (c.String == "") then return end
  
    ObsRequest(
      {request_type = "SetSceneItemProperties"}, 
      {scene_name = current_scene},
      {item = Controls["sources"].String},
      {visible = c.Boolean},
      {message_id = "set-props"}
    )
  end
  
  Controls["source-mute"].EventHandler = function(c)
  
    if (c.String == "") then return end
  
    ObsRequest(
      {request_type = "SetMute"},
      {source = Controls["audio-mixer"].String},
      {mute = c.Boolean},
      {message_id = ""}
    )
  end
  
  Controls["source-volume"].EventHandler = function(c)
  
    if (c.String == "") then return end
  
    ObsRequest(
      {request_type = "SetVolume"},
      {source = Controls["audio-mixer"].String},
      {useDecibel = true},
      {volume = c.Value},
      {message_id = ""}
    )
  end
  
  Controls["transition-duration"].EventHandler = function(c)
  
    ObsRequest(
      {request_type = "SetTransitionDuration"},
      {duration = math.floor(c.Value)},
      {message_id = ""}
    )
  
  end 
  
  Controls["start-streaming"].EventHandler = function() ObsRequest({request_type = "StartStreaming"}, {message_id = "streaming"}) end
  Controls["stop-streaming"].EventHandler = function() ObsRequest({request_type = "StopStreaming"}, {message_id = "streaming"}) end
  
  Controls["start-recording"].EventHandler = function() ObsRequest({request_type = "StartRecording"}, {message_id = "recording"}) end
  Controls["stop-recording"].EventHandler = function() ObsRequest({request_type = "StopRecording"}, {message_id = "recording"}) end
  Controls["pause-recording"].EventHandler = function() ObsRequest({request_type = "PauseRecording"}, {message_id = ""}) end
  Controls["resume-recording"].EventHandler = function() ObsRequest({request_type = "ResumeRecording"}, {message_id = ""}) end
  
  Controls["start-virtual-cam"].EventHandler = function() ObsRequest({request_type = "StartVirtualCam"}, {message_id = "virtualcam"}) end
  Controls["stop-virtual-cam"].EventHandler = function() ObsRequest({request_type = "StopVirtualCam"}, {message_id = "virtualcam"}) end
  
  Controls["start-replay-buffer"].EventHandler = function() ObsRequest({request_type =  "StartReplayBuffer"}, {message_id = "replaybuffer"}) end
  Controls["stop-replay-buffer"].EventHandler = function() ObsRequest({request_type =  "StopReplayBuffer"}, {message_id = "replaybuffer"}) end
  Controls["save-replay-buffer"].EventHandler = function() ObsRequest({request_type = "SaveReplayBuffer"}, {message_id = "savereplaybuffer"}) end
  
  Initialize()
  Connect()
end
