PluginInfo = 
{
  Name = "Bose PowerMatch",
  Version = "1.0",
  Id = "c09eac08-8d57-47c9-b720-6b39622c8645",
  Description = "",
  ShowDebug = false,
}

function GetPrettyName( props )
  return PluginInfo.Name
end

function GetColor( props )
  return { 207, 207, 207 }
end

function GetProperties()
  return{
	{
		Name = "Model",
		Type = "enum",
		Choices = {"PM4500N","PM8500N"},
		Value = "PM8500N",
    },
    {
		Name = "Mode",
		Type = "enum",
		Choices = {"Basic","Advanced"},
		Value = "Basic",
    },
  }
end

function GetControls( props )
    local channelcount
    if props["Model"].Value == "PM4500N" then
        channelcount = 4
    elseif props["Model"].Value == "PM8500N" then
        channelcount = 8
    else   
        channelcount = 8
    end



    ctrls = {
    {
      Name = "Name",
      Count = 1,
      ControlType = "Text",
      TextType = "TextBox",
      UserPin = false,
    },
    {
      Name = "IP Address",
      Count = 1,
      ControlType = "Text",
      TextType = "TextBox",
      UserPin = false,
    },
    {
      Name = "Status",
      Count = 1,
      ControlType = "Indicator",
      IndicatorType = "Status",
      UserPin = true,
      PinStyle = "Output",
    },
    {
      Name = "Quad Mode",
      Count = (channelcount/4),
      ControlType = "Indicator",
      IndicatorType = "Led",
      UserPin = true,
      PinStyle = "Output",
    },
    {
      Name = "Mono",
      Count = (channelcount/2),
      ControlType = "Indicator",
      IndicatorType = "Led",
      UserPin = true,
      PinStyle = "Output",
    },
    {
      Name = "V-Bridge",
      Count = (channelcount/2),
      ControlType = "Indicator",
      IndicatorType = "Led",
      UserPin = true,
      PinStyle = "Output",
    },
    {
      Name = "I-Share",
      Count = (channelcount/2),
      ControlType = "Indicator",
      IndicatorType = "Led",
      UserPin = true,
      PinStyle = "Output",
    },
    {
      Name = "Fault",
      Count = (channelcount+1),
      ControlType = "Indicator",
      IndicatorType = "Led",
      UserPin = true,
      PinStyle = "Output",
    },
  }


    if props["Mode"].Value == "Basic" then
      table.insert(ctrls, {
        Name = "Input Signal",
        Count = channelcount,
        ControlType = "Indicator",
        IndicatorType = "LED",
        UserPin = true,
        PinStyle = "Output",
      })
      
      table.insert(ctrls, {
          Name = "Output Meter",
          Count = channelcount,
          ControlType = "Indicator",
          IndicatorType = "LED",
          UserPin = true,
          PinStyle = "Output",
        })

    elseif props["Mode"].Value == "Advanced" then
      table.insert(ctrls, {
        Name = "Input Signal",
        Count = channelcount,
        ControlType = "Indicator",
        IndicatorType = "Meter",
        UserPin = true,
        PinStyle = "Output",
      })

      table.insert(ctrls, {
        Name = "Output Meter",
        Count = channelcount,
        ControlType = "Indicator",
        IndicatorType = "Meter",
        UserPin = true,
        PinStyle = "Output",
      })

      table.insert(ctrls, {
        Name = "Toggle Standby",
        Count = 1,
        ControlType = "Button",
        ButtonType = "Toggle",
        UserPin = true,
        PinStyle = "Both",
      })

      table.insert(ctrls, {
        Name = "Standby",
        Count = 1,
        ControlType = "Indicator",
        IndicatorType = "LED",
        UserPin = true,
        PinStyle = "Output",
      })

      table.insert(ctrls, {
        Name = "Power",
        Count = 1,
        ControlType = "Indicator",
        IndicatorType = "LED",
        UserPin = true,
        PinStyle = "Output",
      })

      table.insert(ctrls, {
        Name = "Fault Clear",
        Count = 1,
        ControlType = "Button",
        ButtonType = "Trigger",
        UserPin = true,
        PinStyle = "Both",
      })

      table.insert(ctrls, {
        Name = "Output Mute",
        Count = channelcount,
        ControlType = "Button",
        ButtonType = "Toggle",
        UserPin = true,
        PinStyle = "Both",
      })

    end

  return ctrls
end

function GetControlLayout( props )
  layout = {}
  local bump = 35
  local shift = 0
  local mode
  local channelcount
  local LETTERS = {"A","B","C","D","E","F","G","H"}
  local shift1 = 0
  local shift2 = 0

  if props["Model"].Value == "PM4500N" then
    bump = bump + 55
    mode = "4"
    channelcount = 4
    shift1 = 0
    shift2 = 38
  elseif props["Model"].Value == "PM8500N" then
    mode = "8"
    channelcount = 8
    shift1 = 116
  end

  if props["Mode"].Value == "Basic" then
    mode = mode.."B"
  elseif props["Mode"].Value == "Advanced" then
    mode = mode.."A"
  end

  layout["Name"] = 
  {
    PrettyName = "Name",
    Position = { 37, 26 + 35},
    Size = { 120, 16 },
    Color = { 255, 255, 255 },
    Style = "TextBox",
    TextBoxStyle = "Normal",
    TextFontSize = 10,
    HTextAlign = "Center",
    VTextAlign = "Center",
    WordWrap = false,
    IsBold = false,
    Margin = 0,
    Radius = 0,
    IsReadOnly = false,
  }

  layout["IP Address"] = 
  {
    PrettyName = "IP Address",
    Position = { 157, 26 + 35},
    Size = { 76, 16 },
    Color = { 255, 255, 255 },
    Style = "TextBox",
    TextBoxStyle = "Normal",
    TextFontSize = 10,
    HTextAlign = "Center",
    VTextAlign = "Center",
    WordWrap = false,
    IsBold = false,
    Margin = 0,
    Radius = 0,
    IsReadOnly = false,
  }

  layout["Status"] = 
  {
    PrettyName = "Status",
    Position = { 37, 58 + 35 },
    Size = { 196, 16 },
    Color = { 194, 194, 194 },
    Margin = 0,
    Radius = 0,
    Style = "Text",
    TextFontSize = 10,
    WordWrap = true,
    IsBold = false,
    IsReadOnly = false,
  }

  if props["Mode"].Value == "Advanced" then
    for i=1, channelcount do
    layout[tostring("Input Signal " .. i)] = 
    {
      PrettyName = "Channel "..tostring(i).."~Input Meter",
      Position = { 32 + (58*(i-1)), 148 + bump },
      Size = { 36,112 },
      Color = { 0, 159, 60 },
      Margin = 0,
      Radius = 3,
      Style = "Meter",
      MeterStyle = "Standard",
      IsReadOnly = false,
    }

    layout[tostring("Output Meter " .. i)] = 
    {
      PrettyName = "Channel "..tostring(i).."~Output Meter",
      Position = { 32 + (58*(i-1)), 467 + bump },
      Size = { 36, 112 },
      Color = { 0, 159, 60 },
      Margin = 0,
      Radius = 3,
      Style = "Meter",
      MeterStyle = "Standard",
      IsReadOnly = false,
    }

    layout[tostring("Output Mute " .. i)] = 
    {
      PrettyName = "Channel "..tostring(i).."~Output Mute",
      Style = "Button",
      Position = { 32 + (58*(i-1)), 585 + bump },
      Size = { 36, 16 },
      Color = { 255, 255, 255 },
      UnlinkOffColor = false,
      --OffColor = { r, g, b },
      ButtonStyle = "Toggle",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Legend = "Mute",
      WordWrap = false,
      IsBold = false,
      TextFontSize = 10,
      Margin = 2,
      Radius = 2,
      IsReadOnly = false,
    }

    layout[tostring("Fault " .. i)] = 
    {
      PrettyName = "Channel "..tostring(i).."~Fault",
      Position = { 55 + (58*(i-1)), 447 + bump },
      Size = { 16 , 16 },
      Color = { 255, 0, 0 },
      StrokeColor = { 188, 0, 0 },
      Margin = 3,
      Radius = 0,
      Style = "Led",
      UnlinkOffColor = false,
      --OffColor = {  },
      IsReadOnly = false,
    }

    end

    for i=1, channelcount/2 do

    layout[tostring("Mono " .. i)] = 
    {
      PrettyName = "Channel "..tostring((i*2)-1).."~Mono",
      Position = { 31 + (116*(i-1)), 400 + bump },
      Size = { 16 , 16 },
      Color = { 255, 0, 0 },
      StrokeColor = { 188, 0, 0 },
      Margin = 3,
      Radius = 0,
      Style = "Led",
      UnlinkOffColor = false,
      --OffColor = {  },
      IsReadOnly = false,
    }

    layout[tostring("V-Bridge " .. i)] = 
    {
      PrettyName = "Channel "..tostring((i*2)-1).."~V-Bridge",
      Position = { 68 + (116*(i-1)), 400 + bump },
      Size = { 16 , 16 },
      Color = { 255, 0, 0 },
      StrokeColor = { 188, 0, 0 },
      Margin = 3,
      Radius = 0,
      Style = "Led",
      UnlinkOffColor = false,
      --OffColor = {  },
      IsReadOnly = false,
    }

    layout[tostring("I-Share " .. i)] = 
    {
      PrettyName = "Channel "..tostring((i*2)-1).."~I-Share",
      Position = { 105 + (116*(i-1)), 400 + bump },
      Size = { 16 , 16 },
      Color = { 255, 0, 0 },
      StrokeColor = { 188, 0, 0 },
      Margin = 3,
      Radius = 0,
      Style = "Led",
      UnlinkOffColor = false,
      --OffColor = {  },
      IsReadOnly = false,
    }

    end
    if channelcount == 4 then

      layout[tostring("Quad Mode")] = 
        {
          PrettyName = "Channel "..tostring(1).."~Quad Mode",
          Position = { 127, 359 + bump },
          Size = { 16 , 16 },
          Color = { 255, 0, 0 },
          StrokeColor = { 188, 0, 0 },
          Margin = 3,
          Radius = 0,
          Style = "Led",
          UnlinkOffColor = false,
          --OffColor = {  },
          IsReadOnly = false,
        }
  
    elseif channelcount == 8 then
      for i=1, channelcount/4 do

      layout[tostring("Quad Mode " .. i)] = 
      {
        PrettyName = "Channel "..tostring((i*4)-3).."~Quad Mode",
        Position = { 127 + (232*(i-1)), 359 + bump },
        Size = { 16 , 16 },
        Color = { 255, 0, 0 },
        StrokeColor = { 188, 0, 0 },
        Margin = 3,
        Radius = 0,
        Style = "Led",
        UnlinkOffColor = false,
        --OffColor = {  },
        IsReadOnly = false,
      }

      end
    end
    
    layout[tostring("Fault " .. (channelcount+1))] = 
    {
      PrettyName = "Fault",
      Position = { 127 + shift1, 320 + bump },
      Size = { 16 , 16 },
      Color = { 255, 0, 0 },
      StrokeColor = { 188, 0, 0 },
      Margin = 3,
      Radius = 0,
      Style = "Led",
      UnlinkOffColor = false,
      --OffColor = {  },
      IsReadOnly = false,
    }

    layout[tostring("Fault Clear")] = 
    {
      PrettyName = "Clear Faults",
      Style = "Button",
      Position = { 146 + shift1, 320 + bump },
      Size = { 36, 16 },
      Color = { 255, 255, 255 },
      UnlinkOffColor = false,
      --OffColor = { r, g, b },
      ButtonStyle = "Trigger",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Legend = "",
      WordWrap = false,
      IsBold = false,
      TextFontSize = 12,
      Margin = 2,
      Radius = 2,
      IsReadOnly = false,
    }

    if channelcount == 4 then
    layout[tostring("Toggle Standby")] = 
      {
        PrettyName = "Power Button",
        Style = "Button",
        Position = { 52, 97 + 35 },
        Size = { 83, 32 },
        Color = { 255, 255, 255 },
        UnlinkOffColor = false,
        --OffColor = { r, g, b },
        ButtonStyle = "Toggle",
        HTextAlign = "Center",
        VTextAlign = "Center",
        Legend = "Power",
        WordWrap = false,
        IsBold = false,
        TextFontSize = 13,
        Margin = 2,
        Radius = 2,
        IsReadOnly = false,
      }

      layout[tostring("Standby")] = 
      {
        PrettyName = "Standby LED",
        Position = { 198, 97 + 35 },
        Size = { 16 , 16 },
        Color = { 255, 0, 0 },
        StrokeColor = { 188, 0, 0 },
        Margin = 3,
        Radius = 0,
        Style = "Led",
        UnlinkOffColor = false,
        --OffColor = {  },
        IsReadOnly = false,
      }      
      
      layout[tostring("Power")] = 
      {
        PrettyName = "Power LED",
        Position = { 198, 113 + 35 },
        Size = { 16 , 16 },
        Color = { 255, 0, 0 },
        StrokeColor = { 188, 0, 0 },
        Margin = 3,
        Radius = 0,
        Style = "Led",
        UnlinkOffColor = false,
        --OffColor = {  },
        IsReadOnly = false,
      }

      elseif channelcount == 8 then
      layout[tostring("Toggle Standby")] = 
        {
          PrettyName = "Power Button",
          Style = "Button",
          Position = { 288, 26 + 35 },
          Size = { 83, 32 },
          Color = { 255, 255, 255 },
          UnlinkOffColor = false,
          --OffColor = { r, g, b },
          ButtonStyle = "Toggle",
          HTextAlign = "Center",
          VTextAlign = "Center",
          Legend = "Power",
          WordWrap = false,
          IsBold = false,
          TextFontSize = 13,
          Margin = 2,
          Radius = 2,
          IsReadOnly = false,
        }
  
        layout[tostring("Standby")] = 
        {
          PrettyName = "Standby LED",
          Position = { 434, 26 + 35 },
          Size = { 16 , 16 },
          Color = { 255, 0, 0 },
          StrokeColor = { 188, 0, 0 },
          Margin = 3,
          Radius = 0,
          Style = "Led",
          UnlinkOffColor = false,
          --OffColor = {  },
          IsReadOnly = false,
        }      
        
        layout[tostring("Power")] = 
        {
          PrettyName = "Power LED",
          Position = { 434, 42 + 35 },
          Size = { 16 , 16 },
          Color = { 255, 0, 0 },
          StrokeColor = { 188, 0, 0 },
          Margin = 3,
          Radius = 0,
          Style = "Led",
          UnlinkOffColor = false,
          --OffColor = {  },
          IsReadOnly = false,
        }


    end
  
  
  elseif props["Mode"].Value == "Basic" then
  
    for i=1, channelcount do
    layout[tostring("Input Signal " .. i)] = 
    {
      PrettyName = "Channel "..tostring(i).."~Input Signal",
      Position = { 82 + (16*(i-1)) + shift2, 143 },
      Size = { 16 , 16 },
      Color = { 255, 0, 0 },
      StrokeColor = { 188, 0, 0 },
      Margin = 3,
      Radius = 0,
      Style = "Led",
      UnlinkOffColor = false,
      --OffColor = {  },
      IsReadOnly = false,
    }

    layout[tostring("Output Meter " .. i)] = 
    {
      PrettyName = "Channel "..tostring(i).."~Output Signal",
      Position = { 82 + (16*(i-1)) + shift2, 222 },
      Size = { 16 , 16 },
      Color = { 255, 0, 0 },
      StrokeColor = { 188, 0, 0 },
      Margin = 3,
      Radius = 0,
      Style = "Led",
      UnlinkOffColor = false,
      --OffColor = {  },
      IsReadOnly = false,
    }

    layout[tostring("Fault " .. i)] = 
    {
      PrettyName = "Channel "..tostring(i).."~Fault",
      Position = { 82 + (16*(i-1)) + shift2, 206 },
      Size = { 16 , 16 },
      Color = { 255, 0, 0 },
      StrokeColor = { 188, 0, 0 },
      Margin = 3,
      Radius = 0,
      Style = "Led",
      UnlinkOffColor = false,
      --OffColor = {  },
      IsReadOnly = false,
    }

    end

    for i=1, channelcount/2 do

      layout[tostring("Mono " .. i)] = 
      {
        PrettyName = "Channel "..tostring((i*2)-1).."~Mono",
        Position = { 90 + (32*(i-1)) + shift2, 274 },
        Size = { 16 , 16 },
        Color = { 255, 0, 0 },
        StrokeColor = { 188, 0, 0 },
        Margin = 3,
        Radius = 0,
        Style = "Led",
        UnlinkOffColor = false,
        --OffColor = {  },
        IsReadOnly = false,
      }

      layout[tostring("V-Bridge " .. i)] = 
      {
        PrettyName = "Channel "..tostring((i*2)-1).."~V-Bridge",
        Position = { 90 + (32*(i-1)) + shift2, 290 },
        Size = { 16 , 16 },
        Color = { 255, 0, 0 },
        StrokeColor = { 188, 0, 0 },
        Margin = 3,
        Radius = 0,
        Style = "Led",
        UnlinkOffColor = false,
        --OffColor = {  },
        IsReadOnly = false,
      }

      layout[tostring("I-Share " .. i)] = 
      {
        PrettyName = "Channel "..tostring((i*2)-1).."~I-Share",
        Position = { 90 + (32*(i-1)) + shift2, 306 },
        Size = { 16 , 16 },
        Color = { 255, 0, 0 },
        StrokeColor = { 188, 0, 0 },
        Margin = 3,
        Radius = 0,
        Style = "Led",
        UnlinkOffColor = false,
        --OffColor = {  },
        IsReadOnly = false,
      }

      if channelcount == 4 then
        layout[tostring("Quad Mode")] = 
          {
            PrettyName = "Channel "..tostring(1).."~Quad Mode",
            Position = { 144, 258 },
            Size = { 16 , 16 },
            Color = { 255, 0, 0 },
            StrokeColor = { 188, 0, 0 },
            Margin = 3,
            Radius = 0,
            Style = "Led",
            UnlinkOffColor = false,
            --OffColor = {  },
            IsReadOnly = false,
          }

      elseif channelcount == 8 then
        for i=1, channelcount/4 do

        layout[tostring("Quad Mode " .. i)] = 
        {
          PrettyName = "Channel "..tostring((i*4)-3).."~Quad Mode",
          Position = { 106 + (64*(i-1)), 258 },
          Size = { 16 , 16 },
          Color = { 255, 0, 0 },
          StrokeColor = { 188, 0, 0 },
          Margin = 3,
          Radius = 0,
          Style = "Led",
          UnlinkOffColor = false,
          --OffColor = {  },
          IsReadOnly = false,
        }

        end
      end


    end

  
  
  
  end --end Basic/Advanced mode
--[[
  for i=1, 2 do
  layout[tostring("Quad Mode " .. i)] = 
  {
    PrettyName = "",
    Position = {  },
    Size = {  },
    Color = {  },
    Margin = 0,
    Radius = 0,
    Style = "Led",
    UnlinkOffColor = false,
    --OffColor = {  },
    IsReadOnly = false,
  }
  end

  for i=1, 4 do
  layout[tostring("Mono " .. i)] = 
  {
    PrettyName = "",
    Position = {  },
    Size = {  },
    Color = {  },
    Margin = 0,
    Radius = 0,
    Style = "Led",
    UnlinkOffColor = false,
    --OffColor = {  },
    IsReadOnly = false,
  }
  end

  for i=1, 4 do
  layout[tostring("V-Bridge " .. i)] = 
  {
    PrettyName = "",
    Position = {  },
    Size = {  },
    Color = {  },
    Margin = 0,
    Radius = 0,
    Style = "Led",
    UnlinkOffColor = false,
    --OffColor = {  },
    IsReadOnly = false,
  }
  end

  for i=1, 4 do
  layout[tostring("I-Share " .. i)] = 
  {
    PrettyName = "",
    Position = {  },
    Size = {  },
    Color = {  },
    Margin = 0,
    Radius = 0,
    Style = "Led",
    UnlinkOffColor = false,
    --OffColor = {  },
    IsReadOnly = false,
  }
  end

  for i=1, 9 do
  layout[tostring("Fault " .. i)] = 
  {
    PrettyName = "",
    Position = {  },
    Size = {  },
    Color = {  },
    Margin = 0,
    Radius = 0,
    Style = "Led",
    UnlinkOffColor = false,
    --OffColor = {  },
    IsReadOnly = false,
  }
  end


  ]]
  graphics = {
    { --Bose Logo
      Type = "Image",
      Image = "",
      Position = { 37, 10 },
      Size = { 196, 25 }
    },
    {
      Type = "Label",
      Position = { 37, 45 },
      Size = { 120, 16},
      Text = "Name",
      TextSize = 11,
      HTextAlign = "Center",
      VTextAlign = "Center",
      IsBold = false,
      Color = { 0, 0, 0 },
      --StrokeColor = { r, g, b },
      --Fill = { r, g, b },
      StrokeWidth = 0,
      CornerRadius = 0,
    },
    {
      Type = "Label",
      Position = { 157, 45 },
      Size = { 76, 16 },
      Text = "IP Address",
      TextSize = 11,
      HTextAlign = "Center",
      VTextAlign = "Center",
      IsBold = false,
      Color = { 0, 0, 0 },
      --StrokeColor = { r, g, b },
      --Fill = { r, g, b },
      StrokeWidth = 0,
      CornerRadius = 0,
    },
    {
      Type = "Label",
      Position = { 37, 77 },
      Size = { 196, 16 },
      Text = "Status",
      TextSize = 11,
      HTextAlign = "Center",
      VTextAlign = "Center",
      IsBold = false,
      Color = { 0, 0, 0 },
      --StrokeColor = { r, g, b },
      --Fill = { r, g, b },
      StrokeWidth = 0,
      CornerRadius = 0,
    },
  }


  if props["Mode"].Value == "Advanced" then
    local width1
    if channelcount == 4 then width1 = 251
    elseif channelcount == 8 then width1 = 482 end

    table.insert(graphics, {
      Type = "GroupBox",
      Position = { 10, 94 + bump },
      Size = { width1, 187 },
      Text = "Inputs",
      TextSize = 12,
      HTextAlign = "Left",
      IsBold = false,
      TextColor = { 0, 0, 0 },
      StrokeColor = { 0, 0, 0 },
      --Fill = { r, g, b },
      StrokeWidth = 1,
      CornerRadius = 8,
    })
    
    table.insert(graphics, {
      Type = "GroupBox",
      Position = { 10, 309 + bump },
      Size = { width1, 310 },
      Text = "Outputs",
      TextSize = 12,
      HTextAlign = "Left",
      IsBold = false,
      TextColor = { 0, 0, 0 },
      StrokeColor = { 0, 0, 0 },
      --Fill = { r, g, b },
      StrokeWidth = 1,
      CornerRadius = 8,
    })



    for i=1, channelcount do
      table.insert(graphics, {
        Type = "GroupBox",
        Position = { 20 + (58*(i-1)), 118 + bump },
        Size = { 58, 153 },
        Text = LETTERS[i],
        TextSize = 12,
        HTextAlign = "Left",
        IsBold = false,
        TextColor = { 0, 0, 0 },
        StrokeColor = { 0, 0, 0 },
        --Fill = { r, g, b },
        StrokeWidth = 1,
        CornerRadius = 8,
      })

      table.insert(graphics, {
        Type = "GroupBox",
        Position = { 20 + (58*(i-1)), 426 + bump },
        Size = { 58, 183 },
        Text = tostring(i),
        TextSize = 12,
        HTextAlign = "Left",
        IsBold = false,
        TextColor = { 0, 0, 0 },
        StrokeColor = { 0, 0, 0 },
        --Fill = { r, g, b },
        StrokeWidth = 1,
        CornerRadius = 8,
      })

      table.insert(graphics, {
        Type = "Label",
        Position = { 29 + (58*(i-1)), 447 + bump },
        Size = { 25, 16 },
        Text = "Fault",
        TextSize = 10,
        HTextAlign = "Right",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

    end

    for i=1, channelcount/2 do
      table.insert(graphics, {
        Type = "GroupBox",
        Position = { 20 + (116*(i-1)), 379 + bump },
        Size = { 116, 230 },
        Text = "",
        TextSize = 12,
        HTextAlign = "Left",
        IsBold = false,
        TextColor = { 0, 0, 0 },
        StrokeColor = { 0, 0, 0 },
        --Fill = { r, g, b },
        StrokeWidth = 1,
        CornerRadius = 8,
      })

      table.insert(graphics, {
        Type = "Label",
        Position = { 19 + (116*(i-1)), 385 + bump },
        Size = { 40, 16 },
        Text = "Mono",
        TextSize = 10,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

      table.insert(graphics, {
        Type = "Label",
        Position = { 56 + (116*(i-1)), 385 + bump },
        Size = { 40, 16 },
        Text = "V-Bridge",
        TextSize = 10,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

      table.insert(graphics, {
        Type = "Label",
        Position = { 94 + (116*(i-1)), 385 + bump },
        Size = { 40, 16 },
        Text = "I-Share",
        TextSize = 10,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

    end

    for i=1, channelcount/4 do
      table.insert(graphics, {
        Type = "Header",
        Position = { 23 + (231*(i-1)), 346 + bump },
        Size = { 225, 16 },
        Text = "Quad",
        TextSize = 10,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })
    end

    table.insert(graphics, {
      Type = "Label",
      Position = { 65 + shift1, 320 + bump },
      Size = { 62, 16 },
      Text = "Clear Faults",
      TextSize = 12,
      HTextAlign = "Center",
      VTextAlign = "Center",
      IsBold = false,
      --Color = { , 0, 0 },
      --StrokeColor = { r, g, b },
      --Fill = { r, g, b },
      StrokeWidth = 0,
      CornerRadius = 0,
    })


    if channelcount == 4 then
      table.insert(graphics, {
        Type = "Label",
        Position = { 148, 97 + 35 },
        Size = { 48, 16 },
        Text = "Standby",
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

      table.insert(graphics, {
        Type = "Label",
        Position = { 148, 113 + 35 },
        Size = { 48, 16 },
        Text = "Power",
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

      elseif channelcount == 8 then
      table.insert(graphics, {
        Type = "Label",
        Position = { 384, 26 + 35 },
        Size = { 48, 16 },
        Text = "Standby",
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

      table.insert(graphics, {
        Type = "Label",
        Position = { 384, 42 + 35 },
        Size = { 48, 16 },
        Text = "Power",
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

    end

  elseif props["Mode"].Value == "Basic" then

    for i=1, channelcount do
      table.insert(graphics, {
        Type = "Label",
        Position = { 82 + (16*(i-1)) + shift2, 127 },
        Size = { 16, 16 },
        Text = LETTERS[i],
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

      table.insert(graphics, {
        Type = "Label",
        Position = { 82 + (16*(i-1)) + shift2, 190 },
        Size = { 16, 16 },
        Text = tostring(i),
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

    end

    table.insert(graphics, {
      Type = "Label",
      Position = { 28 + shift2, 143 },
      Size = { 54, 16 },
      Text = "Signal/Clip",
      TextSize = 10,
      HTextAlign = "Right",
      VTextAlign = "Center",
      IsBold = false,
      --Color = { , 0, 0 },
      --StrokeColor = { r, g, b },
      --Fill = { r, g, b },
      StrokeWidth = 0,
      CornerRadius = 0,
    })

    table.insert(graphics, {
      Type = "Label",
      Position = { 42 + shift2, 206 },
      Size = { 40, 16 },
      Text = "Fault",
      TextSize = 10,
      HTextAlign = "Right",
      VTextAlign = "Center",
      IsBold = false,
      --Color = { , 0, 0 },
      --StrokeColor = { r, g, b },
      --Fill = { r, g, b },
      StrokeWidth = 0,
      CornerRadius = 0,
    })

    table.insert(graphics, {
      Type = "Label",
      Position = { 42 + shift2, 222 },
      Size = { 40, 16 },
      Text = "Signal",
      TextSize = 10,
      HTextAlign = "Right",
      VTextAlign = "Center",
      IsBold = false,
      --Color = { , 0, 0 },
      --StrokeColor = { r, g, b },
      --Fill = { r, g, b },
      StrokeWidth = 0,
      CornerRadius = 0,
    })

    table.insert(graphics, {
      Type = "Label",
      Position = { 42 + shift2, 274 },
      Size = { 40, 16 },
      Text = "Mono",
      TextSize = 10,
      HTextAlign = "Right",
      VTextAlign = "Center",
      IsBold = false,
      --Color = { , 0, 0 },
      --StrokeColor = { r, g, b },
      --Fill = { r, g, b },
      StrokeWidth = 0,
      CornerRadius = 0,
    })

    table.insert(graphics, {
      Type = "Label",
      Position = { 42 + shift2, 290 },
      Size = { 40, 16 },
      Text = "V-Bridge",
      TextSize = 10,
      HTextAlign = "Right",
      VTextAlign = "Center",
      IsBold = false,
      --Color = { , 0, 0 },
      --StrokeColor = { r, g, b },
      --Fill = { r, g, b },
      StrokeWidth = 0,
      CornerRadius = 0,
    })

    table.insert(graphics, {
      Type = "Label",
      Position = { 42 + shift2, 306 },
      Size = { 40, 16 },
      Text = "I-Share",
      TextSize = 10,
      HTextAlign = "Right",
      VTextAlign = "Center",
      IsBold = false,
      --Color = { , 0, 0 },
      --StrokeColor = { r, g, b },
      --Fill = { r, g, b },
      StrokeWidth = 0,
      CornerRadius = 0,
    })

    if channelcount == 4 then

      table.insert(graphics, {
        Type = "GroupBox",
        Position = { 37, 117 },
        Size = { 196, 52 },
        Text = "Input",
        TextSize = 12,
        HTextAlign = "Left",
        IsBold = false,
        TextColor = { 0, 0, 0 },
        StrokeColor = { 0, 0, 0 },
        --Fill = { r, g, b },
        StrokeWidth = 1,
        CornerRadius = 8,
      })

      table.insert(graphics, {
        Type = "GroupBox",
        Position = { 37, 179 },
        Size = { 196, 154 },
        Text = "Output",
        TextSize = 12,
        HTextAlign = "Left",
        IsBold = false,
        TextColor = { 0, 0, 0 },
        StrokeColor = { 0, 0, 0 },
        --Fill = { r, g, b },
        StrokeWidth = 1,
        CornerRadius = 8,
      })

      table.insert(graphics, {
        Type = "Header",
        Position = { 122, 244 },
        Size = { 60, 16 },
        Text = "Quad",
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

    elseif channelcount == 8 then

      table.insert(graphics, {
        Type = "GroupBox",
        Position = { 10, 117 },
        Size = { 241, 52 },
        Text = "Input",
        TextSize = 12,
        HTextAlign = "Left",
        IsBold = false,
        TextColor = { 0, 0, 0 },
        StrokeColor = { 0, 0, 0 },
        --Fill = { r, g, b },
        StrokeWidth = 1,
        CornerRadius = 8,
      })

      table.insert(graphics, {
        Type = "GroupBox",
        Position = { 10, 179 },
        Size = { 241, 154 },
        Text = "Output",
        TextSize = 12,
        HTextAlign = "Left",
        IsBold = false,
        TextColor = { 0, 0, 0 },
        StrokeColor = { 0, 0, 0 },
        --Fill = { r, g, b },
        StrokeWidth = 1,
        CornerRadius = 8,
      })

      table.insert(graphics, {
        Type = "Header",
        Position = { 84, 244 },
        Size = { 60, 16 },
        Text = "Quad",
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

      table.insert(graphics, {
        Type = "Header",
        Position = { 148, 244 },
        Size = { 60, 16 },
        Text = "Quad",
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
        IsBold = false,
        --Color = { , 0, 0 },
        --StrokeColor = { r, g, b },
        --Fill = { r, g, b },
        StrokeWidth = 0,
        CornerRadius = 0,
      })

    end

  
  end -- End Basic/Advanced mode
  --table.insert(graphics, {})
  
  return layout, graphics
end

function GetPins( props )
  local pins = {}
  
  return pins
end

function GetComponents( props )
  return
  {
    
  }
end

function GetWiring( props )
  local wiring = {}
  
  return wiring
end

if Controls then
----------------------------------------------------------------------------------------------------
if Properties["Model"].Value == "PM8500N" and Properties["Mode"].Value == "Advanced" then
  --print("8 Advanced")
-----------------------------------------
--   Bose PM8500 4.3 Advanced - Version 1.0
--   Copyright 2015 by Kurta Technology Solutions, LLC.
--   Author: Joe Kurta  - Joe@KurtaTech.com
-----------------------------------------

--[[  Help file

 This goal of this script is to query and control an Amplifier with advanced functionality.
 Code was tested on a QSC Core 500i with (5) PM8500N on an isolated network.
  
 Expanding or removing controls is not recommended or supported
 
--]]


--[[  Release notes
  1.0   Release version
        Fixed issue with reconnect not changing mode settings
        Added mode polling for changes via front panel
        Added control pins for fault indicators
        Changed fault indicators to include any channel state change (warnings, etc).
        Changed Power Toggle to on/off toggle rather than trigger
  0.8   Fixed bug with fault clear button not working as expected
  0.7   Deleted input status indicators, changed input LEDs into meters
        Merged Output limit and fault into single indicator
        Added Fault Clear button
  0.6   Continue channel configuration and enable/disable controls
  0.5   Began adding channel configuration check and parsing
        Fixed issues with input/output metering
  0.4   Reworked mute button polling and parsing
        Improved input and output meter parsing
  0.3   General test and debug
  0.1   Restructured and added controls
  0.0   Initial rough draft
]]--




---------------------------------------------------------
--   vvvv   'Constant' (variable) Definitions   vvvv   --


  -- Serial port settings
  ETHERNET = {
    socket    = TcpSocket.New(),
    ip        = Controls["IP Address"],
    port      = 10055
  }
  
  -- External Variables
  MYNAME = Controls["Name"].String .. ": " -- Used for logging to Q-Sys log
  MaxChannels = 8                         -- 8 Channel amplifier
  
  -- Message Syntax
  EOM                 = "\r"  -- End of MessageGL
  
  -- Timer settings for Production
  WATCHDOGTHRESHOLD   = 25           -- How many polls to wait for a response before noting an error
  POLLWATCHDOG        = 5            -- Check this often if the timtout has been exceeded
  POLLTIMEBUTTONS     = .5           -- Polls while cycling through buttons table at this interval
  POLLTIMEMETERS      = .12          -- Polling for meters, etc.
  POLLTIMESETTINGS    = 10           -- Polls while cycling through settings table at this interval
  
  --[[
  --  Timer Settings for Debug
  WATCHDOGTHRESHOLD   = 25           -- How many polls to wait for a response before noting an error
  POLLWATCHDOG        = 1            -- Check this often if the timtout has been exceeded
  POLLTIMEBUTTONS     = 5           -- Polls while cycling through buttons table at this interval
  POLLTIMEMETERS      = 125         -- Polling for meters, etc.
  POLLTIMESETTINGS    = 2            -- Polls while cycling through settings table at this interval
  ]]--
  
  -- Debugging Enable/Disable
  DEBUGENABLE         = 0             -- Enable General Debugging
  DEBUGLOG            = 0             -- Enable debug messages to be written to log on core



--[[
 The polling of the amplifier button states is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of setting and meter polling.
]]--

  AMPBUTTONS = {
    {index = 6,  name = 'Power',  subindex = 1, parameter = '',     state = 99, enabled = 0},
    {index = 47, name = 'Mute',   subindex = 1, parameter = '2,1',  state = 99, enabled = 0},  
    {index = 48, name = 'Mute',   subindex = 2, parameter = '2,2',  state = 99, enabled = 0},
    {index = 49, name = 'Mute',   subindex = 3, parameter = '2,3',  state = 99, enabled = 0},
    {index = 50, name = 'Mute',   subindex = 4, parameter = '2,4',  state = 99, enabled = 0},
    {index = 51, name = 'Mute',   subindex = 5, parameter = '4,1',  state = 99, enabled = 0},
    {index = 52, name = 'Mute',   subindex = 6, parameter = '4,2',  state = 99, enabled = 0},
    {index = 53, name = 'Mute',   subindex = 7, parameter = '4,3',  state = 99, enabled = 0},
    {index = 54, name = 'Mute',   subindex = 8, parameter = '4,4',  state = 99, enabled = 0}
  }



--[[
 The polling of the amplifier settings is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of button and meter polling.
]]--

  -- TODO: Update the settings table (and this description)
  AMPSETTINGS = {
    --"xx", "xx", "xx", "xx", "xx", "xx", "xx", "xx"
  }
  
  
  
  --[[
 The polling of the amplifier meters is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of button and setting polling.
]]--

  -- TODO: Update the meter polling
  AMPMETERS = {
    {index = 7,  name = 'Level',  subindex = 1, parameter = '1',    state = 99},  --inputs
    {index = 38, name = 'Level',  subindex = 1, parameter = '2',    state = 99}   --outputs
  }
  

  
--   ^^^^   'Constant' (variable) Definitions   ^^^^   --
---------------------------------------------------------



---------------------------------------------------------
--   vvvv      Global Variable Definitions      vvvv   --


  waitForResponse     = 0
  lastPolledButton    = 0
  lastPolledSetting   = 0
  lastPolledMeter     = 0


--   ^^^^      Global Variable Definitions      ^^^^   --
---------------------------------------------------------



---------------------------------------------------
--   vvvv   Function/Method Definitions   vvvv   --


  
  function Debug (incoming)
  -- Send a string out to Debug (date/time stamp)
    if (DEBUGENABLE == 1) then
      print( os.date() .. " - " .. incoming)
      
      if (DEBUGLOG == 1) then
        Log.Message(incoming)
      end
    end
  end



  -- Load initial values and reset the serial port
  function Status(state)
  
    --Debug('Entered Status')
    
    --  0 = OK – Green,           1 = Compromised – Orange,     2 = Fault – Red,
    --  3 = Not Present – Gray,   4 = Missing – Red,            5 = Initializing – Blue
    
    -- Update status indicator
    if      state == 'OK'           then Controls["Status"].Value = 0
      elseif  state == 'Compromised'  then Controls["Status"].Value = 1
      elseif  state == 'Fault'        then Controls["Status"].Value = 2
      elseif  state == 'Not Present'  then Controls["Status"].Value = 3
      elseif  state == 'Missing'      then Controls["Status"].Value = 4
      elseif  state == 'Initializing' then Controls["Status"].Value = 5
      else Log.Error(MYNAME .. '(Status) State not recognized')
    end
  
  end
  
  
  
  -- Load initial values and reset the serial port
  function Watchdog()
    
    -- If no responese reset port
    --Debug("WaitForResponse: " .. waitForResponse)
    if (waitForResponse >= WATCHDOGTHRESHOLD) then
      
      waitForResponse = 0     -- Stop re-trigger
      Status('Initializing')  -- Update status indicator
      
      -- Instantiate the device communications
      Debug('(Watchdog) Resetting port')
      Log.Error(MYNAME .. '(Watchdog) Resetting port')
      DeviceConnect()
    end
  
  end



  -- Poll Buttons from Device
  -- Necessary to allow user feedback to update (slow)
  function PollButtons()
    
    -- Loop through defined parameters
    lastPolledButton = lastPolledButton + 1
    if (lastPolledButton > #AMPBUTTONS) then lastPolledButton = 1 end
    
    -- Form the proper query
    if (AMPBUTTONS[lastPolledButton].name == 'Mute') then
      --Debug("TX: GM " .. AMPBUTTONS[lastPolledButton].parameter)
      DeviceTx("GM " .. AMPBUTTONS[lastPolledButton].parameter)
    elseif (AMPBUTTONS[lastPolledButton].name == 'Power') then
      --Debug("TX: GY")
      DeviceTx("GY")
    end
  end



  -- Poll meter state from Device
  function PollMeters()
     
    -- Loop through defined parameters
    lastPolledMeter = lastPolledMeter + 1
    if (lastPolledMeter > #AMPMETERS) then lastPolledMeter = 1 end

    -- Send the query
    DeviceTx("GL " .. AMPMETERS[lastPolledMeter].parameter)
  end



  -- Validate IP address and flag to start connection
  function ValidIp(ip)
    
    local ipChunks = {ip:match("(%d+)%.(%d+)%.(%d+)%.(%d+)")}
    if (#ipChunks == 4) then
      for _,v in pairs(ipChunks) do
        if (tonumber(v) < 0 or tonumber(v) > 255) then
          return 0
        end
      end
     
      return 1
    else
      return 0
    end
  end



  -- transmit a message to the device
  function DeviceTx(incoming)
  
    --Debug("TX: "..incoming)
    error = ETHERNET.socket:Write(incoming .. EOM)
   
    if error then
      Debug('ERROR (DeviceTx): ' .. error)
      Log.Error(MYNAME .. '(DeviceTx Error): ' .. error)      
      DeviceDisconnect()
    else
      waitForResponse = waitForResponse + 1         -- Count toward watchdog
    end
  end
  
  
  
  -- Change the color of an LED indicator
  function LedColor (value)
    local myColor
    
    if value <= -60 then
      myColor = 'LightGray'     -- No signal
    elseif value < -20 then
      myColor = 'Green'         -- Normal
    elseif value < -6 then
      myColor = 'Yellow'        -- Medium
    elseif value < -2 then
      myColor = 'Orange'        -- High
    else
      myColor = 'Red'           -- Clipping?
    end
    
    return myColor
  end
  
  
  
  -- Change enabled state of buttons
  function EnableChannel (myChannel, myState)
  
    -- Find the button properties in question
    for i = 1, #AMPBUTTONS do
      -- Found a match
      if (AMPBUTTONS[i].name == 'Mute') and (AMPBUTTONS[i].subindex == myChannel) then
        AMPBUTTONS[i].enabled = myState
        
        if myState == 1 then
          Controls['Input Signal'][myChannel].IsDisabled  = false
         
          Controls['Fault'][myChannel].IsDisabled         = false
          Controls['Output Meter'][myChannel].IsDisabled  = false
          Controls['Output Mute'][myChannel].IsDisabled   = false
        else
          Controls['Input Signal'][myChannel].IsDisabled  = true

          Controls['Fault'][myChannel].IsDisabled         = true
          Controls['Output Meter'][myChannel].IsDisabled  = true
          Controls['Output Mute'][myChannel].IsDisabled   = true
          
          --Clear fault indicators
          Controls['Fault'][myChannel].Boolean            = false
        end
      end
    end
  end



  function DisableControls (state)

    if state == 1 then
      myDisabled  = true
      myColor     = 'LightGray'
      myBoolean   = false
      
      -- Clear amp setting table
      AMPSETTINGS = {  }
      
    else
      myDisabled  = false
      myColor     = 'Green'
      myBoolean   = false
    end
    
    -- Initialize controls (disable until connection)
    Controls['Toggle Standby'].Boolean      = myBoolean
    Controls['Toggle Standby'].IsDisabled   = myDisabled
    Controls['Standby'].Boolean             = myBoolean
    Controls['Standby'].IsDisabled          = myDisabled
    --Controls['Power'].Boolean               = myBoolean
    Controls['Power'].IsDisabled            = myDisabled
    
    for i = 1, MaxChannels do
      EnableChannel(i, 0)

      if (i % 2) == 0 then
        Controls['Mono'][i/2].Boolean           = myBoolean
        Controls['Mono'][i/2].IsDisabled        = myDisabled
        Controls['Mono'][i/2].Color             = myColor
        
        Controls['V-Bridge'][i/2].Boolean       = myBoolean
        Controls['V-Bridge'][i/2].IsDisabled    = myDisabled
        Controls['V-Bridge'][i/2].Color         = myColor
        
        Controls['I-Share'][i/2].Boolean        = myBoolean
        Controls['I-Share'][i/2].IsDisabled     = myDisabled
        Controls['I-Share'][i/2].Color          = myColor
      
      end

      if (i % 4) == 0 then
        Controls['Quad Mode'][i/4].Boolean      = myBoolean 
        Controls['Quad Mode'][i/4].IsDisabled   = myDisabled  
        Controls['Quad Mode'][i/4].Color        = myColor
      end
    end
  
  end
  
  

  -- Clear all fault indicators
  function ClearFaults()
    
    Debug("Clearing all fault indicators")
    for i, myControl in ipairs( Controls['Fault']) do
      myControl.Boolean = false
    end
  end
  
  
  
--   ^^^^   Function/Method Definitions   ^^^^   --
---------------------------------------------------






------------------------------------------------------
--   vvvv   Classes/Object-ish Definitions   vvvv   --



 --v   Serial Object/Handlers   v--

-- Sockeet Event Handler (state changes, data, errors, etc)
  ETHERNET.socket.EventHandler = function(mySocket, myEvent, myError)
    
    if myEvent == TcpSocket.Events.Connected then
      
      Debug ('Socket Connected: ' .. ETHERNET.ip.String)
      
      -- Send initial setup parameters to amplifier (channel fault setup)
      Log.Error(MYNAME .. '(Socket) Init connection has cleared all faults')
      DeviceTx('CF')        -- Clear Alarm/Faults
      DeviceTx('SR O')      -- Set Alarm Reporting On
      DeviceTx('SF O')      -- Set Fault Reporting On
      DeviceTx('GC')        -- Grab Channel Configuration
      
      -- Preset watch dog (a few of the above sends don't respond anything)
      waitForResponse = waitForResponse - 2
      
      -- Turn on Polling
      TimerPollSettings:Start(POLLTIMESETTINGS)
      TimerPollButtons:Start(POLLTIMEBUTTONS)
      TimerPollMeters:Start(POLLTIMEMETERS)
      
      -- Enable Controls
      Status('OK')           -- Update status indicator
      DisableControls(0)
      
    elseif myEvent == TcpSocket.Events.Reconnect then
      Debug ('Socket Reconnecting ' )
      Status('Initializing') -- Update status indicator
      DisableControls(1)
      
    elseif myEvent == TcpSocket.Events.Data then
      
      -- ControlSpace protocol dictates each command terminated with 0x0D (CR)
      local incoming = mySocket:ReadLine( TcpSocket.EOL.Any )
      
      --Test responses
      if string.match(incoming, string.char(06)) then     --Ack (to CF command)
        waitForResponse = waitForResponse - 1   -- ACK the Message
        Status('OK')          -- Update status indicator
        ClearFaults()
        
      elseif (#incoming > 2) then                         -- All other response
        waitForResponse = waitForResponse - 1   -- ACK the Message
        Status('OK')          -- Update status indicator

        --Debug('RX: ' .. incoming)
        ParseRx(incoming)
      end 
      
    elseif myEvent == TcpSocket.Events.Closed then
      Debug ('Socket Closed by remote')
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    elseif myEvent == TcpSocket.Events.Error then
      
      Debug ('ERROR (SocketRx): Closed due to error: '.. myEvent)
      Log.Error(MYNAME .. '(SocketRx): ' .. myError)
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      ETHERNET.socket:Disconnect()
      
      waitForResponse = WATCHDOGTHRESHOLD   -- Force Watchdog Reset
      Status('Compromised')                 -- Update status indicator

    elseif myEvent == TcpSocket.Events.Timeout then
      Debug ('Socket Closed due to timeout')
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    else
      Debug ('Unknown Socket Event: '.. myEvent)
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    end
  end



  -- Instantiate the port and start listening
  function DeviceConnect()
    
    -- Stop Polling (start again in socket connect)
    TimerPollButtons:Stop()
    TimerPollSettings:Stop()
    TimerPollMeters:Stop()
    DisableControls(1)
    
    Debug ('Closing Socket - Change of IP?')      
    ETHERNET.socket:Disconnect()
 
    -- Check for Valid IP
    if (1 == ValidIp(ETHERNET.ip.String)) then
      
      Debug ('Socket Connecting: ' .. ETHERNET.ip.String)
      Log.Error(MYNAME .. '(Socket) Connecting: ' .. ETHERNET.ip.String)
      
      -- Start the connection
      ETHERNET.socket:Connect(ETHERNET.ip.String, ETHERNET.port)
       
    else
      
      Debug ('Socket Closed - Invalid IP')
      Log.Error(MYNAME .. '(Socket) Closed - Invalid IP')
    end

  end



  -- Closes the port and stops listening
  function DeviceDisconnect()
    Socket:Disconnect()
    
    Debug ('Socket Disconnect command sent')
    Log.Error(MYNAME .. '(Socket) Disconnect command sent')
  end

  
  
  -- Parse responses from the socket handler
  function ParseRx(incoming)
  
    --trim white space from start of message
    while (incoming:sub(1,1) == "") do
      incoming = incoming:sub(2)
    end
    
    -- Response from Meters Query
    if incoming:sub(1, 2) == "GL" then

      --Parse Response: Signal Level "GL 1 [4a,4a,4a,4a,4a,4a,4a,4a]"
      local slot, channel1, channel2, channel3, channel4, channel5, channel6, channel7, channel8 = string.match(incoming,'GL (%d) %[(%x+),(%x+),(%x+),(%x+),(%x+),(%x+),(%x+),(%x+)%]' )

      if slot == '1' then
      
        --Used if indicator is an LED
        --[[
        Controls['Input Signal'][1].Color =  LedColor( (tonumber(channel1, 16) / 2) - 60)
        Controls['Input Signal'][2].Color =  LedColor( (tonumber(channel2, 16) / 2) - 60)
        Controls['Input Signal'][3].Color =  LedColor( (tonumber(channel3, 16) / 2) - 60)
        Controls['Input Signal'][4].Color =  LedColor( (tonumber(channel4, 16) / 2) - 60)
        Controls['Input Signal'][5].Color =  LedColor( (tonumber(channel5, 16) / 2) - 60)
        Controls['Input Signal'][6].Color =  LedColor( (tonumber(channel6, 16) / 2) - 60)
        Controls['Input Signal'][7].Color =  LedColor( (tonumber(channel7, 16) / 2) - 60)
        Controls['Input Signal'][8].Color =  LedColor( (tonumber(channel8, 16) / 2) - 60)
        ]]--
        
        --Used if indicator is a meter
        Controls['Input Signal'][1].Value = (tonumber(channel1, 16) / 2) - 60 
        Controls['Input Signal'][2].Value = (tonumber(channel2, 16) / 2) - 60 
        Controls['Input Signal'][3].Value = (tonumber(channel3, 16) / 2) - 60 
        Controls['Input Signal'][4].Value = (tonumber(channel4, 16) / 2) - 60
        Controls['Input Signal'][5].Value = (tonumber(channel5, 16) / 2) - 60 
        Controls['Input Signal'][6].Value = (tonumber(channel6, 16) / 2) - 60 
        Controls['Input Signal'][7].Value = (tonumber(channel7, 16) / 2) - 60 
        Controls['Input Signal'][8].Value = (tonumber(channel8, 16) / 2) - 60 
        
      elseif slot == '2' then
        
        --Used if indicator is an LED
        --[[
        Controls['Output Meter'][1].Color =  LedColor( (tonumber(channel1, 16) / 2) - 60)
        Controls['Output Meter'][2].Color =  LedColor( (tonumber(channel2, 16) / 2) - 60)
        Controls['Output Meter'][3].Color =  LedColor( (tonumber(channel3, 16) / 2) - 60)
        Controls['Output Meter'][4].Color =  LedColor( (tonumber(channel4, 16) / 2) - 60)
        Controls['Output Meter'][5].Color =  LedColor( (tonumber(channel5, 16) / 2) - 60)
        Controls['Output Meter'][6].Color =  LedColor( (tonumber(channel6, 16) / 2) - 60)
        Controls['Output Meter'][7].Color =  LedColor( (tonumber(channel7, 16) / 2) - 60)
        Controls['Output Meter'][8].Color =  LedColor( (tonumber(channel8, 16) / 2) - 60)
        ]]--
        
        --Used if indicator is a meter
        Controls['Output Meter'][1].Value = (tonumber(channel1, 16) / 2) - 60
        Controls['Output Meter'][2].Value = (tonumber(channel2, 16) / 2) - 60
        Controls['Output Meter'][3].Value = (tonumber(channel3, 16) / 2) - 60
        Controls['Output Meter'][4].Value = (tonumber(channel4, 16) / 2) - 60
        Controls['Output Meter'][5].Value = (tonumber(channel5, 16) / 2) - 60
        Controls['Output Meter'][6].Value = (tonumber(channel6, 16) / 2) - 60
        Controls['Output Meter'][7].Value = (tonumber(channel7, 16) / 2) - 60
        Controls['Output Meter'][8].Value = (tonumber(channel8, 16) / 2) - 60
      end
      
      
    -- Response from Power Query
    --if string.find(incoming, "GY") then  --(Drop the find for lighter method)
    elseif incoming:sub(1, 2) == "GY" then
      --Debug("RX Power: " ..incoming)

      -- Parse Response: Power Status "GY N"
      local state = string.match(incoming,"GY (%a)")
      
      -- Update controls
      --if (state == 'N') and (Controls['Power'].Boolean == false) then   -- Power on
      if (state == 'N') then
        AMPBUTTONS[1].state = 1
        
        -- Update Indicators
        Controls['Standby'].Boolean = false
        Controls['Power'].Boolean   = true
        
        -- Update Button
        if (Controls['Toggle Standby'].Boolean == false) then
          Controls['Toggle Standby'].Boolean = true
        end
        
        --Debug('Power Status: On') 
        
      elseif (state == 'S') then
        AMPBUTTONS[1].state = 0
        
        -- Update Indicators
        Controls['Standby'].Boolean = true
        Controls['Power'].Boolean = false
      
        -- Update Button
        if (Controls['Toggle Standby'].Boolean == true) then
          Controls['Toggle Standby'].Boolean = false
        end
        
        --Debug('Power Status: Standby')
      end

    
    -- Response from Fault (unsolicited)
    elseif incoming:sub(1, 2) == "GF" then   
      local state = string.match(incoming,"GF (%a)")
      
      if (state == 'F') and (Controls['Fault'][9].Boolean == false) then
        Controls['Fault'][9].Boolean = true
        Log.Error(MYNAME .. '(Fault Status) In Fault (New)')
        Debug('Fault Status: In Fault!')
        
      elseif (state == 'F') and (Controls['Fault'][9].Boolean == true) then
        Log.Error(MYNAME .. '(Fault Status) In Fault (Repeat)')
        Debug('Fault Status: In Fault! (repeat)')
      
      elseif (state == 'C') and (Controls['Fault'][9].Boolean == true) then
        Controls['Fault'][9].Boolean = false
        Log.Error(MYNAME .. '(Fault Status) Cleared')
        Debug('Fault Status: Cleared')

      elseif (state == 'C') and (Controls['Fault'][9].Boolean == false) then
        Debug('Fault Status: Cleared (repeat)')
        
      end
   

    -- Response from Mute Button Query
    elseif incoming:sub(1, 2) == "GM" then

      -- Parse Response: Mute Status "GM 2,1,U"
      local slot, channel, state = string.match(incoming,"GM (%d),(%d),(%a)")
      
      if tonumber(slot) > 2 then
        channel = channel + 4
      end
      
      -- Only update button if it's out of state (amp initiated change)
      if (state == 'U') and (Controls['Output Mute'][tonumber(channel)].Boolean == true) then
        AMPBUTTONS[channel + 1].state = 0                      -- store state
        Controls['Output Mute'][tonumber(channel)].Boolean = false   -- update button
        Debug('Mute Status: '.. channel ..' Status: Unmuted')
            
      elseif (state == 'M') and (Controls['Output Mute'][tonumber(channel)].Boolean == false) then
        AMPBUTTONS[channel + 1].state = 1                      -- store state
        Controls['Output Mute'][tonumber(channel)].Boolean = true    -- update button
        Debug('Mute Status: '.. channel ..' Status: Muted')
      end
    
    
    -- Response from Reporting Status (unsolicited)
    elseif incoming:sub(1, 2) == "GR" then
    
      -- Parse Response: Alarm Reporting/Status "GR c,s,t,x"
      local statusChannel, statusSeverity, statusType, statusCondition = string.match(incoming,'GR (%d+),(%a+),(%a+),(%a+)' )
      
      --Debug (incoming)
      --Debug("statusChannel ".. statusChannel)
      
      --Debug("statusSeverity ".. statusSeverity)
      --Debug("statusType ".. statusType)
      --Debug("statusCondition ".. statusCondition)
      
      -- Form log message
      local myMessage = "(Alarm Reporting) "

      -- Handle severity
      if (statusSeverity == 'W') then
        myMessage = myMessage .. "WARNING "
      elseif (statusSeverity == 'F') then
        myMessage = myMessage .. "FAULT "
      elseif (statusSeverity == 'S') then
        myMessage = myMessage .. "SYSTEM message  "
      end
      
      -- Handle condition
      if (statusCondition == 'S') then
        myMessage = myMessage .. "activated "
        Controls['Fault'][tonumber(statusChannel)].Boolean = true
      elseif (statusCondition == 'C') then
        myMessage = myMessage .. "cleared "
        Controls['Fault'][tonumber(statusChannel)].Boolean = false
      end
      
      myMessage = myMessage .. "on channel " .. statusChannel .. ": "

      -- Handle Type
      if (statusType == 'N') then
        myMessage = myMessage .. "No alarm "
      elseif (statusType == 'O') then
        myMessage = myMessage .. "Open circuit "
      elseif (statusType == 'S') then
        myMessage = myMessage .. "Short circuit "
      elseif (statusType == 'A') then
        myMessage = myMessage .. "AC Loss "
      elseif (statusType == 'D') then
        myMessage = myMessage .. "Digital audio loss "
      elseif (statusType == 'I') then
        myMessage = myMessage .. "I-Share jumper missing "
      elseif (statusType == 'L') then
        myMessage = myMessage .. "Limiting "
      elseif (statusType == 'C') then
        myMessage = myMessage .. "Clip "
      elseif (statusType == 'P') then
        myMessage = myMessage .. "Protection "
      elseif (statusType == 'Z') then
        myMessage = myMessage .. "Something unknown (other) "
      end

     
      -- Write to Log
      Log.Message(MYNAME .. myMessage)
      Debug(MYNAME .. myMessage)
    
    
    -- Response from channel configuration (only on connection)
    elseif incoming:sub(1, 2) == "GC" then
      --Debug("Configuration Raw: ".. incoming)
      OnConfig(incoming)
      
    -- Response of unknown type
    else
      Debug('Unhandled Response: ' .. incoming)
    end

  end
  
  

  -- Mute button handler 
  function OnMute (ctl)
    TimerPollButtons:Stop()

    --find parameter to send
    for i = 1, #AMPBUTTONS do
      if AMPBUTTONS[i].index == ctl.Index then
    
        if (ctl.Boolean == true) and (AMPBUTTONS[i].state ~= 1) then
          --Debug('TX: SM '.. AMPBUTTONS[i].parameter ..',M')
          AMPBUTTONS[i].state = 1
          DeviceTx('SM '.. AMPBUTTONS[i].parameter ..',M')
        elseif (ctl.Boolean == false) and (AMPBUTTONS[i].state ~= 0) then
          --Debug('TX: SM '.. AMPBUTTONS[i].parameter ..',U')
          AMPBUTTONS[i].state = 0
          DeviceTx('SM '.. AMPBUTTONS[i].parameter ..',U')
        end
      end
    end
    
    TimerPollButtons:Start(1)    -- Delay the next poll
  end
  
  
  
  -- Process the channel configurations
  function OnConfig (myConfig)
      
    -- Parse Response: Alarm Reporting/Status "GC IN,IN,BL,BL,Q7,Q7,Q7,Q7"

    -- Extract each number or letter pair (after GC) and build and array of responses
    local myMatch = "%w%w"
     for line, _ in myConfig:gmatch(myMatch) do
        if line ~= "GC" then
          table.insert(AMPSETTINGS, line)
        end
     end

    --[[
    Debug("Parsing original String : " .. myConfig)
    Debug("Entered Config parsing 1: " .. AMPSETTINGS[1])
    Debug("Entered Config parsing 2: " .. AMPSETTINGS[2])
    Debug("Entered Config parsing 3: " .. AMPSETTINGS[3])
    Debug("Entered Config parsing 4: " .. AMPSETTINGS[4])
    Debug("Entered Config parsing 5: " .. AMPSETTINGS[5])
    Debug("Entered Config parsing 6: " .. AMPSETTINGS[6])
    Debug("Entered Config parsing 7: " .. AMPSETTINGS[7])
    Debug("Entered Config parsing 8: " .. AMPSETTINGS[8])
    ]]--
    
    -- Evaluate the first 4 channels
    if ( string.sub(AMPSETTINGS[1], 1, 1) == 'Q') then
      --Debug("Quad 1 config received")
      
      -- Light the Quad LED and update others
      Controls['Quad Mode'][1].Boolean  = true
      EnableChannel (1, 1)
      
      if (string.sub(AMPSETTINGS[1], 2, 2) == 'L') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      elseif (string.sub(AMPSETTINGS[1], 2, 2) == '7') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      elseif (string.sub(AMPSETTINGS[1], 2, 2) == '1') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      end
      
    else
    
      -- Update the first channel pair (1-2)
      if( string.sub(AMPSETTINGS[1], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 1/2")

        -- Light the Bridge LED and update others
        Controls['V-Bridge'][1].Boolean  = true
        EnableChannel (1, 1)
        
      elseif( string.sub(AMPSETTINGS[1], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 1/2")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][1].Boolean  = true
        EnableChannel (1, 1)
        
      elseif (AMPSETTINGS[1]:sub(1,1) == 'I' and AMPSETTINGS[2]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 1/2")
        
        -- Light the Mono LED and update others
        Controls['Mono'][1].Boolean       = true
        EnableChannel (1, 1)
        EnableChannel (2, 1)
      end

      -- Update the second channel pair (3-4)
      if( string.sub(AMPSETTINGS[3], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 3/4")

        -- Light the Bridge LED and update others
        Controls['V-Bridge'][2].Boolean  = true
        EnableChannel (3, 1)
                
      elseif( string.sub(AMPSETTINGS[3], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 3/4")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][2].Boolean  = true
        EnableChannel (3, 1)
        
      elseif (AMPSETTINGS[3]:sub(1,1) == 'I' and AMPSETTINGS[4]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 3/4")
        
        -- Light the Mono LED and update others
        Controls['Mono'][2].Boolean       = true
        EnableChannel (3, 1)
        EnableChannel (4, 1)
      end
    end
  
    -- Evaluate the second 4 channels
    if ( string.sub(AMPSETTINGS[5], 1, 1) == 'Q') then
      --Debug("Quad 2 config received")
      
      -- Light the Quad LED and update others
      Controls['Quad Mode'][2].Boolean  = true
      EnableChannel (5, 1)
      
      if (string.sub(AMPSETTINGS[5], 2, 2) == 'L') then
        Controls['I-Share'][3].Boolean  = true
        Controls['I-Share'][4].Boolean  = true
      elseif (string.sub(AMPSETTINGS[5], 2, 2) == '7') then
        Controls['I-Share'][3].Boolean  = true
        Controls['I-Share'][4].Boolean  = true
      elseif (string.sub(AMPSETTINGS[5], 2, 2) == '1') then
        Controls['I-Share'][3].Boolean  = true
        Controls['I-Share'][4].Boolean  = true
      end
      
    else
    
      -- Update the first channel pair (5-6)
      if( string.sub(AMPSETTINGS[5], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 5/6")

        -- Light the Bridge LED and update others
        Controls['V-Bridge'][3].Boolean  = true
        EnableChannel (5, 1)
                
      elseif( string.sub(AMPSETTINGS[5], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 5/6")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][3].Boolean  = true
        EnableChannel (5, 1)
        
      elseif (AMPSETTINGS[5]:sub(1,1) == 'I' and AMPSETTINGS[6]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 5/6")
        
        -- Light the Mono LED and update others
        Controls['Mono'][3].Boolean       = true
        EnableChannel (5, 1)
        EnableChannel (6, 1)
      end

      -- Update the second channel pair (7-8)
      if( string.sub(AMPSETTINGS[7], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 7/8")
        
        -- Light the Bridge LED and update others
        Controls['V-Bridge'][4].Boolean  = true
        EnableChannel (7, 1)
        
      elseif( string.sub(AMPSETTINGS[7], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 7/8")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][4].Boolean  = true
        EnableChannel (7, 1)
        
      elseif (AMPSETTINGS[7]:sub(1,1) == 'I' and AMPSETTINGS[8]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 7/8")
        
        -- Light the Mono LED and update others
        Controls['Mono'][4].Boolean       = true
        EnableChannel (7, 1)
        EnableChannel (8, 1)
      end
    end
  end



--   ^^^^   Classes/Object-ish Definitions   ^^^^   --
------------------------------------------------------



------------------------------------------------------
--   vvvv   Controls/Button Event Handlers   vvvv   --


  -- Change of IP address
  Controls['IP Address'].EventHandler = function(ctl)
    DeviceConnect()                       -- Handles reconnect based on current port state
    waitForResponse = WATCHDOGTHRESHOLD   -- Force watchdog to reset port
  end



  --Power Button Handler
  Controls['Toggle Standby'].EventHandler = function(ctl)
    --local sendstring = "SY "..tostring(Controls['Power'].Boolean and 'S' or 'N')
    if AMPBUTTONS[1].state == 1 then
      DeviceTx("SY S")
      --Debug("SY S")
    else
      DeviceTx("SY N")
      --Debug("SY N")
    end
  end



  -- Mute Button Handler
  for i = 1, #Controls['Output Mute'] do
    Controls['Output Mute'][i].EventHandler = OnMute
  end
  
  
  --Fault Clear button handler
  Controls['Fault Clear'].EventHandler = function(ctl)
    Log.Error(MYNAME .. 'User has cleared all faults')
    DeviceTx('CF')
  end



--   ^^^^   Controls/Button Event Handlers   ^^^^   --
------------------------------------------------------

 
------------------------------------
--   vvvv   Main Program   vvvv   --

  Status('Initializing')  -- Update status indicator
  
  -- Initialize controls (disable until connection)
  DisableControls(1)
    
  -- Setup Watchdog to poll device and track responses
  TimerWatchdog = Timer.New()
  TimerWatchdog.EventHandler = Watchdog         -- Resets serial and creates Zones (start timer on error)
  TimerWatchdog:Start(POLLWATCHDOG)
  
  -- Setup polling timers.  Start them in the connection event.
  TimerPollButtons = Timer.New()
  TimerPollButtons.EventHandler = PollButtons
  
  TimerPollSettings = Timer.New()
  TimerPollSettings.EventHandler = function () DeviceTx('GC') end

  TimerPollMeters = Timer.New()
  TimerPollMeters.EventHandler = PollMeters

  waitForResponse = WATCHDOGTHRESHOLD         -- Force watchdog
  
  Debug("Script Started...")


--   ^^^^   Main Program   ^^^^   --
------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
elseif Properties["Model"].Value == "PM4500N" and Properties["Mode"].Value == "Advanced" then
  --print("4 Advanced")


---------------------------------------------------------
--   vvvv   'Constant' (variable) Definitions   vvvv   --


  -- Serial port settings
  ETHERNET = {
    socket    = TcpSocket.New(),
    ip        = Controls["IP Address"],
    port      = 10055
  }
  
  -- External Variables
  MYNAME = Controls["Name"].String .. ": " -- Used for logging to Q-Sys log
  MaxChannels = 4                         -- 8 Channel amplifier
  
  -- Message Syntax
  EOM                 = "\r"  -- End of MessageGL
  
  -- Timer settings for Production
  --[[
  WATCHDOGTHRESHOLD   = 25          -- How many polls to wait for a response before noting an error
  POLLWATCHDOG        = 5           -- Check this often if the timtout has been exceeded
  POLLTIMEBUTTONS     = .5          -- Polls while cycling through buttons table at this interval
  POLLTIMEMETERS      = .12         -- Polling for meters, etc.
  POLLTIMESETTINGS    = 10          -- Polls while cycling through settings table at this interval
  ]]--
  --
  --  Timer Settings for Debug
  WATCHDOGTHRESHOLD   = 25          -- How many polls to wait for a response before noting an error
  POLLWATCHDOG        = 1           -- Check this often if the timtout has been exceeded
  POLLTIMEBUTTONS     = 5           -- Polls while cycling through buttons table at this interval
  POLLTIMEMETERS      = 125         -- Polling for meters, etc.
  POLLTIMESETTINGS    = 10          -- Polls while cycling through settings table at this interval
  --
  
  -- Debugging Enable/Disable
  DEBUGENABLE         = 0             -- Enable General Debugging
  DEBUGLOG            = 0             -- Enable debug messages to be written to log on core



--[[
 The polling of the amplifier button states is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of setting and meter polling.
]]--

  AMPBUTTONS = {
    {index = 6,  name = 'Power',  subindex = 1, parameter = '',     state = 99, enabled = 0},
    {index = 28, name = 'Mute',   subindex = 1, parameter = '2,1',  state = 99, enabled = 0},  
    {index = 29, name = 'Mute',   subindex = 2, parameter = '2,2',  state = 99, enabled = 0},
    {index = 30, name = 'Mute',   subindex = 3, parameter = '2,3',  state = 99, enabled = 0},
    {index = 31, name = 'Mute',   subindex = 4, parameter = '2,4',  state = 99, enabled = 0}
  }



--[[
 The polling of the amplifier settings is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of button and meter polling.
]]--

  -- TODO: Update the settings table (and this description)
  AMPSETTINGS = {
    --"xx", "xx", "xx", "xx", "xx", "xx", "xx", "xx"
  }
  
  
  
  --[[
 The polling of the amplifier meters is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of button and setting polling.
]]--

  -- TODO: Update the meter polling
  AMPMETERS = {
    {index = 7,  name = 'Level',  subindex = 1, parameter = '1',    state = 99},  --inputs
    {index = 24, name = 'Level',  subindex = 1, parameter = '2',    state = 99}   --outputs
  }
  

  
--   ^^^^   'Constant' (variable) Definitions   ^^^^   --
---------------------------------------------------------



---------------------------------------------------------
--   vvvv      Global Variable Definitions      vvvv   --


  waitForResponse     = 0
  lastPolledButton    = 0
  lastPolledSetting   = 0
  lastPolledMeter     = 0


--   ^^^^      Global Variable Definitions      ^^^^   --
---------------------------------------------------------



---------------------------------------------------
--   vvvv   Function/Method Definitions   vvvv   --


  
  function Debug (incoming)
  -- Send a string out to Debug (date/time stamp)
    if (DEBUGENABLE == 1) then
      print( os.date() .. " - " .. incoming)
      
      if (DEBUGLOG == 1) then
        Log.Message(incoming)
      end
    end
  end



  -- Load initial values and reset the serial port
  function Status(state)
  
    --Debug('Entered Status')
    
    --  0 = OK – Green,           1 = Compromised – Orange,     2 = Fault – Red,
    --  3 = Not Present – Gray,   4 = Missing – Red,            5 = Initializing – Blue
    
    -- Update status indicator
    if      state == 'OK'           then Controls["Status"].Value = 0
      elseif  state == 'Compromised'  then Controls["Status"].Value = 1
      elseif  state == 'Fault'        then Controls["Status"].Value = 2
      elseif  state == 'Not Present'  then Controls["Status"].Value = 3
      elseif  state == 'Missing'      then Controls["Status"].Value = 4
      elseif  state == 'Initializing' then Controls["Status"].Value = 5
      else Log.Error(MYNAME .. '(Status) State not recognized')
    end
  
  end
  
  
  
  -- Load initial values and reset the serial port
  function Watchdog()
    
    -- If no responese reset port
    --Debug("WaitForResponse: " .. waitForResponse)
    if (waitForResponse >= WATCHDOGTHRESHOLD) then
      
      waitForResponse = 0     -- Stop re-trigger
      Status('Initializing')  -- Update status indicator
      
      -- Instantiate the device communications
      Debug('(Watchdog) Resetting port')
      Log.Error(MYNAME .. '(Watchdog) Resetting port')
      DeviceConnect()
    end
  
  end



  -- Poll Buttons from Device
  -- Necessary to allow user feedback to update (slow)
  function PollButtons()
    
    -- Loop through defined parameters
    lastPolledButton = lastPolledButton + 1
    if (lastPolledButton > #AMPBUTTONS) then lastPolledButton = 1 end
    
    -- Form the proper query
    if (AMPBUTTONS[lastPolledButton].name == 'Mute') then
      --Debug("TX: GM " .. AMPBUTTONS[lastPolledButton].parameter)
      DeviceTx("GM " .. AMPBUTTONS[lastPolledButton].parameter)
    elseif (AMPBUTTONS[lastPolledButton].name == 'Power') then
      --Debug("TX: GY")
      DeviceTx("GY")
    end
  end



  -- Poll meter state from Device
  function PollMeters()
     
    -- Loop through defined parameters
    lastPolledMeter = lastPolledMeter + 1
    if (lastPolledMeter > #AMPMETERS) then lastPolledMeter = 1 end

    -- Send the query
    DeviceTx("GL " .. AMPMETERS[lastPolledMeter].parameter)
  end



  -- Validate IP address and flag to start connection
  function ValidIp(ip)
    
    local ipChunks = {ip:match("(%d+)%.(%d+)%.(%d+)%.(%d+)")}
    if (#ipChunks == 4) then
      for _,v in pairs(ipChunks) do
        if (tonumber(v) < 0 or tonumber(v) > 255) then
          return 0
        end
      end
     
      return 1
    else
      return 0
    end
  end



  -- transmit a message to the device
  function DeviceTx(incoming)
  
    --Debug("TX: "..incoming)
    error = ETHERNET.socket:Write(incoming .. EOM)
   
    if error then
      Debug('ERROR (DeviceTx): ' .. error)
      Log.Error(MYNAME .. '(DeviceTx Error): ' .. error)      
      DeviceDisconnect()
    else
      waitForResponse = waitForResponse + 1         -- Count toward watchdog
    end
  end
  
  
  
  -- Change the color of an LED indicator
  function LedColor (value)
    local myColor
    
    if value <= -60 then
      myColor = 'LightGray'     -- No signal
    elseif value < -20 then
      myColor = 'Green'         -- Normal
    elseif value < -6 then
      myColor = 'Yellow'        -- Medium
    elseif value < -2 then
      myColor = 'Orange'        -- High
    else
      myColor = 'Red'           -- Clipping?
    end
    
    return myColor
  end
  
  
  
  -- Change enabled state of buttons
  function EnableChannel (myChannel, myState)
  
    -- Find the button properties in question
    for i = 1, #AMPBUTTONS do
      -- Found a match
      if (AMPBUTTONS[i].name == 'Mute') and (AMPBUTTONS[i].subindex == myChannel) then
        AMPBUTTONS[i].enabled = myState
        
        if myState == 1 then
          Controls['Input Signal'][myChannel].IsDisabled  = false
         
          Controls['Fault'][myChannel].IsDisabled         = false
          Controls['Output Meter'][myChannel].IsDisabled  = false
          Controls['Output Mute'][myChannel].IsDisabled   = false
        else
          Controls['Input Signal'][myChannel].IsDisabled  = true

          Controls['Fault'][myChannel].IsDisabled         = true
          Controls['Output Meter'][myChannel].IsDisabled  = true
          Controls['Output Mute'][myChannel].IsDisabled   = true
          
          --Clear fault indicators
          Controls['Fault'][myChannel].Boolean            = false
        end
      end
    end
  end



  function DisableControls (state)

    if state == 1 then
      myDisabled  = true
      myColor     = 'LightGray'
      myBoolean   = false
      
      -- Clear amp setting table
      AMPSETTINGS = {  }
      
    else
      myDisabled  = false
      myColor     = 'Green'
      myBoolean   = false
    end
    
    -- Initialize controls (disable until connection)
    Controls['Toggle Standby'].Boolean      = myBoolean
    Controls['Toggle Standby'].IsDisabled   = myDisabled
    Controls['Standby'].Boolean             = myBoolean
    Controls['Standby'].IsDisabled          = myDisabled
    --Controls['Power'].Boolean               = myBoolean
    Controls['Power'].IsDisabled            = myDisabled
    
    for i = 1, MaxChannels do
      EnableChannel(i, 0)

      if (i % 2) == 0 then
        Controls['Mono'][i/2].Boolean           = myBoolean
        Controls['Mono'][i/2].IsDisabled        = myDisabled
        Controls['Mono'][i/2].Color             = myColor
        
        Controls['V-Bridge'][i/2].Boolean       = myBoolean
        Controls['V-Bridge'][i/2].IsDisabled    = myDisabled
        Controls['V-Bridge'][i/2].Color         = myColor
        
        Controls['I-Share'][i/2].Boolean        = myBoolean
        Controls['I-Share'][i/2].IsDisabled     = myDisabled
        Controls['I-Share'][i/2].Color          = myColor
      
      end

      if (i % 4) == 0 then
        Controls['Quad Mode'].Boolean      = myBoolean 
        Controls['Quad Mode'].IsDisabled   = myDisabled  
        Controls['Quad Mode'].Color        = myColor
      end
    end
  
  end
  
  

  -- Clear all fault indicators
  function ClearFaults()
    
    Debug("Clearing all fault indicators")
    for i, myControl in ipairs( Controls['Fault']) do
      myControl.Boolean = false
    end
  end
  
  
  
--   ^^^^   Function/Method Definitions   ^^^^   --
---------------------------------------------------






------------------------------------------------------
--   vvvv   Classes/Object-ish Definitions   vvvv   --



 --v   Serial Object/Handlers   v--

-- Sockeet Event Handler (state changes, data, errors, etc)
  ETHERNET.socket.EventHandler = function(mySocket, myEvent, myError)
    
    if myEvent == TcpSocket.Events.Connected then
      
      Debug ('Socket Connected: ' .. ETHERNET.ip.String)
      
      -- Send initial setup parameters to amplifier (channel fault setup)
      Log.Error(MYNAME .. '(Socket) Init connection has cleared all faults')
      DeviceTx('CF')        -- Clear Alarm/Faults
      DeviceTx('SR O')      -- Set Alarm Reporting On
      DeviceTx('SF O')      -- Set Fault Reporting On
      DeviceTx('GC')        -- Grab Channel Configuration
      
      -- Preset watch dog (a few of the above sends don't respond anything)
      waitForResponse = waitForResponse - 2
      
      -- Turn on Polling
      TimerPollSettings:Start(POLLTIMESETTINGS)
      TimerPollButtons:Start(POLLTIMEBUTTONS)
      TimerPollMeters:Start(POLLTIMEMETERS)
      
      -- Enable Controls
      Status('OK')           -- Update status indicator
      DisableControls(0)
      
    elseif myEvent == TcpSocket.Events.Reconnect then
      Debug ('Socket Reconnecting ' )
      Status('Initializing') -- Update status indicator
      DisableControls(1)
      
    elseif myEvent == TcpSocket.Events.Data then
      
      -- ControlSpace protocol dictates each command terminated with 0x0D (CR)
      local incoming = mySocket:ReadLine( TcpSocket.EOL.Any )
      
      --Test responses
      if string.match(incoming, string.char(06)) then     --Ack (to CF command)
        waitForResponse = waitForResponse - 1   -- ACK the Message
        Status('OK')          -- Update status indicator
        ClearFaults()
        
      elseif (#incoming > 2) then                         -- All other response
        waitForResponse = waitForResponse - 1   -- ACK the Message
        Status('OK')          -- Update status indicator

        Debug('RX: ' .. incoming)
        ParseRx(incoming)
      end 
      
    elseif myEvent == TcpSocket.Events.Closed then
      Debug ('Socket Closed by remote')
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    elseif myEvent == TcpSocket.Events.Error then
      
      Debug ('ERROR (SocketRx): Closed due to error: '.. myEvent)
      Log.Error(MYNAME .. '(SocketRx): ' .. myError)
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      ETHERNET.socket:Disconnect()
      
      waitForResponse = WATCHDOGTHRESHOLD   -- Force Watchdog Reset
      Status('Compromised')                 -- Update status indicator

    elseif myEvent == TcpSocket.Events.Timeout then
      Debug ('Socket Closed due to timeout')
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    else
      Debug ('Unknown Socket Event: '.. myEvent)
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    end
  end



  -- Instantiate the port and start listening
  function DeviceConnect()
    
    -- Stop Polling (start again in socket connect)
    TimerPollButtons:Stop()
    TimerPollSettings:Stop()
    TimerPollMeters:Stop()
    DisableControls(1)
    
    Debug ('Closing Socket - Change of IP?')      
    ETHERNET.socket:Disconnect()
 
    -- Check for Valid IP
    if (1 == ValidIp(ETHERNET.ip.String)) then
      
      Debug ('Socket Connecting: ' .. ETHERNET.ip.String)
      Log.Error(MYNAME .. '(Socket) Connecting: ' .. ETHERNET.ip.String)
      
      -- Start the connection
      ETHERNET.socket:Connect(ETHERNET.ip.String, ETHERNET.port)
       
    else
      
      Debug ('Socket Closed - Invalid IP')
      Log.Error(MYNAME .. '(Socket) Closed - Invalid IP')
    end

  end



  -- Closes the port and stops listening
  function DeviceDisconnect()
    Socket:Disconnect()
    
    Debug ('Socket Disconnect command sent')
    Log.Error(MYNAME .. '(Socket) Disconnect command sent')
  end

  
  
  -- Parse responses from the socket handler
  function ParseRx(incoming)
  
    --trim white space from start of message
    while (incoming:sub(1,1) == "") do
      incoming = incoming:sub(2)
    end
    
    -- Response from Meters Query
    if incoming:sub(1, 2) == "GL" then

      --Parse Response: Signal Level "GL 1 [4a,4a,4a,4a]"
      local slot, channel1, channel2, channel3, channel4 = string.match(incoming,'GL (%d) %[(%x+),(%x+),(%x+),(%x+)%]' )

      if slot == '1' then
      
        --Used if indicator is an LED
        --[[
        Controls['Input Signal'][1].Color =  LedColor( (tonumber(channel1, 16) / 2) - 60)
        Controls['Input Signal'][2].Color =  LedColor( (tonumber(channel2, 16) / 2) - 60)
        Controls['Input Signal'][3].Color =  LedColor( (tonumber(channel3, 16) / 2) - 60)
        Controls['Input Signal'][4].Color =  LedColor( (tonumber(channel4, 16) / 2) - 60)
        ]]--
        
        --Used if indicator is a meter
        Controls['Input Signal'][1].Value = (tonumber(channel1, 16) / 2) - 60 
        Controls['Input Signal'][2].Value = (tonumber(channel2, 16) / 2) - 60 
        Controls['Input Signal'][3].Value = (tonumber(channel3, 16) / 2) - 60 
        Controls['Input Signal'][4].Value = (tonumber(channel4, 16) / 2) - 60
        
      elseif slot == '2' then
        
        --Used if indicator is an LED
        --[[
        Controls['Output Meter'][1].Color =  LedColor( (tonumber(channel1, 16) / 2) - 60)
        Controls['Output Meter'][2].Color =  LedColor( (tonumber(channel2, 16) / 2) - 60)
        Controls['Output Meter'][3].Color =  LedColor( (tonumber(channel3, 16) / 2) - 60)
        Controls['Output Meter'][4].Color =  LedColor( (tonumber(channel4, 16) / 2) - 60)
        ]]--
        
        --Used if indicator is a meter
        Controls['Output Meter'][1].Value = (tonumber(channel1, 16) / 2) - 60
        Controls['Output Meter'][2].Value = (tonumber(channel2, 16) / 2) - 60
        Controls['Output Meter'][3].Value = (tonumber(channel3, 16) / 2) - 60
        Controls['Output Meter'][4].Value = (tonumber(channel4, 16) / 2) - 60
      end
      
      
    -- Response from Power Query
    elseif incoming:sub(1, 2) == "GY" then
      --Debug("RX Power: " ..incoming)

      -- Parse Response: Power Status "GY N"
      local state = string.match(incoming,"GY (%a)")
      
      -- Update controls
      if (state == 'N') then
        AMPBUTTONS[1].state = 1
        
        -- Update Indicators
        Controls['Standby'].Boolean = false
        Controls['Power'].Boolean   = true
        
        -- Update Button
        if (Controls['Toggle Standby'].Boolean == false) then
          Controls['Toggle Standby'].Boolean = true
        end
        
        --Debug('Power Status: On') 
        
      elseif (state == 'S') then
        AMPBUTTONS[1].state = 0
        
        -- Update Indicators
        Controls['Standby'].Boolean = true
        Controls['Power'].Boolean = false
      
        -- Update Button
        if (Controls['Toggle Standby'].Boolean == true) then
          Controls['Toggle Standby'].Boolean = false
        end
        
        --Debug('Power Status: Standby')
      end

    
    -- Response from Fault (unsolicited)
    elseif incoming:sub(1, 2) == "GF" then   
      Debug('RX fault status from AMP!')
      
      local state = string.match(incoming,"GF (%a)")
      
      if (state == 'F') and (Controls['Fault'][5].Boolean == false) then
        Controls['Fault'][5].Boolean = true
        Log.Error(MYNAME .. '(Fault Status) In Fault (New)')
        Debug('Fault Status: In Fault!')
        
      elseif (state == 'F') and (Controls['Fault'][5].Boolean == true) then
        Log.Error(MYNAME .. '(Fault Status) In Fault (Repeat)')
        Debug('Fault Status: In Fault! (repeat)')
      
      elseif (state == 'C') and (Controls['Fault'][5].Boolean == true) then
        Controls['Fault'][5].Boolean = false
        Log.Error(MYNAME .. '(Fault Status) Cleared')
        Debug('Fault Status: Cleared')

      elseif (state == 'C') and (Controls['Fault'][5].Boolean == false) then
        Debug('Fault Status: Cleared (repeat)')
        
      end
   

    -- Response from Mute Button Query
    elseif incoming:sub(1, 2) == "GM" then

      -- Parse Response: Mute Status "GM 2,1,U"
      local slot, channel, state = string.match(incoming,"GM (%d),(%d),(%a)")
      
      if tonumber(slot) > 2 then
        channel = channel + 4
      end
      
      -- Only update button if it's out of state (amp initiated change)
      if (state == 'U') and (Controls['Output Mute'][tonumber(channel)].Boolean == true) then
        AMPBUTTONS[channel + 1].state = 0                      -- store state
        Controls['Output Mute'][tonumber(channel)].Boolean = false   -- update button
        Debug('Mute Status: '.. channel ..' Status: Unmuted')
            
      elseif (state == 'M') and (Controls['Output Mute'][tonumber(channel)].Boolean == false) then
        AMPBUTTONS[channel + 1].state = 1                      -- store state
        Controls['Output Mute'][tonumber(channel)].Boolean = true    -- update button
        Debug('Mute Status: '.. channel ..' Status: Muted')
      end
    
    
    -- Response from Reporting Status (unsolicited)
    elseif incoming:sub(1, 2) == "GR" then
    
      -- Parse Response: Alarm Reporting/Status "GR c,s,t,x"
      local statusChannel, statusSeverity, statusType, statusCondition = string.match(incoming,'GR (%d+),(%a+),(%a+),(%a+)' )
      
      --Debug ("Received Alarm: " .. incoming)
      --Debug("statusChannel ".. statusChannel)
      
      --Debug("statusSeverity ".. statusSeverity)
      --Debug("statusType ".. statusType)
      --Debug("statusCondition ".. statusCondition)
      
      -- Form log message
      local myMessage = "(Alarm Reporting) "

      -- Handle severity
      if (statusSeverity == 'W') then
        myMessage = myMessage .. "WARNING "
      elseif (statusSeverity == 'F') then
        myMessage = myMessage .. "FAULT "
      elseif (statusSeverity == 'S') then
        myMessage = myMessage .. "SYSTEM message  "
      end
      
      -- Handle condition
      if (statusCondition == 'S') then
        myMessage = myMessage .. "activated "
        Controls['Fault'][tonumber(statusChannel)].Boolean = true
      elseif (statusCondition == 'C') then
        myMessage = myMessage .. "cleared "
        Controls['Fault'][tonumber(statusChannel)].Boolean = false
      end
      
      myMessage = myMessage .. "on channel " .. statusChannel .. ": "

      -- Handle Type
      if (statusType == 'N') then
        myMessage = myMessage .. "No alarm "
      elseif (statusType == 'O') then
        myMessage = myMessage .. "Open circuit "
      elseif (statusType == 'S') then
        myMessage = myMessage .. "Short circuit "
      elseif (statusType == 'A') then
        myMessage = myMessage .. "AC Loss "
      elseif (statusType == 'D') then
        myMessage = myMessage .. "Digital audio loss "
      elseif (statusType == 'I') then
        myMessage = myMessage .. "I-Share jumper missing "
      elseif (statusType == 'L') then
        myMessage = myMessage .. "Limiting "
      elseif (statusType == 'C') then
        myMessage = myMessage .. "Clip "
      elseif (statusType == 'P') then
        myMessage = myMessage .. "Protection "
      elseif (statusType == 'Z') then
        myMessage = myMessage .. "Something unknown (other) "
      end

     
      -- Write to Log
      Log.Message(MYNAME .. myMessage)
      Debug(MYNAME .. myMessage)
    
    
    -- Response from channel configuration (only on connection)
    elseif incoming:sub(1, 2) == "GC" then
      --Debug("Configuration Raw: ".. incoming)
      OnConfig(incoming)
      
    -- Response of unknown type
    else
      Debug('Unhandled Response: ' .. incoming)
    end

  end
  
  

  -- Mute button handler 
  function OnMute (ctl)
    TimerPollButtons:Stop()

    --find parameter to send
    for i = 1, #AMPBUTTONS do
      if AMPBUTTONS[i].index == ctl.Index then
    
        if (ctl.Boolean == true) and (AMPBUTTONS[i].state ~= 1) then
          --Debug('TX: SM '.. AMPBUTTONS[i].parameter ..',M')
          AMPBUTTONS[i].state = 1
          DeviceTx('SM '.. AMPBUTTONS[i].parameter ..',M')
        elseif (ctl.Boolean == false) and (AMPBUTTONS[i].state ~= 0) then
          --Debug('TX: SM '.. AMPBUTTONS[i].parameter ..',U')
          AMPBUTTONS[i].state = 0
          DeviceTx('SM '.. AMPBUTTONS[i].parameter ..',U')
        end
      end
    end
    
    TimerPollButtons:Start(1)    -- Delay the next poll
  end
  
  
  
  -- Process the channel configurations
  function OnConfig (myConfig)
      
    -- Parse Response: Alarm Reporting/Status "GC IN,IN,BL,BL"

    -- Extract each number or letter pair (after GC) and build and array of responses
    local myMatch = "%w%w"
     for line, _ in myConfig:gmatch(myMatch) do
        if line ~= "GC" then
          table.insert(AMPSETTINGS, line)
        end
     end

    --[[
    Debug("Parsing original String : " .. myConfig)
    Debug("Entered Config parsing 1: " .. AMPSETTINGS[1])
    Debug("Entered Config parsing 2: " .. AMPSETTINGS[2])
    Debug("Entered Config parsing 3: " .. AMPSETTINGS[3])
    Debug("Entered Config parsing 4: " .. AMPSETTINGS[4])
    ]]--
    
    -- Evaluate the first 4 channels
    if ( string.sub(AMPSETTINGS[1], 1, 1) == 'Q') then
      --Debug("Quad 1 config received")
      
      -- Light the Quad LED and update others
      Controls['Quad Mode'].Boolean  = true
      EnableChannel (1, 1)
      
      if (string.sub(AMPSETTINGS[1], 2, 2) == 'L') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      elseif (string.sub(AMPSETTINGS[1], 2, 2) == '7') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      elseif (string.sub(AMPSETTINGS[1], 2, 2) == '1') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      end
      
    else
    
      -- Update the first channel pair (1-2)
      if( string.sub(AMPSETTINGS[1], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 1/2")

        -- Light the Bridge LED and update others
        Controls['V-Bridge'][1].Boolean  = true
        EnableChannel (1, 1)
        
      elseif( string.sub(AMPSETTINGS[1], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 1/2")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][1].Boolean  = true
        EnableChannel (1, 1)
        
      elseif (AMPSETTINGS[1]:sub(1,1) == 'I' and AMPSETTINGS[2]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 1/2")
        
        -- Light the Mono LED and update others
        Controls['Mono'][1].Boolean       = true
        EnableChannel (1, 1)
        EnableChannel (2, 1)
      end

      -- Update the second channel pair (3-4)
      if( string.sub(AMPSETTINGS[3], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 3/4")

        -- Light the Bridge LED and update others
        Controls['V-Bridge'][2].Boolean  = true
        EnableChannel (3, 1)
                
      elseif( string.sub(AMPSETTINGS[3], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 3/4")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][2].Boolean  = true
        EnableChannel (3, 1)
        
      elseif (AMPSETTINGS[3]:sub(1,1) == 'I' and AMPSETTINGS[4]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 3/4")
        
        -- Light the Mono LED and update others
        Controls['Mono'][2].Boolean       = true
        EnableChannel (3, 1)
        EnableChannel (4, 1)
      end
    end
  end



--   ^^^^   Classes/Object-ish Definitions   ^^^^   --
------------------------------------------------------



------------------------------------------------------
--   vvvv   Controls/Button Event Handlers   vvvv   --


  -- Change of IP address
  Controls['IP Address'].EventHandler = function(ctl)
    DeviceConnect()                       -- Handles reconnect based on current port state
    waitForResponse = WATCHDOGTHRESHOLD   -- Force watchdog to reset port
  end



  --Power Button Handler
  Controls['Toggle Standby'].EventHandler = function(ctl)
    if AMPBUTTONS[1].state == 1 then
      DeviceTx("SY S")
      --Debug("SY S")
    else
      DeviceTx("SY N")
      --Debug("SY N")
    end
  end



  -- Mute Button Handler
  for i = 1, #Controls['Output Mute'] do
    Controls['Output Mute'][i].EventHandler = OnMute
  end
  
  
  
  --Fault Clear button handler
  Controls['Fault Clear'].EventHandler = function(ctl)
    Log.Error(MYNAME .. 'User has cleared all faults')
    DeviceTx('CF')
  end



--   ^^^^   Controls/Button Event Handlers   ^^^^   --
------------------------------------------------------

 
------------------------------------
--   vvvv   Main Program   vvvv   --

  Status('Initializing')  -- Update status indicator
  
  -- Initialize controls (disable until connection)
  DisableControls(1)
    
  -- Setup Watchdog to poll device and track responses
  TimerWatchdog = Timer.New()
  TimerWatchdog.EventHandler = Watchdog         -- Resets serial and creates Zones (start timer on error)
  TimerWatchdog:Start(POLLWATCHDOG)
  
  -- Setup polling timers.  Start them in the connection event.
  TimerPollButtons = Timer.New()
  TimerPollButtons.EventHandler = PollButtons
  
  TimerPollSettings = Timer.New()
  TimerPollSettings.EventHandler = function () DeviceTx('GC') end
  --TimerPollSettings.EventHandler = PollSettings

  TimerPollMeters = Timer.New()
  TimerPollMeters.EventHandler = PollMeters

  waitForResponse = WATCHDOGTHRESHOLD         -- Force watchdog
  
  Debug("Script Started...")


--   ^^^^   Main Program   ^^^^   --
------------------------------------
  ----------------------------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------------------------
elseif Properties["Model"].Value == "PM8500N" and Properties["Mode"].Value == "Basic" then
  --print("8 Basic")


---------------------------------------------------------
--   vvvv   'Constant' (variable) Definitions   vvvv   --


  -- Serial port settings
  ETHERNET = {
    socket    = TcpSocket.New(),
    ip        = Controls["IP Address"],
    port      = 10055
  }
  
  -- External Variables
  MYNAME = Controls["Name"].String .. ": " -- Used for logging to Q-Sys log
  MaxChannels = 8                         -- 8 Channel amplifier
  
  -- Message Syntax
  EOM                 = "\r"  -- End of MessageGL
  
  -- Timer settings for Production
  WATCHDOGTHRESHOLD   = 25           -- How many polls to wait for a response before noting an error
  POLLWATCHDOG        = 5            -- Check this often if the timtout has been exceeded
  POLLTIMEBUTTONS     = .5           -- Polls while cycling through buttons table at this interval
  POLLTIMEMETERS      = .12          -- Polling for meters, etc.
  POLLTIMESETTINGS    = 10           -- Polls while cycling through settings table at this interva
  
  --  Timer Settings for Debug
  --[[
  WATCHDOGTHRESHOLD   = 25           -- How many polls to wait for a response before noting an error
  POLLWATCHDOG        = 1            -- Check this often if the timtout has been exceeded
  POLLTIMEBUTTONS     = .5           -- Polls while cycling through buttons table at this interval
  POLLTIMEMETERS      = 5         -- Polling for meters, etc.
  POLLTIMESETTINGS    = 122            -- Polls while cycling through settings table at this interval
  ]]--
  
  -- Debugging Enable/Disable
  DEBUGENABLE         = 0             -- Enable General Debugging
  DEBUGLOG            = 0             -- Enable debug messages to be written to log on core



--[[
 The polling of the amplifier button states is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of setting and meter polling.
]]--

  AMPBUTTONS = {
    {index = 6,  name = 'Power',  subindex = 1, parameter = '',     state = 99, enabled = 0},
    {index = 47, name = 'Mute',   subindex = 1, parameter = '2,1',  state = 99, enabled = 0},  
    {index = 48, name = 'Mute',   subindex = 2, parameter = '2,2',  state = 99, enabled = 0},
    {index = 49, name = 'Mute',   subindex = 3, parameter = '2,3',  state = 99, enabled = 0},
    {index = 50, name = 'Mute',   subindex = 4, parameter = '2,4',  state = 99, enabled = 0},
    {index = 51, name = 'Mute',   subindex = 5, parameter = '4,1',  state = 99, enabled = 0},
    {index = 52, name = 'Mute',   subindex = 6, parameter = '4,2',  state = 99, enabled = 0},
    {index = 53, name = 'Mute',   subindex = 7, parameter = '4,3',  state = 99, enabled = 0},
    {index = 54, name = 'Mute',   subindex = 8, parameter = '4,4',  state = 99, enabled = 0}
  }


--[[
 The polling of the amplifier settings is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of button and meter polling.
]]--

  -- TODO: Update the settings table (and this description)
  AMPSETTINGS = {
    --"xx", "xx", "xx", "xx", "xx", "xx", "xx", "xx"
  }
  
  
  
  --[[
 The polling of the amplifier meters is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of button and setting polling.
]]--

  -- TODO: Update the meter polling
  AMPMETERS = {
    {index = 4,  name = 'Level',  subindex = 1, parameter = '1',    state = 99},  --inputs
    {index = 35, name = 'Level',  subindex = 1, parameter = '2',    state = 99}   --outputs
  }
  

  
--   ^^^^   'Constant' (variable) Definitions   ^^^^   --
---------------------------------------------------------



---------------------------------------------------------
--   vvvv      Global Variable Definitions      vvvv   --


  waitForResponse     = 0
  lastPolledButton    = 0
  lastPolledSetting   = 0
  lastPolledMeter     = 0


--   ^^^^      Global Variable Definitions      ^^^^   --
---------------------------------------------------------



---------------------------------------------------
--   vvvv   Function/Method Definitions   vvvv   --


  
  function Debug (incoming)
  -- Send a string out to Debug (date/time stamp)
    if (DEBUGENABLE == 1) then
      print( os.date() .. " - " .. incoming)
      
      if (DEBUGLOG == 1) then
        Log.Message(incoming)
      end
    end
  end



  -- Load initial values and reset the serial port
  function Status(state)
  
    --Debug('Entered Status')
    
    --  0 = OK – Green,           1 = Compromised – Orange,     2 = Fault – Red,
    --  3 = Not Present – Gray,   4 = Missing – Red,            5 = Initializing – Blue
    
    -- Update status indicator
    if      state == 'OK'           then Controls["Status"].Value = 0
      elseif  state == 'Compromised'  then Controls["Status"].Value = 1
      elseif  state == 'Fault'        then Controls["Status"].Value = 2
      elseif  state == 'Not Present'  then Controls["Status"].Value = 3
      elseif  state == 'Missing'      then Controls["Status"].Value = 4
      elseif  state == 'Initializing' then Controls["Status"].Value = 5
      else Log.Error(MYNAME .. '(Status) State not recognized')
    end
  
  end
  
  
  
  -- Load initial values and reset the serial port
  function Watchdog()
    
    -- If no responese reset port
    --Debug("WaitForResponse: " .. waitForResponse)
    if (waitForResponse >= WATCHDOGTHRESHOLD) then
      
      waitForResponse = 0     -- Stop re-trigger
      Status('Initializing')  -- Update status indicator
      
      -- Instantiate the device communications
      Debug('(Watchdog) Resetting port')
      Log.Error(MYNAME .. '(Watchdog) Resetting port')
      DeviceConnect()
    end
  
  end



  -- Poll Buttons from Device
  -- Necessary to allow user feedback to update (slow)
  function PollButtons()
    
    -- Loop through defined parameters
    lastPolledButton = lastPolledButton + 1
    if (lastPolledButton > #AMPBUTTONS) then lastPolledButton = 1 end
    
    -- Form the proper query
    if (AMPBUTTONS[lastPolledButton].name == 'Mute') then
      --Debug("TX: GM " .. AMPBUTTONS[lastPolledButton].parameter)
      DeviceTx("GM " .. AMPBUTTONS[lastPolledButton].parameter)
    elseif (AMPBUTTONS[lastPolledButton].name == 'Power') then
      --Debug("TX: GY")
      DeviceTx("GY")
    end
  end



  -- Poll meter state from Device
  function PollMeters()
     
    -- Loop through defined parameters
    lastPolledMeter = lastPolledMeter + 1
    if (lastPolledMeter > #AMPMETERS) then lastPolledMeter = 1 end

    -- Send the query
    DeviceTx("GL " .. AMPMETERS[lastPolledMeter].parameter)
  end



  -- Validate IP address and flag to start connection
  function ValidIp(ip)
    
    local ipChunks = {ip:match("(%d+)%.(%d+)%.(%d+)%.(%d+)")}
    if (#ipChunks == 4) then
      for _,v in pairs(ipChunks) do
        if (tonumber(v) < 0 or tonumber(v) > 255) then
          return 0
        end
      end
     
      return 1
    else
      return 0
    end
  end



  -- transmit a message to the device
  function DeviceTx(incoming)
  
    --Debug("TX: "..incoming)
    error = ETHERNET.socket:Write(incoming .. EOM)
   
    if error then
      Debug('ERROR (DeviceTx): ' .. error)
      Log.Error(MYNAME .. '(DeviceTx Error): ' .. error)      
      DeviceDisconnect()
    else
      waitForResponse = waitForResponse + 1         -- Count toward watchdog
    end
  end
  
  
  
  -- Change the color of an LED indicator
  function LedColor (value)
    local myColor
    
    if value <= -60 then
      myColor = 'LightGray'     -- No signal
    elseif value < -20 then
      myColor = 'Green'         -- Normal
    elseif value < -6 then
      myColor = 'Yellow'        -- Medium
    elseif value < -2 then
      myColor = 'Orange'        -- High
    else
      myColor = 'Red'           -- Clipping?
    end
    
    return myColor
  end
  
  
  
  -- Change enabled state of buttons
  function EnableChannel (myChannel, myState)
  
    -- Find the button properties in question
    for i = 1, #AMPBUTTONS do
      -- Found a match
      if (AMPBUTTONS[i].name == 'Mute') and (AMPBUTTONS[i].subindex == myChannel) then
        AMPBUTTONS[i].enabled = myState
        
        if myState == 1 then
          Controls['Input Signal'][myChannel].IsDisabled  = false
         
          Controls['Fault'][myChannel].IsDisabled         = false
          Controls['Output Meter'][myChannel].IsDisabled  = false
          --(Basic Version) Controls['Output Mute'][myChannel].IsDisabled   = false
        else
          Controls['Input Signal'][myChannel].IsDisabled  = true

          Controls['Fault'][myChannel].IsDisabled         = true
          Controls['Output Meter'][myChannel].IsDisabled  = true
          ---(Basic Version) Controls['Output Mute'][myChannel].IsDisabled   = true
          
          --Clear fault indicators
          Controls['Fault'][myChannel].Boolean            = false
        end
      end
    end
  end



  function DisableControls (state)

    if state == 1 then
      myDisabled  = true
      myColor     = 'LightGray'
      myBoolean   = false
      
      -- Clear amp setting table
      AMPSETTINGS = {  }
      
    else
      myDisabled  = false
      myColor     = 'Green'
      myBoolean   = false
    end
    
    -- Ignor Controls (Basic Version)
    --[[
    -- Initialize controls (disable until connection)
    Controls['Toggle Standby'].Boolean      = myBoolean
    Controls['Toggle Standby'].IsDisabled   = myDisabled
    Controls['Standby'].Boolean             = myBoolean
    Controls['Standby'].IsDisabled          = myDisabled
    Controls['Power'].Boolean               = myBoolean
    Controls['Power'].IsDisabled            = myDisabled
    ]]--
    
    for i = 1, MaxChannels do
      EnableChannel(i, 0)

      
      if (i % 2) == 0 then
        Controls['Mono'][i/2].Boolean           = myBoolean
        Controls['Mono'][i/2].IsDisabled        = myDisabled
        Controls['Mono'][i/2].Color             = myColor
        
        Controls['V-Bridge'][i/2].Boolean       = myBoolean
        Controls['V-Bridge'][i/2].IsDisabled    = myDisabled
        Controls['V-Bridge'][i/2].Color         = myColor
        
        Controls['I-Share'][i/2].Boolean        = myBoolean
        Controls['I-Share'][i/2].IsDisabled     = myDisabled
        Controls['I-Share'][i/2].Color          = myColor
      
      end

      if (i % 4) == 0 then
        Controls['Quad Mode'][i/4].Boolean      = myBoolean 
        Controls['Quad Mode'][i/4].IsDisabled   = myDisabled  
        Controls['Quad Mode'][i/4].Color        = myColor
      end
    end
  
  end
  
  

  -- Clear all fault indicators
  function ClearFaults()
    
    Debug("Clearing all fault indicators")
    for i, myControl in ipairs( Controls['Fault']) do
      myControl.Boolean = false
    end
  end
  
  
  
--   ^^^^   Function/Method Definitions   ^^^^   --
---------------------------------------------------






------------------------------------------------------
--   vvvv   Classes/Object-ish Definitions   vvvv   --



 --v   Serial Object/Handlers   v--

-- Sockeet Event Handler (state changes, data, errors, etc)
  ETHERNET.socket.EventHandler = function(mySocket, myEvent, myError)
    
    if myEvent == TcpSocket.Events.Connected then
      
      Debug ('Socket Connected: ' .. ETHERNET.ip.String)
      
      -- Send initial setup parameters to amplifier (channel fault setup)
      Log.Error(MYNAME .. '(Socket) Init connection has cleared all faults')
      DeviceTx('CF')        -- Clear Alarm/Faults
      DeviceTx('SR O')      -- Set Alarm Reporting On
      DeviceTx('SF O')      -- Set Fault Reporting On
      DeviceTx('GC')        -- Grab Channel Configuration
      
      -- Preset watch dog (a few of the above sends don't respond anything)
      waitForResponse = waitForResponse - 2
      
      -- Turn on Polling
      TimerPollSettings:Start(POLLTIMESETTINGS)
      --(Basic Version) TimerPollButtons:Start(POLLTIMEBUTTONS)
      TimerPollMeters:Start(POLLTIMEMETERS)
      
      -- Enable Controls
      Status('OK')           -- Update status indicator
      DisableControls(0)
      
    elseif myEvent == TcpSocket.Events.Reconnect then
      Debug ('Socket Reconnecting ' )
      Status('Initializing') -- Update status indicator
      DisableControls(1)
      
    elseif myEvent == TcpSocket.Events.Data then
      
      -- ControlSpace protocol dictates each command terminated with 0x0D (CR)
      local incoming = mySocket:ReadLine( TcpSocket.EOL.Any )
      
      --Test responses
      if string.match(incoming, string.char(06)) then     --Ack (to CF command)
        waitForResponse = waitForResponse - 1   -- ACK the Message
        Status('OK')          -- Update status indicator
        ClearFaults()
        
      elseif (#incoming > 2) then                         -- All other response
        waitForResponse = waitForResponse - 1   -- ACK the Message
        Status('OK')          -- Update status indicator
        
        --Debug('RX: ' .. incoming)
        ParseRx(incoming)
      end 
      
    elseif myEvent == TcpSocket.Events.Closed then
      Debug ('Socket Closed by remote')
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    elseif myEvent == TcpSocket.Events.Error then
      
      Debug ('ERROR (SocketRx): Closed due to error: '.. myEvent)
      Log.Error(MYNAME .. '(SocketRx): ' .. myError)
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      ETHERNET.socket:Disconnect()
      
      waitForResponse = WATCHDOGTHRESHOLD   -- Force Watchdog Reset
      Status('Compromised')                 -- Update status indicator
      
    elseif myEvent == TcpSocket.Events.Timeout then
      Debug ('Socket Closed due to timeout')
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    else
      Debug ('Unknown Socket Event: '.. myEvent)
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    end
  end



  -- Instantiate the port and start listening
  function DeviceConnect()
    
    -- Stop Polling (start again in socket connect)
    --(Basic Version) TimerPollButtons:Stop()
    TimerPollSettings:Stop()
    TimerPollMeters:Stop()
    DisableControls(1)
    
    Debug ('Closing Socket - Change of IP?')
    ETHERNET.socket:Disconnect()
 
    -- Check for Valid IP
    if (1 == ValidIp(ETHERNET.ip.String)) then
      
      Debug ('Socket Connecting: ' .. ETHERNET.ip.String)
      Log.Error(MYNAME .. '(Socket) Connecting: ' .. ETHERNET.ip.String)
      
      -- Start the connection
      ETHERNET.socket:Connect(ETHERNET.ip.String, ETHERNET.port)
       
    else
      
      Debug ('Socket Closed - Invalid IP')
      Log.Error(MYNAME .. '(Socket) Closed - Invalid IP')
    end

  end



  -- Closes the port and stops listening
  function DeviceDisconnect()
    Socket:Disconnect()
    
    Debug ('Socket Disconnect command sent')
    Log.Error(MYNAME .. '(Socket) Disconnect command sent')
  end

  
  
  -- Parse responses from the socket handler
  function ParseRx(incoming)
  
    --trim white space from start of message
    while (incoming:sub(1,1) == "") do
      incoming = incoming:sub(2)
    end
    
    -- Response from Meters Query
    if incoming:sub(1, 2) == "GL" then

      --Parse Response: Signal Level "GL 1 [4a,4a,4a,4a,4a,4a,4a,4a]"
      local slot, channel1, channel2, channel3, channel4, channel5, channel6, channel7, channel8 = string.match(incoming,'GL (%d) %[(%x+),(%x+),(%x+),(%x+),(%x+),(%x+),(%x+),(%x+)%]' )

      if slot == '1' then
      
        --Used if indicator is an LED
        Controls['Input Signal'][1].Color =  LedColor( (tonumber(channel1, 16) / 2) - 60)
        Controls['Input Signal'][2].Color =  LedColor( (tonumber(channel2, 16) / 2) - 60)
        Controls['Input Signal'][3].Color =  LedColor( (tonumber(channel3, 16) / 2) - 60)
        Controls['Input Signal'][4].Color =  LedColor( (tonumber(channel4, 16) / 2) - 60)
        Controls['Input Signal'][5].Color =  LedColor( (tonumber(channel5, 16) / 2) - 60)
        Controls['Input Signal'][6].Color =  LedColor( (tonumber(channel6, 16) / 2) - 60)
        Controls['Input Signal'][7].Color =  LedColor( (tonumber(channel7, 16) / 2) - 60)
        Controls['Input Signal'][8].Color =  LedColor( (tonumber(channel8, 16) / 2) - 60)
        
        
        --Used if indicator is a meter
        --[[
        Controls['Input Signal'][1].Value = (tonumber(channel1, 16) / 2) - 60 
        Controls['Input Signal'][2].Value = (tonumber(channel2, 16) / 2) - 60 
        Controls['Input Signal'][3].Value = (tonumber(channel3, 16) / 2) - 60 
        Controls['Input Signal'][4].Value = (tonumber(channel4, 16) / 2) - 60
        Controls['Input Signal'][5].Value = (tonumber(channel5, 16) / 2) - 60 
        Controls['Input Signal'][6].Value = (tonumber(channel6, 16) / 2) - 60 
        Controls['Input Signal'][7].Value = (tonumber(channel7, 16) / 2) - 60 
        Controls['Input Signal'][8].Value = (tonumber(channel8, 16) / 2) - 60 
        ]]--
        
      elseif slot == '2' then
        
        --Used if indicator is an LED
        Controls['Output Meter'][1].Color =  LedColor( (tonumber(channel1, 16) / 2) - 60)
        Controls['Output Meter'][2].Color =  LedColor( (tonumber(channel2, 16) / 2) - 60)
        Controls['Output Meter'][3].Color =  LedColor( (tonumber(channel3, 16) / 2) - 60)
        Controls['Output Meter'][4].Color =  LedColor( (tonumber(channel4, 16) / 2) - 60)
        Controls['Output Meter'][5].Color =  LedColor( (tonumber(channel5, 16) / 2) - 60)
        Controls['Output Meter'][6].Color =  LedColor( (tonumber(channel6, 16) / 2) - 60)
        Controls['Output Meter'][7].Color =  LedColor( (tonumber(channel7, 16) / 2) - 60)
        Controls['Output Meter'][8].Color =  LedColor( (tonumber(channel8, 16) / 2) - 60)
        
        --Used if indicator is a meter
        --[[
        Controls['Output Meter'][1].Value = (tonumber(channel1, 16) / 2) - 60
        Controls['Output Meter'][2].Value = (tonumber(channel2, 16) / 2) - 60
        Controls['Output Meter'][3].Value = (tonumber(channel3, 16) / 2) - 60
        Controls['Output Meter'][4].Value = (tonumber(channel4, 16) / 2) - 60
        Controls['Output Meter'][5].Value = (tonumber(channel5, 16) / 2) - 60
        Controls['Output Meter'][6].Value = (tonumber(channel6, 16) / 2) - 60
        Controls['Output Meter'][7].Value = (tonumber(channel7, 16) / 2) - 60
        Controls['Output Meter'][8].Value = (tonumber(channel8, 16) / 2) - 60
        ]]--
      end
      
      
    -- Response from Power Query
    --if string.find(incoming, "GY") then  --(Drop the find for lighter method)
    elseif incoming:sub(1, 2) == "GY" then
      --Debug("RX Power: " ..incoming)

      -- Ignore Power (Basic Version)
      --[[
      
      -- Parse Response: Power Status "GY N"
      local state = string.match(incoming,"GY (%a)")
      
      -- Update controls
      if (state == 'N') and (Controls['Power'].Boolean == false) then
        Controls['Standby'].Boolean = false
        Controls['Power'].Boolean   = true
        --Debug('Power Status: On')
      
      elseif (state == 'S') and (Controls['Power'].Boolean == true) then
        Controls['Standby'].Boolean = true
        Controls['Power'].Boolean = false
        --Debug('Power Status: Standby')
      end
      ]]--
    
    -- Response from Fault (unsolicited)
    elseif incoming:sub(1, 2) == "GF" then   
      local state = string.match(incoming,"GF (%a)")
      
      if (state == 'F') and (Controls['Fault'][9].Boolean == false) then
        Controls['Fault'][9].Boolean = true
        Log.Error(MYNAME .. '(Fault Status) In Fault (New)')
        Debug('Fault Status: In Fault!')
        
      elseif (state == 'F') and (Controls['Fault'][9].Boolean == true) then
        Log.Error(MYNAME .. '(Fault Status) In Fault (Repeat)')
        Debug('Fault Status: In Fault! (repeat)')
      
      elseif (state == 'C') and (Controls['Fault'][9].Boolean == true) then
        Controls['Fault'][9].Boolean = false
        Log.Error(MYNAME .. '(Fault Status) Cleared')
        Debug('Fault Status: Cleared')

      elseif (state == 'C') and (Controls['Fault'][9].Boolean == false) then
        Debug('Fault Status: Cleared (repeat)')
        
      end
   

    -- Response from Mute Button Query
    elseif incoming:sub(1, 2) == "GM" then
    
    --Ignore button responses (Basic Version)
    --[[
      -- Parse Response: Mute Status "GM 2,1,U"
      local slot, channel, state = string.match(incoming,"GM (%d),(%d),(%a)")
      
      if tonumber(slot) > 2 then
        channel = channel + 4
      end
      
      -- Only update button if it's out of state (amp initiated change)
      if (state == 'U') and (Controls['Output Mute'][tonumber(channel)].Boolean == true) then
        AMPBUTTONS[channel + 1].state = 0                      -- store state
        Controls['Output Mute'][tonumber(channel)].Boolean = false   -- update button
        Debug('Mute Status: '.. channel ..' Status: Unmuted')
            
      elseif (state == 'M') and (Controls['Output Mute'][tonumber(channel)].Boolean == false) then
        AMPBUTTONS[channel + 1].state = 1                      -- store state
        Controls['Output Mute'][tonumber(channel)].Boolean = true    -- update button
        Debug('Mute Status: '.. channel ..' Status: Muted')
      end
    ]]--
    
    -- Response from Reporting Status (unsolicited)
    elseif incoming:sub(1, 2) == "GR" then
    
      -- Parse Response: Alarm Reporting/Status "GR c,s,t,x"
      local statusChannel, statusSeverity, statusType, statusCondition = string.match(incoming,'GR (%d+),(%a+),(%a+),(%a+)' )
      
      --Debug (incoming)
      --Debug("statusChannel ".. statusChannel)
      
      --Debug("statusSeverity ".. statusSeverity)
      --Debug("statusType ".. statusType)
      --Debug("statusCondition ".. statusCondition)
      
      -- Form log message
      local myMessage = "(Alarm Reporting) "

      -- Handle severity
      if (statusSeverity == 'W') then
        myMessage = myMessage .. "WARNING "
      elseif (statusSeverity == 'F') then
        myMessage = myMessage .. "FAULT "
      elseif (statusSeverity == 'S') then
        myMessage = myMessage .. "SYSTEM message  "
      end
      
      -- Handle condition
      if (statusCondition == 'S') then
        myMessage = myMessage .. "activated "
        Controls['Fault'][tonumber(statusChannel)].Boolean = true
      elseif (statusCondition == 'C') then
        myMessage = myMessage .. "cleared "
        Controls['Fault'][tonumber(statusChannel)].Boolean = false
      end
      
      myMessage = myMessage .. "on channel " .. statusChannel .. ": "

      -- Handle Type
      if (statusType == 'N') then
        myMessage = myMessage .. "No alarm "
      elseif (statusType == 'O') then
        myMessage = myMessage .. "Open circuit "
      elseif (statusType == 'S') then
        myMessage = myMessage .. "Short circuit "
      elseif (statusType == 'A') then
        myMessage = myMessage .. "AC Loss "
      elseif (statusType == 'D') then
        myMessage = myMessage .. "Digital audio loss "
      elseif (statusType == 'I') then
        myMessage = myMessage .. "I-Share jumper missing "
      elseif (statusType == 'L') then
        myMessage = myMessage .. "Limiting "
      elseif (statusType == 'C') then
        myMessage = myMessage .. "Clip "
      elseif (statusType == 'P') then
        myMessage = myMessage .. "Protection "
      elseif (statusType == 'Z') then
        myMessage = myMessage .. "Something unknown (other) "
      end

     
      -- Write to Log
      Log.Message(MYNAME .. myMessage)
      Debug(MYNAME .. myMessage)
    
    
    -- Response from channel configuration (only on connection)
    elseif incoming:sub(1, 2) == "GC" then
      --Debug("Configuration Raw: ".. incoming)
      OnConfig(incoming)
      
    -- Response of unknown type
    else
      Debug('Unhandled Response: ' .. incoming)
    end

  end
  
  

  -- Mute button handler
  -- Ignore button handler (Basic Version)
  --[[
  function OnMute (ctl)
    TimerPollButtons:Stop()

    --find parameter to send
    for i = 1, #AMPBUTTONS do
      if AMPBUTTONS[i].index == ctl.Index then
    
        if (ctl.Boolean == true) and (AMPBUTTONS[i].state ~= 1) then
          --Debug('TX: SM '.. AMPBUTTONS[i].parameter ..',M')
          AMPBUTTONS[i].state = 1
          DeviceTx('SM '.. AMPBUTTONS[i].parameter ..',M')
        elseif (ctl.Boolean == false) and (AMPBUTTONS[i].state ~= 0) then
          --Debug('TX: SM '.. AMPBUTTONS[i].parameter ..',U')
          AMPBUTTONS[i].state = 0
          DeviceTx('SM '.. AMPBUTTONS[i].parameter ..',U')
        end
      end
    end
    
    TimerPollButtons:Start(1)    -- Delay the next poll
  end
  ]]--
  
  
  
  -- Process the channel configurations
  function OnConfig (myConfig)
      
    -- Parse Response: Alarm Reporting/Status "GC IN,IN,BL,BL,Q7,Q7,Q7,Q7"

    -- Extract each number or letter pair (after GC) and build and array of responses
    local myMatch = "%w%w"
     for line, _ in myConfig:gmatch(myMatch) do
        if line ~= "GC" then
          table.insert(AMPSETTINGS, line)
        end
     end
    
    --[[
    Debug("Parsing original String : " .. myConfig)
    Debug("Entered Config parsing 1: " .. AMPSETTINGS[1])
    Debug("Entered Config parsing 2: " .. AMPSETTINGS[2])
    Debug("Entered Config parsing 3: " .. AMPSETTINGS[3])
    Debug("Entered Config parsing 4: " .. AMPSETTINGS[4])
    Debug("Entered Config parsing 5: " .. AMPSETTINGS[5])
    Debug("Entered Config parsing 6: " .. AMPSETTINGS[6])
    Debug("Entered Config parsing 7: " .. AMPSETTINGS[7])
    Debug("Entered Config parsing 8: " .. AMPSETTINGS[8])
    ]]--
    
    -- Evaluate the first 4 channels
    if ( string.sub(AMPSETTINGS[1], 1, 1) == 'Q') then
      --Debug("Quad 1 config received")
      
      -- Light the Quad LED and update others
      Controls['Quad Mode'][1].Boolean  = true
      EnableChannel (1, 1)
      
      if (string.sub(AMPSETTINGS[1], 2, 2) == 'L') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      elseif (string.sub(AMPSETTINGS[1], 2, 2) == '7') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      elseif (string.sub(AMPSETTINGS[1], 2, 2) == '1') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      end
      
    else
    
      -- Update the first channel pair (1-2)
      if( string.sub(AMPSETTINGS[1], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 1/2")

        -- Light the Bridge LED and update others
        Controls['V-Bridge'][1].Boolean  = true
        EnableChannel (1, 1)
        
      elseif( string.sub(AMPSETTINGS[1], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 1/2")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][1].Boolean  = true
        EnableChannel (1, 1)
        
      elseif (AMPSETTINGS[1]:sub(1,1) == 'I' and AMPSETTINGS[2]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 1/2")
        
        -- Light the Mono LED and update others
        Controls['Mono'][1].Boolean       = true
        EnableChannel (1, 1)
        EnableChannel (2, 1)
      end

      -- Update the second channel pair (3-4)
      if( string.sub(AMPSETTINGS[3], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 3/4")

        -- Light the Bridge LED and update others
        Controls['V-Bridge'][2].Boolean  = true
        EnableChannel (3, 1)
                
      elseif( string.sub(AMPSETTINGS[3], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 3/4")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][2].Boolean  = true
        EnableChannel (3, 1)
        
      elseif (AMPSETTINGS[3]:sub(1,1) == 'I' and AMPSETTINGS[4]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 3/4")
        
        -- Light the Mono LED and update others
        Controls['Mono'][2].Boolean       = true
        EnableChannel (3, 1)
        EnableChannel (4, 1)
      end
    end
  
    -- Evaluate the second 4 channels
    if ( string.sub(AMPSETTINGS[5], 1, 1) == 'Q') then
      --Debug("Quad 2 config received")
      
      -- Light the Quad LED and update others
      Controls['Quad Mode'][2].Boolean  = true
      EnableChannel (5, 1)
      
      if (string.sub(AMPSETTINGS[5], 2, 2) == 'L') then
        Controls['I-Share'][3].Boolean  = true
        Controls['I-Share'][4].Boolean  = true
      elseif (string.sub(AMPSETTINGS[5], 2, 2) == '7') then
        Controls['I-Share'][3].Boolean  = true
        Controls['I-Share'][4].Boolean  = true
      elseif (string.sub(AMPSETTINGS[5], 2, 2) == '1') then
        Controls['I-Share'][3].Boolean  = true
        Controls['I-Share'][4].Boolean  = true
      end
      
    else
    
      -- Update the first channel pair (5-6)
      if( string.sub(AMPSETTINGS[5], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 5/6")

        -- Light the Bridge LED and update others
        Controls['V-Bridge'][3].Boolean  = true
        EnableChannel (5, 1)
                
      elseif( string.sub(AMPSETTINGS[5], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 5/6")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][3].Boolean  = true
        EnableChannel (5, 1)
        
      elseif (AMPSETTINGS[5]:sub(1,1) == 'I' and AMPSETTINGS[6]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 5/6")
        
        -- Light the Mono LED and update others
        Controls['Mono'][3].Boolean       = true
        EnableChannel (5, 1)
        EnableChannel (6, 1)
      end

      -- Update the second channel pair (7-8)
      if( string.sub(AMPSETTINGS[7], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 7/8")
        
        -- Light the Bridge LED and update others
        Controls['V-Bridge'][4].Boolean  = true
        EnableChannel (7, 1)
        
      elseif( string.sub(AMPSETTINGS[7], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 7/8")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][4].Boolean  = true
        EnableChannel (7, 1)
        
      elseif (AMPSETTINGS[7]:sub(1,1) == 'I' and AMPSETTINGS[8]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 7/8")
        
        -- Light the Mono LED and update others
        Controls['Mono'][4].Boolean       = true
        EnableChannel (7, 1)
        EnableChannel (8, 1)
      end
    end
  end



--   ^^^^   Classes/Object-ish Definitions   ^^^^   --
------------------------------------------------------



------------------------------------------------------
--   vvvv   Controls/Button Event Handlers   vvvv   --


  -- Change of IP address
  Controls['IP Address'].EventHandler = function(ctl)
    DeviceConnect()                       -- Handles reconnect based on current port state
    waitForResponse = WATCHDOGTHRESHOLD   -- Force watchdog to reset port
  end



  --Power Button Handler
  -- Ignore button handler (Basic Version)
  --[[
  Controls['Toggle Standby'].EventHandler = function(ctl)
    local sendstring = "SY "..tostring(Controls['Power'].Boolean and 'S' or 'N')
    Debug(sendstring)
    DeviceTx(sendstring)
  end

  -- Mute Button Handler
  for i = 1, #Controls['Output Mute'] do
    Controls['Output Mute'][i].EventHandler = OnMute
  end
  
  --Fault Clear button handler
  Controls['Fault Clear'].EventHandler = function(ctl)
    Log.Error(MYNAME .. 'User has cleared all faults')
    DeviceTx('CF')
  end
  ]]--


--   ^^^^   Controls/Button Event Handlers   ^^^^   --
------------------------------------------------------

 
------------------------------------
--   vvvv   Main Program   vvvv   --

  Status('Initializing')  -- Update status indicator
  
  -- Initialize controls (disable until connection)
  DisableControls(1)
    
  -- Setup Watchdog to poll device and track responses
  TimerWatchdog = Timer.New()
  TimerWatchdog.EventHandler = Watchdog         -- Resets serial and creates Zones (start timer on error)
  TimerWatchdog:Start(POLLWATCHDOG)
  
  -- Setup polling timers.  Start them in the connection event.
  --(Basic Version) TimerPollButtons = Timer.New()
  --(Basic Version) TimerPollButtons.EventHandler = PollButtons
  
  TimerPollSettings = Timer.New()
  TimerPollSettings.EventHandler = function () DeviceTx('GC') end
  --TimerPollSettings.EventHandler = PollSettings

  TimerPollMeters = Timer.New()
  TimerPollMeters.EventHandler = PollMeters

  waitForResponse = WATCHDOGTHRESHOLD         -- Force watchdog
  
  Debug("Script Started...")


--   ^^^^   Main Program   ^^^^   --
------------------------------------


  ----------------------------------------------------------------------------------------------------
  ----------------------------------------------------------------------------------------------------
elseif Properties["Model"].Value == "PM4500N" and Properties["Mode"].Value == "Basic" then
  --print("4 Basic")


---------------------------------------------------------
--   vvvv   'Constant' (variable) Definitions   vvvv   --


  -- Serial port settings
  ETHERNET = {
    socket    = TcpSocket.New(),
    ip        = Controls["IP Address"],
    port      = 10055
  }
  
  -- External Variables
  MYNAME = Controls["Name"].String .. ": " -- Used for logging to Q-Sys log
  MaxChannels = 4                         -- 8 Channel amplifier
  
  -- Message Syntax
  EOM                 = "\r"  -- End of MessageGL
  
  -- Timer settings for Production
  WATCHDOGTHRESHOLD   = 25           -- How many polls to wait for a response before noting an error
  POLLWATCHDOG        = 5            -- Check this often if the timtout has been exceeded
  POLLTIMEBUTTONS     = .5           -- Polls while cycling through buttons table at this interval
  POLLTIMEMETERS      = .12          -- Polling for meters, etc.
  POLLTIMESETTINGS    = 10           -- Polls while cycling through settings table at this interva
  
  --  Timer Settings for Debug
  --[[
  WATCHDOGTHRESHOLD   = 25           -- How many polls to wait for a response before noting an error
  POLLWATCHDOG        = 1            -- Check this often if the timtout has been exceeded
  POLLTIMEBUTTONS     = .5           -- Polls while cycling through buttons table at this interval
  POLLTIMEMETERS      = 5         -- Polling for meters, etc.
  POLLTIMESETTINGS    = 122            -- Polls while cycling through settings table at this interval
  ]]--
  
  -- Debugging Enable/Disable
  DEBUGENABLE         = 0             -- Enable General Debugging
  DEBUGLOG            = 0             -- Enable debug messages to be written to log on core



--[[
 The polling of the amplifier button states is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of setting and meter polling.
]]--

  AMPBUTTONS = {
    {index = 6,  name = 'Power',  subindex = 1, parameter = '',     state = 99, enabled = 0},
    {index = 47, name = 'Mute',   subindex = 1, parameter = '2,1',  state = 99, enabled = 0},  
    {index = 48, name = 'Mute',   subindex = 2, parameter = '2,2',  state = 99, enabled = 0},
    {index = 49, name = 'Mute',   subindex = 3, parameter = '2,3',  state = 99, enabled = 0},
    {index = 50, name = 'Mute',   subindex = 4, parameter = '2,4',  state = 99, enabled = 0}
  }


--[[
 The polling of the amplifier settings is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of button and meter polling.
]]--

  -- TODO: Update the settings table (and this description)
  AMPSETTINGS = {
    --"xx", "xx", "xx", "xx", "xx", "xx", "xx", "xx"
  }
  
  
  
  --[[
 The polling of the amplifier meters is performed in a round robbin format.
 Each time the poll period occurs, the next parameter in the list below is requested 
 from the device.  So, if a poll rate of 1 second is set and there are 6 parameters
 to poll in total, each will only be updated every 6 seconds.  This takes place
 independant of button and setting polling.
]]--

  -- TODO: Update the meter polling
  AMPMETERS = {
    {index = 4,  name = 'Level',  subindex = 1, parameter = '1',    state = 99},  --inputs
    {index = 20, name = 'Level',  subindex = 1, parameter = '2',    state = 99}   --outputs
  }
  

  
--   ^^^^   'Constant' (variable) Definitions   ^^^^   --
---------------------------------------------------------



---------------------------------------------------------
--   vvvv      Global Variable Definitions      vvvv   --


  waitForResponse     = 0
  lastPolledButton    = 0
  lastPolledSetting   = 0
  lastPolledMeter     = 0


--   ^^^^      Global Variable Definitions      ^^^^   --
---------------------------------------------------------



---------------------------------------------------
--   vvvv   Function/Method Definitions   vvvv   --


  
  function Debug (incoming)
  -- Send a string out to Debug (date/time stamp)
    if (DEBUGENABLE == 1) then
      print( os.date() .. " - " .. incoming)
      
      if (DEBUGLOG == 1) then
        Log.Message(incoming)
      end
    end
  end



  -- Load initial values and reset the serial port
  function Status(state)
  
    --Debug('Entered Status')
    
    --  0 = OK – Green,           1 = Compromised – Orange,     2 = Fault – Red,
    --  3 = Not Present – Gray,   4 = Missing – Red,            5 = Initializing – Blue
    
    -- Update status indicator
    if      state == 'OK'           then Controls["Status"].Value = 0
      elseif  state == 'Compromised'  then Controls["Status"].Value = 1
      elseif  state == 'Fault'        then Controls["Status"].Value = 2
      elseif  state == 'Not Present'  then Controls["Status"].Value = 3
      elseif  state == 'Missing'      then Controls["Status"].Value = 4
      elseif  state == 'Initializing' then Controls["Status"].Value = 5
      else Log.Error(MYNAME .. '(Status) State not recognized')
    end
  
  end
  
  
  
  -- Load initial values and reset the serial port
  function Watchdog()
    
    -- If no responese reset port
    --Debug("WaitForResponse: " .. waitForResponse)
    if (waitForResponse >= WATCHDOGTHRESHOLD) then
      
      waitForResponse = 0     -- Stop re-trigger
      Status('Initializing')  -- Update status indicator
      
      -- Instantiate the device communications
      Debug('(Watchdog) Resetting port')
      Log.Error(MYNAME .. '(Watchdog) Resetting port')
      DeviceConnect()
    end
  
  end



  -- Poll Buttons from Device
  -- Necessary to allow user feedback to update (slow)
  function PollButtons()
    
    -- Loop through defined parameters
    lastPolledButton = lastPolledButton + 1
    if (lastPolledButton > #AMPBUTTONS) then lastPolledButton = 1 end
    
    -- Form the proper query
    if (AMPBUTTONS[lastPolledButton].name == 'Mute') then
      --Debug("TX: GM " .. AMPBUTTONS[lastPolledButton].parameter)
      DeviceTx("GM " .. AMPBUTTONS[lastPolledButton].parameter)
    elseif (AMPBUTTONS[lastPolledButton].name == 'Power') then
      --Debug("TX: GY")
      DeviceTx("GY")
    end
  end



  -- Poll meter state from Device
  function PollMeters()
     
    -- Loop through defined parameters
    lastPolledMeter = lastPolledMeter + 1
    if (lastPolledMeter > #AMPMETERS) then lastPolledMeter = 1 end

    -- Send the query
    DeviceTx("GL " .. AMPMETERS[lastPolledMeter].parameter)
  end



  -- Validate IP address and flag to start connection
  function ValidIp(ip)
    
    local ipChunks = {ip:match("(%d+)%.(%d+)%.(%d+)%.(%d+)")}
    if (#ipChunks == 4) then
      for _,v in pairs(ipChunks) do
        if (tonumber(v) < 0 or tonumber(v) > 255) then
          return 0
        end
      end
     
      return 1
    else
      return 0
    end
  end



  -- transmit a message to the device
  function DeviceTx(incoming)
  
    --Debug("TX: "..incoming)
    error = ETHERNET.socket:Write(incoming .. EOM)
   
    if error then
      Debug('ERROR (DeviceTx): ' .. error)
      Log.Error(MYNAME .. '(DeviceTx Error): ' .. error)      
      DeviceDisconnect()
    else
      waitForResponse = waitForResponse + 1         -- Count toward watchdog
    end
  end
  
  
  
  -- Change the color of an LED indicator
  function LedColor (value)
    local myColor
    
    if value <= -60 then
      myColor = 'LightGray'     -- No signal
    elseif value < -20 then
      myColor = 'Green'         -- Normal
    elseif value < -6 then
      myColor = 'Yellow'        -- Medium
    elseif value < -2 then
      myColor = 'Orange'        -- High
    else
      myColor = 'Red'           -- Clipping?
    end
    
    return myColor
  end
  
  
  
  -- Change enabled state of buttons
  function EnableChannel (myChannel, myState)
  
    -- Find the button properties in question
    for i = 1, #AMPBUTTONS do
      -- Found a match
      if (AMPBUTTONS[i].name == 'Mute') and (AMPBUTTONS[i].subindex == myChannel) then
        AMPBUTTONS[i].enabled = myState
        
        if myState == 1 then
          Controls['Input Signal'][myChannel].IsDisabled  = false
         
          Controls['Fault'][myChannel].IsDisabled         = false
          Controls['Output Meter'][myChannel].IsDisabled  = false
          --(Basic Version) Controls['Output Mute'][myChannel].IsDisabled   = false
        else
          Controls['Input Signal'][myChannel].IsDisabled  = true

          Controls['Fault'][myChannel].IsDisabled         = true
          Controls['Output Meter'][myChannel].IsDisabled  = true
          ---(Basic Version) Controls['Output Mute'][myChannel].IsDisabled   = true
          
          --Clear fault indicators
          Controls['Fault'][myChannel].Boolean            = false
        end
      end
    end
  end



  function DisableControls (state)

    if state == 1 then
      myDisabled  = true
      myColor     = 'LightGray'
      myBoolean   = false
      
      -- Clear amp setting table
      AMPSETTINGS = {  }
      
    else
      myDisabled  = false
      myColor     = 'Green'
      myBoolean   = false
    end
    
    -- Ignor Controls (Basic Version)
    --[[
    -- Initialize controls (disable until connection)
    Controls['Toggle Standby'].Boolean      = myBoolean
    Controls['Toggle Standby'].IsDisabled   = myDisabled
    Controls['Standby'].Boolean             = myBoolean
    Controls['Standby'].IsDisabled          = myDisabled
    Controls['Power'].Boolean               = myBoolean
    Controls['Power'].IsDisabled            = myDisabled
    ]]--
    
    for i = 1, MaxChannels do
      EnableChannel(i, 0)

      
      if (i % 2) == 0 then
        Controls['Mono'][i/2].Boolean           = myBoolean
        Controls['Mono'][i/2].IsDisabled        = myDisabled
        Controls['Mono'][i/2].Color             = myColor
        
        Controls['V-Bridge'][i/2].Boolean       = myBoolean
        Controls['V-Bridge'][i/2].IsDisabled    = myDisabled
        Controls['V-Bridge'][i/2].Color         = myColor
        
        Controls['I-Share'][i/2].Boolean        = myBoolean
        Controls['I-Share'][i/2].IsDisabled     = myDisabled
        Controls['I-Share'][i/2].Color          = myColor
      
      end

      if (i % 4) == 0 then
        Controls['Quad Mode'].Boolean      = myBoolean 
        Controls['Quad Mode'].IsDisabled   = myDisabled  
        Controls['Quad Mode'].Color        = myColor
      end
    end
  
  end
  
  

  -- Clear all fault indicators
  function ClearFaults()
    
    Debug("Clearing all fault indicators")
    for i, myControl in ipairs( Controls['Fault']) do
      myControl.Boolean = false
    end
  end
  
  
  
--   ^^^^   Function/Method Definitions   ^^^^   --
---------------------------------------------------






------------------------------------------------------
--   vvvv   Classes/Object-ish Definitions   vvvv   --



 --v   Serial Object/Handlers   v--

-- Sockeet Event Handler (state changes, data, errors, etc)
  ETHERNET.socket.EventHandler = function(mySocket, myEvent, myError)
    
    if myEvent == TcpSocket.Events.Connected then
      
      Debug ('Socket Connected: ' .. ETHERNET.ip.String)
      
      -- Send initial setup parameters to amplifier (channel fault setup)
      Log.Error(MYNAME .. '(Socket) Init connection has cleared all faults')
      DeviceTx('CF')        -- Clear Alarm/Faults
      DeviceTx('SR O')      -- Set Alarm Reporting On
      DeviceTx('SF O')      -- Set Fault Reporting On
      DeviceTx('GC')        -- Grab Channel Configuration
      
      -- Preset watch dog (a few of the above sends don't respond anything)
      waitForResponse = waitForResponse - 2
      
      -- Turn on Polling
      TimerPollSettings:Start(POLLTIMESETTINGS)
      --(Basic Version) TimerPollButtons:Start(POLLTIMEBUTTONS)
      TimerPollMeters:Start(POLLTIMEMETERS)
      
      -- Enable Controls
      Status('OK')           -- Update status indicator
      DisableControls(0)
      
    elseif myEvent == TcpSocket.Events.Reconnect then
      Debug ('Socket Reconnecting ' )
      Status('Initializing') -- Update status indicator
      DisableControls(1)
      
    elseif myEvent == TcpSocket.Events.Data then
      
      -- ControlSpace protocol dictates each command terminated with 0x0D (CR)
      local incoming = mySocket:ReadLine( TcpSocket.EOL.Any )
      
      --Test responses
      if string.match(incoming, string.char(06)) then     --Ack (to CF command)
        waitForResponse = waitForResponse - 1   -- ACK the Message
        Status('OK')          -- Update status indicator
        ClearFaults()
        
      elseif (#incoming > 2) then                         -- All other response
        waitForResponse = waitForResponse - 1   -- ACK the Message
        Status('OK')          -- Update status indicator
        
        --Debug('RX: ' .. incoming)
        ParseRx(incoming)
      end 
      
    elseif myEvent == TcpSocket.Events.Closed then
      Debug ('Socket Closed by remote')
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    elseif myEvent == TcpSocket.Events.Error then
      
      Debug ('ERROR (SocketRx): Closed due to error: '.. myEvent)
      Log.Error(MYNAME .. '(SocketRx): ' .. myError)
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      ETHERNET.socket:Disconnect()
      
      waitForResponse = WATCHDOGTHRESHOLD   -- Force Watchdog Reset
      Status('Compromised')                 -- Update status indicator
      
    elseif myEvent == TcpSocket.Events.Timeout then
      Debug ('Socket Closed due to timeout')
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    else
      Debug ('Unknown Socket Event: '.. myEvent)
      Status('Missing')                     -- Update status indicator
      DisableControls(1)
      
    end
  end



  -- Instantiate the port and start listening
  function DeviceConnect()
    
    -- Stop Polling (start again in socket connect)
    --(Basic Version) TimerPollButtons:Stop()
    TimerPollSettings:Stop()
    TimerPollMeters:Stop()
    DisableControls(1)
    
    Debug ('Closing Socket - Change of IP?')
    ETHERNET.socket:Disconnect()
 
    -- Check for Valid IP
    if (1 == ValidIp(ETHERNET.ip.String)) then
      
      Debug ('Socket Connecting: ' .. ETHERNET.ip.String)
      Log.Error(MYNAME .. '(Socket) Connecting: ' .. ETHERNET.ip.String)
      
      -- Start the connection
      ETHERNET.socket:Connect(ETHERNET.ip.String, ETHERNET.port)
       
    else
      
      Debug ('Socket Closed - Invalid IP')
      Log.Error(MYNAME .. '(Socket) Closed - Invalid IP')
    end

  end



  -- Closes the port and stops listening
  function DeviceDisconnect()
    Socket:Disconnect()
    
    Debug ('Socket Disconnect command sent')
    Log.Error(MYNAME .. '(Socket) Disconnect command sent')
  end

  
  
  -- Parse responses from the socket handler
  function ParseRx(incoming)
  
    --trim white space from start of message
    while (incoming:sub(1,1) == "") do
      incoming = incoming:sub(2)
    end
    
    -- Response from Meters Query
    if incoming:sub(1, 2) == "GL" then

      --Parse Response: Signal Level "GL 1 [4a,4a,4a,4a,4a,4a,4a,4a]"
      local slot, channel1, channel2, channel3, channel4 = string.match(incoming,'GL (%d) %[(%x+),(%x+),(%x+),(%x+)%]' )

      if slot == '1' then
      
        --Used if indicator is an LED
        Controls['Input Signal'][1].Color =  LedColor( (tonumber(channel1, 16) / 2) - 60)
        Controls['Input Signal'][2].Color =  LedColor( (tonumber(channel2, 16) / 2) - 60)
        Controls['Input Signal'][3].Color =  LedColor( (tonumber(channel3, 16) / 2) - 60)
        Controls['Input Signal'][4].Color =  LedColor( (tonumber(channel4, 16) / 2) - 60)
        
        
        --Used if indicator is a meter
        --[[
        Controls['Input Signal'][1].Value = (tonumber(channel1, 16) / 2) - 60 
        Controls['Input Signal'][2].Value = (tonumber(channel2, 16) / 2) - 60 
        Controls['Input Signal'][3].Value = (tonumber(channel3, 16) / 2) - 60 
        Controls['Input Signal'][4].Value = (tonumber(channel4, 16) / 2) - 60
        ]]--
        
      elseif slot == '2' then
        
        --Used if indicator is an LED
        Controls['Output Meter'][1].Color =  LedColor( (tonumber(channel1, 16) / 2) - 60)
        Controls['Output Meter'][2].Color =  LedColor( (tonumber(channel2, 16) / 2) - 60)
        Controls['Output Meter'][3].Color =  LedColor( (tonumber(channel3, 16) / 2) - 60)
        Controls['Output Meter'][4].Color =  LedColor( (tonumber(channel4, 16) / 2) - 60)
        
        --Used if indicator is a meter
        --[[
        Controls['Output Meter'][1].Value = (tonumber(channel1, 16) / 2) - 60
        Controls['Output Meter'][2].Value = (tonumber(channel2, 16) / 2) - 60
        Controls['Output Meter'][3].Value = (tonumber(channel3, 16) / 2) - 60
        Controls['Output Meter'][4].Value = (tonumber(channel4, 16) / 2) - 60
        ]]--
      end
      
      
    -- Response from Power Query
    --if string.find(incoming, "GY") then  --(Drop the find for lighter method)
    elseif incoming:sub(1, 2) == "GY" then
      --Debug("RX Power: " ..incoming)

      -- Ignore Power (Basic Version)
      --[[
      
      -- Parse Response: Power Status "GY N"
      local state = string.match(incoming,"GY (%a)")
      
      -- Update controls
      if (state == 'N') and (Controls['Power'].Boolean == false) then
        Controls['Standby'].Boolean = false
        Controls['Power'].Boolean   = true
        --Debug('Power Status: On')
      
      elseif (state == 'S') and (Controls['Power'].Boolean == true) then
        Controls['Standby'].Boolean = true
        Controls['Power'].Boolean = false
        --Debug('Power Status: Standby')
      end
      ]]--
    
    -- Response from Fault (unsolicited)
    elseif incoming:sub(1, 2) == "GF" then   
      local state = string.match(incoming,"GF (%a)")
      
      if (state == 'F') and (Controls['Fault'][5].Boolean == false) then
        Controls['Fault'][5].Boolean = true
        Log.Error(MYNAME .. '(Fault Status) In Fault (New)')
        Debug('Fault Status: In Fault!')
        
      elseif (state == 'F') and (Controls['Fault'][5].Boolean == true) then
        Log.Error(MYNAME .. '(Fault Status) In Fault (Repeat)')
        Debug('Fault Status: In Fault! (repeat)')
      
      elseif (state == 'C') and (Controls['Fault'][5].Boolean == true) then
        Controls['Fault'][5].Boolean = false
        Log.Error(MYNAME .. '(Fault Status) Cleared')
        Debug('Fault Status: Cleared')

      elseif (state == 'C') and (Controls['Fault'][5].Boolean == false) then
        Debug('Fault Status: Cleared (repeat)')
        
      end
   

    -- Response from Mute Button Query
    elseif incoming:sub(1, 2) == "GM" then
    
    --Ignore button responses (Basic Version)
    --[[
      -- Parse Response: Mute Status "GM 2,1,U"
      local slot, channel, state = string.match(incoming,"GM (%d),(%d),(%a)")
      
      if tonumber(slot) > 2 then
        channel = channel + 4
      end
      
      -- Only update button if it's out of state (amp initiated change)
      if (state == 'U') and (Controls['Output Mute'][tonumber(channel)].Boolean == true) then
        AMPBUTTONS[channel + 1].state = 0                      -- store state
        Controls['Output Mute'][tonumber(channel)].Boolean = false   -- update button
        Debug('Mute Status: '.. channel ..' Status: Unmuted')
            
      elseif (state == 'M') and (Controls['Output Mute'][tonumber(channel)].Boolean == false) then
        AMPBUTTONS[channel + 1].state = 1                      -- store state
        Controls['Output Mute'][tonumber(channel)].Boolean = true    -- update button
        Debug('Mute Status: '.. channel ..' Status: Muted')
      end
    ]]--
    
    -- Response from Reporting Status (unsolicited)
    elseif incoming:sub(1, 2) == "GR" then
    
      -- Parse Response: Alarm Reporting/Status "GR c,s,t,x"
      local statusChannel, statusSeverity, statusType, statusCondition = string.match(incoming,'GR (%d+),(%a+),(%a+),(%a+)' )
      
      --Debug (incoming)
      --Debug("statusChannel ".. statusChannel)
      
      --Debug("statusSeverity ".. statusSeverity)
      --Debug("statusType ".. statusType)
      --Debug("statusCondition ".. statusCondition)
      
      -- Form log message
      local myMessage = "(Alarm Reporting) "

      -- Handle severity
      if (statusSeverity == 'W') then
        myMessage = myMessage .. "WARNING "
      elseif (statusSeverity == 'F') then
        myMessage = myMessage .. "FAULT "
      elseif (statusSeverity == 'S') then
        myMessage = myMessage .. "SYSTEM message  "
      end
      
      -- Handle condition
      if (statusCondition == 'S') then
        myMessage = myMessage .. "activated "
        Controls['Fault'][tonumber(statusChannel)].Boolean = true
      elseif (statusCondition == 'C') then
        myMessage = myMessage .. "cleared "
        Controls['Fault'][tonumber(statusChannel)].Boolean = false
      end
      
      myMessage = myMessage .. "on channel " .. statusChannel .. ": "

      -- Handle Type
      if (statusType == 'N') then
        myMessage = myMessage .. "No alarm "
      elseif (statusType == 'O') then
        myMessage = myMessage .. "Open circuit "
      elseif (statusType == 'S') then
        myMessage = myMessage .. "Short circuit "
      elseif (statusType == 'A') then
        myMessage = myMessage .. "AC Loss "
      elseif (statusType == 'D') then
        myMessage = myMessage .. "Digital audio loss "
      elseif (statusType == 'I') then
        myMessage = myMessage .. "I-Share jumper missing "
      elseif (statusType == 'L') then
        myMessage = myMessage .. "Limiting "
      elseif (statusType == 'C') then
        myMessage = myMessage .. "Clip "
      elseif (statusType == 'P') then
        myMessage = myMessage .. "Protection "
      elseif (statusType == 'Z') then
        myMessage = myMessage .. "Something unknown (other) "
      end

     
      -- Write to Log
      Log.Message(MYNAME .. myMessage)
      Debug(MYNAME .. myMessage)
    
    
    -- Response from channel configuration (only on connection)
    elseif incoming:sub(1, 2) == "GC" then
      --Debug("Configuration Raw: ".. incoming)
      OnConfig(incoming)
      
    -- Response of unknown type
    else
      Debug('Unhandled Response: ' .. incoming)
    end

  end
  
  

  -- Mute button handler
  -- Ignore button handler (Basic Version)
  --[[
  function OnMute (ctl)
    TimerPollButtons:Stop()

    --find parameter to send
    for i = 1, #AMPBUTTONS do
      if AMPBUTTONS[i].index == ctl.Index then
    
        if (ctl.Boolean == true) and (AMPBUTTONS[i].state ~= 1) then
          --Debug('TX: SM '.. AMPBUTTONS[i].parameter ..',M')
          AMPBUTTONS[i].state = 1
          DeviceTx('SM '.. AMPBUTTONS[i].parameter ..',M')
        elseif (ctl.Boolean == false) and (AMPBUTTONS[i].state ~= 0) then
          --Debug('TX: SM '.. AMPBUTTONS[i].parameter ..',U')
          AMPBUTTONS[i].state = 0
          DeviceTx('SM '.. AMPBUTTONS[i].parameter ..',U')
        end
      end
    end
    
    TimerPollButtons:Start(1)    -- Delay the next poll
  end
  ]]--
  
  
  
  -- Process the channel configurations
  function OnConfig (myConfig)
      
    -- Parse Response: Alarm Reporting/Status "GC IN,IN,BL,BL,Q7,Q7,Q7,Q7"

    -- Extract each number or letter pair (after GC) and build and array of responses
    local myMatch = "%w%w"
     for line, _ in myConfig:gmatch(myMatch) do
        if line ~= "GC" then
          table.insert(AMPSETTINGS, line)
        end
     end
    
    --[[
    Debug("Parsing original String : " .. myConfig)
    Debug("Entered Config parsing 1: " .. AMPSETTINGS[1])
    Debug("Entered Config parsing 2: " .. AMPSETTINGS[2])
    Debug("Entered Config parsing 3: " .. AMPSETTINGS[3])
    Debug("Entered Config parsing 4: " .. AMPSETTINGS[4])
    ]]--
    
    -- Evaluate the first 4 channels
    if ( string.sub(AMPSETTINGS[1], 1, 1) == 'Q') then
      --Debug("Quad 1 config received")
      
      -- Light the Quad LED and update others
      Controls['Quad Mode'][1].Boolean  = true
      EnableChannel (1, 1)
      
      if (string.sub(AMPSETTINGS[1], 2, 2) == 'L') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      elseif (string.sub(AMPSETTINGS[1], 2, 2) == '7') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      elseif (string.sub(AMPSETTINGS[1], 2, 2) == '1') then
        Controls['I-Share'][1].Boolean  = true
        Controls['I-Share'][2].Boolean  = true
      end
      
    else
    
      -- Update the first channel pair (1-2)
      if( string.sub(AMPSETTINGS[1], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 1/2")

        -- Light the Bridge LED and update others
        Controls['V-Bridge'][1].Boolean  = true
        EnableChannel (1, 1)
        
      elseif( string.sub(AMPSETTINGS[1], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 1/2")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][1].Boolean  = true
        EnableChannel (1, 1)
        
      elseif (AMPSETTINGS[1]:sub(1,1) == 'I' and AMPSETTINGS[2]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 1/2")
        
        -- Light the Mono LED and update others
        Controls['Mono'][1].Boolean       = true
        EnableChannel (1, 1)
        EnableChannel (2, 1)
      end

      -- Update the second channel pair (3-4)
      if( string.sub(AMPSETTINGS[3], 1, 1) == 'B') then
        --Debug("Bridged config for Channel 3/4")

        -- Light the Bridge LED and update others
        Controls['V-Bridge'][2].Boolean  = true
        EnableChannel (3, 1)
                
      elseif( string.sub(AMPSETTINGS[3], 1, 1) == 'P') then
        --Debug("Bridged config for Channel 3/4")
        
        -- Light the Bridge LED and update others
        Controls['I-Share'][2].Boolean  = true
        EnableChannel (3, 1)
        
      elseif (AMPSETTINGS[3]:sub(1,1) == 'I' and AMPSETTINGS[4]:sub(1,1) == 'I') then
        --Debug("Mono config for Channel 3/4")
        
        -- Light the Mono LED and update others
        Controls['Mono'][2].Boolean       = true
        EnableChannel (3, 1)
        EnableChannel (4, 1)
      end
    end
  
  end



--   ^^^^   Classes/Object-ish Definitions   ^^^^   --
------------------------------------------------------



------------------------------------------------------
--   vvvv   Controls/Button Event Handlers   vvvv   --


  -- Change of IP address
  Controls['IP Address'].EventHandler = function(ctl)
    DeviceConnect()                       -- Handles reconnect based on current port state
    waitForResponse = WATCHDOGTHRESHOLD   -- Force watchdog to reset port
  end



  --Power Button Handler
  -- Ignore button handler (Basic Version)
  --[[
  Controls['Toggle Standby'].EventHandler = function(ctl)
    local sendstring = "SY "..tostring(Controls['Power'].Boolean and 'S' or 'N')
    Debug(sendstring)
    DeviceTx(sendstring)
  end

  -- Mute Button Handler
  for i = 1, #Controls['Output Mute'] do
    Controls['Output Mute'][i].EventHandler = OnMute
  end
  
  --Fault Clear button handler
  Controls['Fault Clear'].EventHandler = function(ctl)
    Log.Error(MYNAME .. 'User has cleared all faults')
    DeviceTx('CF')
  end
  ]]--


--   ^^^^   Controls/Button Event Handlers   ^^^^   --
------------------------------------------------------

 
------------------------------------
--   vvvv   Main Program   vvvv   --

  Status('Initializing')  -- Update status indicator
  
  -- Initialize controls (disable until connection)
  DisableControls(1)
    
  -- Setup Watchdog to poll device and track responses
  TimerWatchdog = Timer.New()
  TimerWatchdog.EventHandler = Watchdog         -- Resets serial and creates Zones (start timer on error)
  TimerWatchdog:Start(POLLWATCHDOG)
  
  -- Setup polling timers.  Start them in the connection event.
  --(Basic Version) TimerPollButtons = Timer.New()
  --(Basic Version) TimerPollButtons.EventHandler = PollButtons
  
  TimerPollSettings = Timer.New()
  TimerPollSettings.EventHandler = function () DeviceTx('GC') end
  --TimerPollSettings.EventHandler = PollSettings

  TimerPollMeters = Timer.New()
  TimerPollMeters.EventHandler = PollMeters

  waitForResponse = WATCHDOGTHRESHOLD         -- Force watchdog
  
  Debug("Script Started...")


--   ^^^^   Main Program   ^^^^   --
------------------------------------


  ----------------------------------------------------------------------------------------------------
end
end