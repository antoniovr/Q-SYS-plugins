-----------------------------------------------------------------------------------------------------------------------
-- PLUGIN INFORMATION
-----------------------------------------------------------------------------------------------------------------------
PluginInfo = {
  Name = "Control Concepts Inc.~Utilities~Custom Keyboard v1.0", -- Change when major rev
  Version = "1.0",
  BuildVersion = "1.0.0.113",
  Id = "c5ccaf58-4ceb-4584-9262-bd44266c1a64",
  Description = "Full customizable keyboard with custom buttons",
  Model = "CCI Custom Keyboard v1.0",
  Author = "Control Concepts Inc."
}

-----------------------------------------------------------------------------------------------------------------------
-- PLUGIN NAME & COLOR
-----------------------------------------------------------------------------------------------------------------------

function GetProperties()
end

function GetPrettyName(props)
  return PluginInfo.Model
end

function GetColor(props)
  return { 0, 127, 255 }
end

Constants = {
  CONTAINER_SIZE = { 768, 505 },

  STANDARD_BTN_SIZE = { 40, 40 },
  STANDARD_KEYPAD_BTN_SIZE = { 40, 50 },
  CUSTOM_BTN_TEXTFIELD_SIZE = { 221, 30 },

  TEXT_SIZE = 13,
  SMALL_TEXT_SIZE = 11,
  TEXT_OUTPUT_SIZE = 21,
  HEADER_TEXT_SIZE = 26,

  KEYBOARD_ANCHOR_POINT = { x = 15, y = 153 },
  SYMBOL_ANCHOR_POINT = { x = 15, y = 368 },
  KEYPAD_ANCHOR_POINT = { x = 632, y = 153 },
  CUSTOM_BUTTON_ANCHOR_POINT = { x = 460, y = 368 },
  CUSTOM_BUTTON_LABEL_SIZE = { 71, 30 },
  CUSTOM_BUTTON_TEXTFIELD_SIZE = { 221, 30 },

  STANDARD_BTN_OFFSET = {
    { x = 0, y = 0 },   -- Row 1
    { x = 50, y = 40 }, -- Row 2
    { x = 60, y = 80 }, -- Row 3
    { x = 75, y = 120}  -- Row 4
  },

  SYMBOL_BTN_OFFSET = {
    { x = 0, y = 0 },   -- Row 1
    { x = 0, y = 40 },  -- Row 2
    { x = 80, y = 80 }  -- Row 3
  },

  KEYPAD_BTN_OFFSET = {
    { x = 0, y = 0 },   -- Row 1
    { x = 0, y = 50 },  -- Row 2
    { x = 0, y = 100 }  -- Row 3
  },

  CUSTOM_BTN_POSITION = {
    { 15, 313 },
    { 90, 313 },
    { 460, 313 },
    { 535, 313 }
  },

  CUSTOM_BTN_LABEL_Y_POS = {
    368,
    398,
    428,
    458
  },

  KEYBOARD_ROW_HEIGHT = 40,
  KEYPAD_ROW_HEIGHT = 50,

  LOGO = "" -- this error is okay. compiler handles image encoding
}

StandardButtonBuildOrder = {
  ["KB-Accent"] = {Legend = "~\x0A`", PrettyName = "Keyboard~Accent", Row = 1, Index = 1},
  ["KB-Num-1"] = {Legend = "!\x0A1", PrettyName = "Keyboard~1", Row = 1, Index = 2},
  ["KB-Num-2"] = {Legend = "@\x0A2", PrettyName = "Keyboard~2", Row = 1, Index = 3},
  ["KB-Num-3"] = {Legend = "#\x0A3", PrettyName = "Keyboard~3", Row = 1, Index = 4},
  ["KB-Num-4"] = {Legend = "$\x0A4", PrettyName = "Keyboard~4", Row = 1, Index = 5},
  ["KB-Num-5"] = {Legend = "%\x0A5", PrettyName = "Keyboard~5", Row = 1, Index = 6},
  ["KB-Num-6"] = {Legend = "^\x0A6", PrettyName = "Keyboard~6", Row = 1, Index = 7},
  ["KB-Num-7"] = {Legend = "&\x0A7", PrettyName = "Keyboard~7", Row = 1, Index = 8},
  ["KB-Num-8"] = {Legend = "*\x0A8", PrettyName = "Keyboard~8", Row = 1, Index = 9},
  ["KB-Num-9"] = {Legend = "(\x0A9", PrettyName = "Keyboard~9", Row = 1, Index = 10},
  ["KB-Num-0"] = {Legend = ")\x0A0", PrettyName = "Keyboard~0", Row = 1, Index = 11},
  ["KB-Minus"] = {Legend = "_\x0A-", PrettyName = "Keyboard~Minus", Row = 1, Index = 12},
  ["KB-Equals"] = {Legend = "+\x0A=", PrettyName = "Keyboard~Equals", Row = 1, Index = 13},
  ["KB-Q"] = {Legend = "Q", PrettyName = "Keyboard~Q", Row = 2, Index = 1},
  ["KB-W"] = {Legend = "W", PrettyName = "Keyboard~W", Row = 2, Index = 2},
  ["KB-E"] = {Legend = "E", PrettyName = "Keyboard~E", Row = 2, Index = 3},
  ["KB-R"] = {Legend = "R", PrettyName = "Keyboard~R", Row = 2, Index = 4},
  ["KB-T"] = {Legend = "T", PrettyName = "Keyboard~T", Row = 2, Index = 5},
  ["KB-Y"] = {Legend = "Y", PrettyName = "Keyboard~Y", Row = 2, Index = 6},
  ["KB-U"] = {Legend = "U", PrettyName = "Keyboard~U", Row = 2, Index = 7},
  ["KB-I"] = {Legend = "I", PrettyName = "Keyboard~I", Row = 2, Index = 8},
  ["KB-O"] = {Legend = "O", PrettyName = "Keyboard~O", Row = 2, Index = 9},
  ["KB-P"] = {Legend = "P", PrettyName = "Keyboard~P", Row = 2, Index = 10},
  ["KB-LeftBracket"] = {Legend = "{\x0A[", PrettyName = "Keyboard~Left Bracket", Row = 2, Index = 11},
  ["KB-RightBracket"] = {Legend = "}\x0A]", PrettyName = "Keyboard~Right Bracket", Row = 2, Index = 12},
  ["KB-A"] = {Legend = "A", PrettyName = "Keyboard~A", Row = 3, Index = 1},
  ["KB-S"] = {Legend = "S", PrettyName = "Keyboard~S", Row = 3, Index = 2},
  ["KB-D"] = {Legend = "D", PrettyName = "Keyboard~D", Row = 3, Index = 3},
  ["KB-F"] = {Legend = "F", PrettyName = "Keyboard~F", Row = 3, Index = 4},
  ["KB-G"] = {Legend = "G", PrettyName = "Keyboard~G", Row = 3, Index = 5},
  ["KB-H"] = {Legend = "H", PrettyName = "Keyboard~H", Row = 3, Index = 6},
  ["KB-J"] = {Legend = "J", PrettyName = "Keyboard~J", Row = 3, Index = 7},
  ["KB-K"] = {Legend = "K", PrettyName = "Keyboard~K", Row = 3, Index = 8},
  ["KB-L"] = {Legend = "L", PrettyName = "Keyboard~L", Row = 3, Index = 9},
  ["KB-Semicolon"] = {Legend = ":\x0A;", PrettyName = "Keyboard~Semicolon", Row = 3, Index = 10},
  ["KB-Apostrophe"] = {Legend = "\"\x0A\'", PrettyName = "Keyboard~Apostrophe", Row = 3, Index = 11},
  ["KB-Z"] = {Legend = "Z", PrettyName = "Keyboard~Z", Row = 4, Index = 1},
  ["KB-X"] = {Legend = "X", PrettyName = "Keyboard~X", Row = 4, Index = 2},
  ["KB-C"] = {Legend = "C", PrettyName = "Keyboard~C", Row = 4, Index = 3},
  ["KB-V"] = {Legend = "V", PrettyName = "Keyboard~V", Row = 4, Index = 4},
  ["KB-B"] = {Legend = "B", PrettyName = "Keyboard~B", Row = 4, Index = 5},
  ["KB-N"] = {Legend = "N", PrettyName = "Keyboard~N", Row = 4, Index = 6},
  ["KB-M"] = {Legend = "M", PrettyName = "Keyboard~M", Row = 4, Index = 7},
  ["KB-Comma"] = {Legend = "<\x0A,", PrettyName = "Keyboard~Comma", Row = 4, Index = 8},
  ["KB-Period"] = {Legend = ">\x0A.", PrettyName = "Keyboard~Period", Row = 4, Index = 9},
  ["KB-ForwardSlash"] = {Legend = "?\x0A/", PrettyName = "Keyboard~Forward Slash", Row = 4, Index = 10},
}

SymbolButtonBuildOrder = {
  ["SYM-Minus"] = {Legend = "-", PrettyName = "Symbols~Minus", Row = 1, Index = 1},
  ["SYM-ForwardSlash"] = {Legend = "/", PrettyName = "Symbols~Forward Slash", Row = 1, Index = 2},
  ["SYM-Colon"] = {Legend = ":", PrettyName = "Symbols~Colon", Row = 1, Index = 3},
  ["SYM-Semicolon"] = {Legend = ";", PrettyName = "Symbols~Semicolon", Row = 1, Index = 4},
  ["SYM-LeftParenthesis"] = {Legend = "(", PrettyName = "Symbols~Left Parenthesis", Row = 1, Index = 5},
  ["SYM-RightParenthesis"] = {Legend = ")", PrettyName = "Symbols~Right Parenthesis", Row = 1, Index = 6},
  ["SYM-Dollar"] = {Legend = "$", PrettyName = "Symbols~Dollar", Row = 1, Index = 7},
  ["SYM-Ampersand"] = {Legend = "&", PrettyName = "Symbols~Ampersand", Row = 1, Index = 8},
  ["SYM-At"] = {Legend = "@", PrettyName = "Symbols~At", Row = 1, Index = 9},
  ["SYM-Quotation"] = {Legend = "\"", PrettyName = "Symbols~Quotation", Row = 1, Index = 10},
  ["SYM-Tilde"] = {Legend = "~", PrettyName = "Symbols~Tilde", Row = 1, Index = 11},
  ["SYM-Percent"] = {Legend = "%", PrettyName = "Symbols~Percent", Row = 2, Index = 1},
  ["SYM-Comma"] = {Legend = ",", PrettyName = "Symbols~Comma", Row = 2, Index = 2},
  ["SYM-Question"] = {Legend = "?", PrettyName = "Symbols~Question", Row = 2, Index = 3},
  ["SYM-Exclamation"] = {Legend = "!", PrettyName = "Symbols~Exclamation", Row = 2, Index = 4},
  ["SYM-Apostrophe"] = {Legend = "\'", PrettyName = "Symbols~Apostrophe", Row = 2, Index = 5},
  ["SYM-LeftBracket"] = {Legend = "[", PrettyName = "Symbols~Left Bracket", Row = 2, Index = 6},
  ["SYM-RightBracket"] = {Legend = "]", PrettyName = "Symbols~Right Bracket", Row = 2, Index = 7},
  ["SYM-LeftCurlyBrace"] = {Legend = "{", PrettyName = "Symbols~Left Curly Brace", Row = 2, Index = 8},
  ["SYM-RightCurlyBrace"] = {Legend = "}", PrettyName = "Symbols~Right Curly Brace", Row = 2, Index = 9},
  ["SYM-Pound"] = {Legend = "#", PrettyName = "Symbols~Pound", Row = 2, Index = 10},
  ["SYM-Period"] = {Legend = ".", PrettyName = "Symbols~Period", Row = 2, Index = 11},
  ["SYM-Star"] = {Legend = "*", PrettyName = "Symbols~Star", Row = 3, Index = 1},
  ["SYM-Plus"] = {Legend = "+", PrettyName = "Symbols~Plus", Row = 3, Index = 2},
  ["SYM-Equals"] = {Legend = "=", PrettyName = "Symbols~Equals", Row = 3, Index = 3},
  ["SYM-Underscore"] = {Legend = "_", PrettyName = "Symbols~Underscore", Row = 3, Index = 4},
  ["SYM-Backslash"] = {Legend = "\\", PrettyName = "Symbols~Backslash", Row = 3, Index = 5},
  ["SYM-Line"] = {Legend = "|", PrettyName = "Symbols~Line", Row = 3, Index = 6},
  ["SYM-LessThan"] = {Legend = "<", PrettyName = "Symbols~Less Than", Row = 3, Index = 7},
}

KeypadButtonBuildOrder = {
  ["KP-1"] = {Legend = "1", PrettyName = "Keypad~1", Row = 1, Index = 1},
  ["KP-2"] = {Legend = "2", PrettyName = "Keypad~2", Row = 1, Index = 2},
  ["KP-3"] = {Legend = "3", PrettyName = "Keypad~3", Row = 1, Index = 3},
  ["KP-4"] = {Legend = "4", PrettyName = "Keypad~4", Row = 2, Index = 1},
  ["KP-5"] = {Legend = "5", PrettyName = "Keypad~5", Row = 2, Index = 2},
  ["KP-6"] = {Legend = "6", PrettyName = "Keypad~6", Row = 2, Index = 3},
  ["KP-7"] = {Legend = "7", PrettyName = "Keypad~7", Row = 3, Index = 1},
  ["KP-8"] = {Legend = "8", PrettyName = "Keypad~8", Row = 3, Index = 2},
  ["KP-9"] = {Legend = "9", PrettyName = "Keypad~9", Row = 3, Index = 3},
}

-----------------------------------------------------------------------------------------------------------------------
-- BUILD CONTROLS
-----------------------------------------------------------------------------------------------------------------------
function GetControls(props)
  local ctrls = {}

    table.insert(ctrls, {
      Name = "KeyboardTextIn",
      ControlType = "Indicator",
      IndicatorType = "Text",
      UserPin = true,
      PinStyle = "Input",
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "KeyboardTextOut",
      ControlType = "Indicator",
      IndicatorType = "Text",
      UserPin = true,
      PinStyle = "Output",
      Count = 1
    })
  
    -- Build standard sized keyboard buttons
  
    for k,_ in pairs(StandardButtonBuildOrder) do
      table.insert(ctrls, {
        Name = k,
        ControlType = "Button",
        ButtonType = "Momentary",
        UserPin = true,
        PinStyle = "Both",
        Count = 1
      })
    end
  
    -- Build other keyboard buttons
  
    table.insert(ctrls, {
      Name = "KB-Backslash",
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "Clear",
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "CapsLock",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "Shift",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "Enter",
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "EnterLock",
      ControlType = "Button",
      ButtonType = "Toggle",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "Backspace",
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "Space",
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
  
    -- Build Custom Buttons
  
    table.insert(ctrls, {
      Name = "CustomButton",
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both",
      Count = 4
    })
  
    table.insert(ctrls, {
      Name = "CustomButtonString",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Both",
      Count = 4
    })
  
  
    -- Build symbol buttons
  
    for k,_ in pairs(SymbolButtonBuildOrder) do
      table.insert(ctrls, {
        Name = k,
        ControlType = "Button",
        ButtonType = "Momentary",
        UserPin = true,
        PinStyle = "Both",
        Count = 1
      })
    end
  
    table.insert(ctrls, {
      Name = "SYM-Carrot",
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "SYM-GreaterThan",
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })
  
  
    -- Build keypad buttons
  
    for k,_ in pairs(KeypadButtonBuildOrder) do
      table.insert(ctrls, {
        Name = k,
        ControlType = "Button",
        ButtonType = "Momentary",
        UserPin = true,
        PinStyle = "Both",
        Count = 1
      })
    end
  
    table.insert(ctrls, {
      Name = "KP-0",
      ControlType = "Button",
      ButtonType = "Momentary",
      UserPin = true,
      PinStyle = "Both",
      Count = 1
    })

  return ctrls
end

-----------------------------------------------------------------------------------------------------------------------
-- BUILD GRAPHICS && LAYOUT
-----------------------------------------------------------------------------------------------------------------------
function GetControlLayout(props)
  local layout = {}
  local graphics = {}

    ------------------------------------------------
    -- LAYOUT VARIABLES
    ------------------------------------------------
    table.insert(graphics, {
      Type = "GroupBox",
      Fill = { 215, 215, 215 },
      StrokeWidth = 1,
      CornerRadius = 3,
      Position = {0,0},
      Size = Constants.CONTAINER_SIZE
    })
  
    function GetStandardButtonPosition(index, offset)
      local x = Constants.KEYBOARD_ANCHOR_POINT.x + ((index-1)* Constants.STANDARD_BTN_SIZE[1]) + offset.x
      local y = Constants.KEYBOARD_ANCHOR_POINT.y + offset.y
  
      local pos = {x,y}
  
      return pos
    end
  
    function GetSymbolButtonPosition(index, offset)
      local x = Constants.SYMBOL_ANCHOR_POINT.x + ((index-1)* Constants.STANDARD_BTN_SIZE[1]) + offset.x
      local y = Constants.SYMBOL_ANCHOR_POINT.y + offset.y
  
      local pos = {x,y}
  
      return pos
    end
  
    function GetKeypadButtonPosition(index, offset)
      local x = Constants.KEYPAD_ANCHOR_POINT.x + ((index-1)* Constants.STANDARD_KEYPAD_BTN_SIZE[1]) + offset.x
      local y = Constants.KEYPAD_ANCHOR_POINT.y + offset.y
  
      local pos = {x,y}
  
      return pos
    end
  
    table.insert(graphics, {
      Type = "Image",
      Image = Constants.LOGO,
      Position = { 17, 10 },
      Size = { 55, 55 },
    })
  
    layout["KeyboardTextIn"] = {
      PrettyName = "Keyboard Text In",
      Style = "Text",
      Color = { 245, 245, 245 },
      Position = { 15, 76 },
      Size = { 737, 54 },
      CornerRadius = 2,
      TextFontSize = Constants.TEXT_OUTPUT_SIZE,
      StrokeColor = { 105, 105, 105 },
      StrokeWidth = 1,
      Margin = 2
    }
  
    layout["KeyboardTextOut"] = {
      PrettyName = "Keyboard Text Out",
      Style = "None",
      Color = { 194, 194, 194 },
      Position = { 15, 76 },
      Size = { 737, 54 },
      TextFontSize = Constants.TEXT_OUTPUT_SIZE,
      StrokeColor = { 105, 105, 105 },
      StrokeWidth = 1,
      Margin = 2
    }
  
    table.insert(graphics, {
      Type = "Text",
      Text = "Custom Keyboard v"..PluginInfo.Version,
      TextSize = Constants.HEADER_TEXT_SIZE,
      IsBold = false,
      TextFontStyle = "Roboto",
      Color = { 51, 51, 51 },
      Position = { 165, 10 },
      Size = { 437, 55 },
      HTextAlign = "Center"
    })
  
    -- Build Standard Keyboard Buttons
    for k,v in pairs(StandardButtonBuildOrder) do
      layout[k] = {
        PrettyName = v.PrettyName,
        Style = "Button",
        Size = Constants.STANDARD_BTN_SIZE,
        Position = GetStandardButtonPosition(v.Index, Constants.STANDARD_BTN_OFFSET[v.Row]),
        CornerRadius = 2,
        StrokeWidth = 1,
        Margin = 2,
        Legend = v.Legend,
        TextFontSize = Constants.TEXT_SIZE
      }
    end
  
    layout["KB-Backslash"] = {
      PrettyName = "Keyboard~Backslash",
      Style = "Button",
      Size = {70, 40},
      Position = {545, 193},
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 2,
      Legend = "|\x0A\\",
      TextFontSize = Constants.TEXT_SIZE
    }
  
    layout["Clear"] = {
      PrettyName = "Clear",
      Style = "Button",
      Size = {50, 40},
      Position = {15, 193},
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 2,
      Legend = "Clear",
      TextFontSize = Constants.TEXT_SIZE
    }
  
    layout["CapsLock"] = {
      PrettyName = "Caps Lock",
      Style = "Button",
      Size = {60, 40},
      Position = {15, 233},
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 2,
      Legend = "Caps\x0ALock",
      TextFontSize = Constants.TEXT_SIZE
    }
  
    layout["Shift"] = {
      PrettyName = "Shift",
      Style = "Button",
      Size = {75, 40},
      Position = {15, 273},
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 2,
      Legend = "Shift",
      TextFontSize = Constants.TEXT_SIZE
    }
  
    layout["Backspace"] = {
      PrettyName = "Backspace",
      Style = "Button",
      Size = {80, 40},
      Position = {535, 153},
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 2,
      Legend = "Backspace",
      TextFontSize = Constants.TEXT_SIZE
    }
  
    layout["Enter"] = {
      PrettyName = "Enter",
      Style = "Button",
      Size = {100, 40},
      Position = {515, 233},
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 2,
      Legend = "Enter",
      TextFontSize = Constants.TEXT_SIZE
    }
  
    layout["EnterLock"] = {
      PrettyName = "Enter Lock",
      Style = "Button",
      Size = {125, 40},
      Position = {490, 273},
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 2,
      Legend = "Enter Lock",
      TextFontSize = Constants.TEXT_SIZE
    }
  
    layout["Space"] = {
      PrettyName = "Space",
      Style = "Button",
      Size = {290, 40},
      Position = {170, 313},
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 2,
      Legend = "Space",
      TextFontSize = Constants.TEXT_SIZE
    }
  
    -- Build custom button stuff
  
    for k,v in ipairs(Constants.CUSTOM_BTN_POSITION) do
      layout["CustomButton "..(k)] = {
        PrettyName = "Custom Button "..k,
        Style = "Button",
        Size = (k == 1 or k == 3) and {75,40} or {80,40},
        Position = {v[1], v[2]},
        CornerRadius = 2,
        StrokeWidth = 1,
        Margin = 2,
        Legend = "Custom Button\x0A"..k,
        TextFontSize = Constants.SMALL_TEXT_SIZE
      }
    end
  
    for k,v in ipairs(Constants.CUSTOM_BTN_LABEL_Y_POS) do
      table.insert(graphics, {
        Type = "Text",
        Text = "Custom\x0AButton "..k,
        TextSize = Constants.SMALL_TEXT_SIZE,
        IsBold = false,
        TextFontStyle = "Roboto",
        Color = {51,51,51},
        Position = { 460, v },
        Size = { 71, 30 },
        HTextAlign = "Right"
      })
    end
  
    for k,v in ipairs(Constants.CUSTOM_BTN_LABEL_Y_POS) do
      layout["CustomButtonString "..k] = {
        PrettyName = "Custom Button String "..k,
        Style = "Text",
        Color = { 255, 255, 255 },
        Position = { 531, v },
        Size = { 221, 30 },
        TextFontSize = Constants.SMALL_TEXT_SIZE,
        StrokeColor = { 105, 105, 105 },
        StrokeWidth = 1,
        Margin = 2
      }
    end
  
  
    -- Build Symbol Buttons
  
    for k,v in pairs(SymbolButtonBuildOrder) do
      layout[k] = {
        PrettyName = v.PrettyName,
        Style = "Button",
        Size = Constants.STANDARD_BTN_SIZE,
        Position = GetSymbolButtonPosition(v.Index, Constants.SYMBOL_BTN_OFFSET[v.Row]),
        CornerRadius = 2,
        StrokeWidth = 1,
        Margin = 2,
        Legend = v.Legend,
        TextFontSize = Constants.TEXT_SIZE
      }
    end
  
    layout["SYM-Carrot"] = {
      PrettyName = "Symbols~Carrot",
      Style = "Button",
      Size = {80, 40},
      Position = {15, 448},
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 2,
      Legend = "^",
      TextFontSize = Constants.TEXT_SIZE
    }
  
    layout["SYM-GreaterThan"] = {
      PrettyName = "Symbols~Greater Than",
      Style = "Button",
      Size = {80, 40},
      Position = {375, 448},
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 2,
      Legend = ">",
      TextFontSize = Constants.TEXT_SIZE
    }
  
    -- Build Keypad Buttons
  
    for k,v in pairs(KeypadButtonBuildOrder) do
      layout[k] = {
        PrettyName = v.PrettyName,
        Style = "Button",
        Size = Constants.STANDARD_KEYPAD_BTN_SIZE,
        Position = GetKeypadButtonPosition(v.Index, Constants.KEYPAD_BTN_OFFSET[v.Row]),
        CornerRadius = 2,
        StrokeWidth = 1,
        Margin = 2,
        Legend = v.Legend,
        TextFontSize = Constants.TEXT_SIZE
      }
    end
  
    layout["KP-0"] = {
      PrettyName = "Keypad~0",
      Style = "Button",
      Size = {120, 50},
      Position = {632, 303},
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 2,
      Legend = "0",
      TextFontSize = Constants.TEXT_SIZE
    }
    
  

  return layout, graphics
end

-----------------------------------------------------------------------------------------------------------------------
-- RUNTIME
-----------------------------------------------------------------------------------------------------------------------
if Controls then

  function string.append(source, str)
    local msg
    if string.IsNullOrEmpty(source) == false then
      msg = source..str
    else
      msg = str
    end
    
    return msg
  end
  
  function string.starts(s, prefix)
    return string.sub(s, 1, string.len(prefix)) == prefix
  end
  
  function string.IsNullOrEmpty(s)
    if s == nil or s == "" then
      return true
    else
      return false
    end
  end

  
  KeyboardLetterMap = {
    { Control = Controls["KB-Q"], Value = "q", ShiftValue = "Q" },
    { Control = Controls["KB-W"], Value = "w", ShiftValue = "W" },
    { Control = Controls["KB-E"], Value = "e", ShiftValue = "E" },
    { Control = Controls["KB-R"], Value = "r", ShiftValue = "R" },
    { Control = Controls["KB-T"], Value = "t", ShiftValue = "T" },
    { Control = Controls["KB-Y"], Value = "y", ShiftValue = "Y" },
    { Control = Controls["KB-U"], Value = "u", ShiftValue = "U" },
    { Control = Controls["KB-I"], Value = "i", ShiftValue = "I" },
    { Control = Controls["KB-O"], Value = "o", ShiftValue = "O" },
    { Control = Controls["KB-P"], Value = "p", ShiftValue = "P" },
    { Control = Controls["KB-A"], Value = "a", ShiftValue = "A" },
    { Control = Controls["KB-S"], Value = "s", ShiftValue = "S" },
    { Control = Controls["KB-D"], Value = "d", ShiftValue = "D" },
    { Control = Controls["KB-F"], Value = "f", ShiftValue = "F" },
    { Control = Controls["KB-G"], Value = "g", ShiftValue = "G" },
    { Control = Controls["KB-H"], Value = "h", ShiftValue = "H" },
    { Control = Controls["KB-J"], Value = "j", ShiftValue = "J" },
    { Control = Controls["KB-K"], Value = "k", ShiftValue = "K" },
    { Control = Controls["KB-L"], Value = "l", ShiftValue = "L" },
    { Control = Controls["KB-Z"], Value = "z", ShiftValue = "Z" },
    { Control = Controls["KB-X"], Value = "x", ShiftValue = "X" },
    { Control = Controls["KB-C"], Value = "c", ShiftValue = "C" },
    { Control = Controls["KB-V"], Value = "v", ShiftValue = "V" },
    { Control = Controls["KB-B"], Value = "b", ShiftValue = "B" },
    { Control = Controls["KB-N"], Value = "n", ShiftValue = "N" },
    { Control = Controls["KB-M"], Value = "m", ShiftValue = "M" }
  }
  
  KeyboardNumberMap = {
    { Control = Controls["KB-Num-1"], Value = "1", ShiftValue = "!" },
    { Control = Controls["KB-Num-2"], Value = "2", ShiftValue = "@" },
    { Control = Controls["KB-Num-3"], Value = "3", ShiftValue = "#" },
    { Control = Controls["KB-Num-4"], Value = "4", ShiftValue = "$" },
    { Control = Controls["KB-Num-5"], Value = "5", ShiftValue = "%" },
    { Control = Controls["KB-Num-6"], Value = "6", ShiftValue = "^" },
    { Control = Controls["KB-Num-7"], Value = "7", ShiftValue = "&" },
    { Control = Controls["KB-Num-8"], Value = "8", ShiftValue = "*" },
    { Control = Controls["KB-Num-9"], Value = "9", ShiftValue = "(" },
    { Control = Controls["KB-Num-0"], Value = "0", ShiftValue = ")" },
  }
  
  KeyboardSymbolMap = {
    { Control = Controls["KB-Accent"], Value = "`", ShiftValue = "~" },
    { Control = Controls["KB-Minus"], Value = "-", ShiftValue = "_" },
    { Control = Controls["KB-Equals"], Value = "=", ShiftValue = "+" },
    { Control = Controls["KB-LeftBracket"], Value = "[", ShiftValue = "{" },
    { Control = Controls["KB-RightBracket"], Value = "]", ShiftValue = "}" },
    { Control = Controls["KB-Semicolon"], Value = ";", ShiftValue = ":" },
    { Control = Controls["KB-Apostrophe"], Value = "\'", ShiftValue = "\"" },
    { Control = Controls["KB-Comma"], Value = ",", ShiftValue = "<" },
    { Control = Controls["KB-Period"], Value = ".", ShiftValue = ">" },
    { Control = Controls["KB-ForwardSlash"], Value = "/", ShiftValue = "?" },
    { Control = Controls["KB-Backslash"], Value = "\\", ShiftValue = "|" }
  }
  
  SymbolMap = {
    { Control = Controls["SYM-Minus"], Value = "-"},
    { Control = Controls["SYM-ForwardSlash"], Value = "/"},
    { Control = Controls["SYM-Colon"], Value = ":"},
    { Control = Controls["SYM-Semicolon"], Value = ";"},
    { Control = Controls["SYM-LeftParenthesis"], Value = "("},
    { Control = Controls["SYM-RightParenthesis"], Value = ")"},
    { Control = Controls["SYM-Dollar"], Value = "$"},
    { Control = Controls["SYM-Ampersand"], Value = "&"},
    { Control = Controls["SYM-At"], Value = "@"},
    { Control = Controls["SYM-Quotation"], Value = "\""},
    { Control = Controls["SYM-Tilde"], Value = "~"},
    { Control = Controls["SYM-Percent"], Value = "%"},
    { Control = Controls["SYM-Comma"], Value = ","},
    { Control = Controls["SYM-Question"], Value = "?"},
    { Control = Controls["SYM-Exclamation"], Value = "!"},
    { Control = Controls["SYM-Apostrophe"], Value = "\'"},
    { Control = Controls["SYM-LeftBracket"], Value = "["},
    { Control = Controls["SYM-RightBracket"], Value = "]"},
    { Control = Controls["SYM-LeftCurlyBrace"], Value = "{"},
    { Control = Controls["SYM-RightCurlyBrace"], Value = "}"},
    { Control = Controls["SYM-Pound"], Value = "#"},
    { Control = Controls["SYM-Period"], Value = "."},
    { Control = Controls["SYM-Star"], Value = "*"},
    { Control = Controls["SYM-Plus"], Value = "+"},
    { Control = Controls["SYM-Equals"], Value = "="},
    { Control = Controls["SYM-Underscore"], Value = "_"},
    { Control = Controls["SYM-Backslash"], Value = "\\"},
    { Control = Controls["SYM-Line"], Value = "|"},
    { Control = Controls["SYM-LessThan"], Value = "<"},
    { Control = Controls["SYM-GreaterThan"], Value = ">"},
    { Control = Controls["SYM-Carrot"], Value = "^"},
  }
  
  KeypadMap = {
    { Control = Controls["KP-1"], Value = "1"},
    { Control = Controls["KP-2"], Value = "2"},
    { Control = Controls["KP-3"], Value = "3"},
    { Control = Controls["KP-4"], Value = "4"},
    { Control = Controls["KP-5"], Value = "5"},
    { Control = Controls["KP-6"], Value = "6"},
    { Control = Controls["KP-7"], Value = "7"},
    { Control = Controls["KP-8"], Value = "8"},
    { Control = Controls["KP-9"], Value = "9"},
    { Control = Controls["KP-0"], Value = "0"},
  }
  
  
  KeyboardTextOut = Controls.KeyboardTextOut
  KeyboardTextIn = Controls.KeyboardTextIn
  Clear = Controls.Clear
  Backspace = Controls.Backspace
  Enter = Controls.Enter
  EnterLock = Controls.EnterLock
  Shift = Controls.Shift
  CapsLock = Controls.CapsLock
  
  HOLD_TIME = 1
  REPEAT_TIME = 0.5
  LastKey = ""
  LastControl = nil
  
  HoldTimer = Timer.New()
  
  CustomButton = {
    { Control = Controls.CustomButton[1], Value = "" },
    { Control = Controls.CustomButton[2], Value = "" },
    { Control = Controls.CustomButton[3], Value = "" },
    { Control = Controls.CustomButton[4], Value = "" }
  }
  
  CustomButtonString = {
    Controls.CustomButtonString[1],
    Controls.CustomButtonString[2],
    Controls.CustomButtonString[3],
    Controls.CustomButtonString[4],
  }
  
  
  HoldTimer.EventHandler = function ()
    if LastControl ~= nil then
      if LastControl.Boolean then
        if (LastKey == "Backspace") then
          DoBackspace()
        else
          AppendText(LastKey)
        end
        HoldTimer:Start(REPEAT_TIME)
      else
        HoldTimer:Stop()
      end
    end
  end
  
  function AppendText(s)
    KeyboardTextIn.String = string.append(KeyboardTextIn.String, s)
    
    if (EnterLock.Boolean) then
      KeyboardTextOut.String = KeyboardTextIn.String
    end
  end
  
  function DoBackspace()
    KeyboardTextIn.String = string.sub(KeyboardTextIn.String, 1, (string.len(KeyboardTextIn.String) - 1))
  
    if (EnterLock.Boolean) then
      KeyboardTextOut.String = KeyboardTextIn.String
    end
  end
  
  
  for k,v in ipairs(CustomButtonString) do
    v.EventHandler = function (ctl)
      if (string.IsNullOrEmpty(ctl.String) == false) then
        CustomButton[k].Control.Legend = ctl.String
        CustomButton[k].Value = ctl.String
      else
        CustomButton[k].Control.Legend = "Custom Button\x0A"..k
        CustomButton[k].Value = ""
      end
    end
  end
  
  for k,v in ipairs(CustomButton) do
    v.Control.EventHandler = function (ctl)
      if (ctl.Boolean) then
        if (string.IsNullOrEmpty(v.Value) == false) then
          AppendText(v.Value)
          LastKey = v.Value
          LastControl = ctl
          HoldTimer:Start(HOLD_TIME)
        end
      end
    end
  end
  
  for k,v in pairs(KeyboardLetterMap) do
    v.Control.EventHandler = function (ctl)
      if ctl.Boolean then
        if ((CapsLock.Boolean and Shift.Boolean) or (CapsLock.Boolean == false and Shift.Boolean == false)) then
          AppendText(v.Value)
        elseif ((CapsLock.Boolean and Shift.Boolean == false) or (CapsLock.Boolean == false and Shift.Boolean)) then
          AppendText(v.ShiftValue)
        end
        
        if (CapsLock.Boolean) then
          LastKey = v.ShiftValue
        else
          LastKey = v.Value
        end
  
        if (Shift.Boolean) then
          Shift.Boolean = false
        end
  
        LastControl = ctl
        HoldTimer:Start(HOLD_TIME)
      end
    end
  end
  
  for k,v in pairs(KeyboardNumberMap) do
    v.Control.EventHandler = function (ctl)
      if ctl.Boolean then
        if Shift.Boolean then
          AppendText(v.ShiftValue)
          Shift.Boolean = false
        else
          AppendText(v.Value)
        end
  
        LastKey = v.Value
        LastControl = ctl
        HoldTimer:Start(HOLD_TIME)
  
      end
    end
  end
  
  for k,v in pairs(KeyboardSymbolMap) do
    v.Control.EventHandler = function (ctl)
      if ctl.Boolean then
        if Shift.Boolean then
          AppendText(v.ShiftValue)
          Shift.Boolean = false
        else
          AppendText(v.Value)
        end
  
        LastKey = v.Value
        LastControl = ctl
        HoldTimer:Start(HOLD_TIME)
  
      end
    end
  end
  
  for k,v in pairs(SymbolMap) do
    v.Control.EventHandler = function (ctl)
      if ctl.Boolean then
        AppendText(v.Value)
  
        LastKey = v.Value
        LastControl = ctl
        HoldTimer:Start(HOLD_TIME)
      end
    end
  end
  
  for k,v in pairs(KeypadMap) do
    v.Control.EventHandler = function (ctl)
      if ctl.Boolean then
        AppendText(v.Value)
  
        LastKey = v.Value
        LastControl = ctl
        HoldTimer:Start(HOLD_TIME)
      end
    end
  end
  
  Controls.Clear.EventHandler = function (ctl)
    if ctl.Boolean then
      KeyboardTextIn.String = ""
  
      if EnterLock.Boolean then
        KeyboardTextOut.String = ""
      end
    end
  end
  
  Controls.Backspace.EventHandler = function (ctl)
    if ctl.Boolean then
      DoBackspace()
  
      LastKey = "Backspace"
      LastControl = ctl
      HoldTimer:Start(HOLD_TIME)
    end
  end
  
  Controls.Space.EventHandler = function (ctl)
    if ctl.Boolean then
      AppendText(" ")
  
      LastKey = " "
      LastControl = ctl
      HoldTimer:Start(HOLD_TIME)
    end
  end
  
  Controls.Enter.EventHandler = function (ctl)
    KeyboardTextOut.String = KeyboardTextIn.String
  end
  
  -- Startup
  
  for k,v in pairs(CustomButtonString) do
    if (string.IsNullOrEmpty(v.String) == false) then
      CustomButton[k].Control.Legend = v.String
      CustomButton[k].Value = v.String
    else
      CustomButton[k].Control.Legend = "Custom Button\x0A"..k
      CustomButton[k].Value = ""
    end
  end
  
  if (EnterLock.Boolean) then
    KeyboardTextOut.String = KeyboardTextIn.String
  end

end