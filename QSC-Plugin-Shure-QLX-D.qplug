-- Shure QLX-D
-- by Indiana University - Joshua Foster
-- June 2021

-- Information block for the plugin
PluginInfo = {
  Name = "Shure~Shure QLX-D",
  Version = "1.0",
  BuildVersion = "1.0.0.0",
  Id = "0e12a6f7-ff49-4aed-925c-67b59af51e45",
  Author = "Indiana_University",
  Description = "Plugin to Control and Get Feedback from Shure QLX-D Wireless Mic Recievers"  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Shure QLX-D Plugin Version " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Control","Battery", "Setup" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Base Model" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls, {
    Name = "IPAddress",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both",
  })
  table.insert(ctrls, {
    Name = "Status",
    ControlType = "Indicator",
    IndicatorType = "Status",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "UnitFirmware",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "ChannelName",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both",
  })
  table.insert(ctrls, {
    Name = "DeviceID",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "AudioGain",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both",
  })
  table.insert(ctrls, {
    Name = "Group-Channel",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Both",
  })
  table.insert(ctrls, {
    Name = "Frequency",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "BatteryType",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "BatteryLevel",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Min = 0,
    Max = 5,
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "TransmitterType",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "RFPower",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "TransmitterPowerLock",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "TransmitterMenuLock",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "Encryption",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "TransmitterMute",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "UnitMacAddress",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "BatteryCycle",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "BatteryRunTime",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "BatteryTemp",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "BatteryCharge",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "BatteryHealth",
    ControlType = "Text",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "RFLevel",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Min = 0,
    Max = 115,
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "AudioLevel",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Min = 0,
    Max = 50,
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "AntennaA",
    ControlType = "Indicator",
    IndicatorType = "Led",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "AntennaB",
    ControlType = "Indicator",
    IndicatorType = "Led",
    Count = 1,
    UserPin = true,
    PinStyle = "Output",
  })
  table.insert(ctrls, {
    Name = "EncryptionModeToggle",
    ControlType = "Button",
    ButtonType = "Trigger",
    Count = 1,
    UserPin = true,
    PinStyle = "Both",
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  local gaColor = {
      Black = {0,0,0}, --Black
      White = {255,255,255}, --White
      Green = {178,255,51}, --Shure Green
      LtGray = {204,204,204} --Light Gray
  }
  local gsCat1 = "Unit Information~"
  local gsCat2 = "Battery Information~"
  if CurrentPage == "Control" then
    table.insert(graphics,{
      Type = "GroupBox",
      Fill = gaColor.Black,
      CornerRadius = 5,
      StrokeWidth = 1,
      Position = {5,5},
      Size = {550,370}
    })
    Logo = ""
    table.insert(graphics,{
      Type = "Svg",
      Image = Logo,
      Position = {40,5},
      Size = {300,64},
      ZOrder = 1000
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "QLX-D",
      Position = {340, 5},
      Color = gaColor.Green,
      Size = {150,64},
      FontSize = 40,
      Font = "Open Sans",
      FontStyle = "Extrabold",
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "©",
      Position = {475, 20},
      Color = gaColor.Green,
      Size = {20,20},
      FontSize = 16,
      Font = "Open Sans",
      FontStyle = "Extrabold",
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Header",
      Text = "Information",
      Position = {15,70},
      Size = {530,11},
      Color = gaColor.Green,
      FontSize = 16,
      Font = "Roboto",
      FontStyle = "Bold",
      HTextAlign = "Center",
    })
    local gaLabels = {
      Pos = {X={20,20,20,20,20,20,20,20,20,20,20,20,20,400,380},Y={90,110,130,150,170,190,210,230,250,270,290,310,330,354,330}},
      Text = {"Unit Firmware Version:","Unit Mac Address:","Channel Name:","Audio Gain:","Group, Channel:","Device ID:","Frequency:","Transmitter Type:",
              "RF Power:","Transmitter Power Lock:","Transmitter Menu Lock:","Transmitter Mute:","Encryption:","Version "..PluginInfo.Version, "Encryption Toggle"}
    }
  
    local gaMeterLabels = {
      Pos = {X={380,470,380,470},Y={90,90,260,260}},
      Text = {"Audio Level","RF Level", "Antenna A", "Antenna B"} 
    }
  
    local gaLayouts = {
      Pos = {X={175,175,175,175,175,175,175,175,175,175,175,175,175},Y={90,110,130,150,170,190,210,230,250,270,290,310,330}},
      Text = {"UnitFirmware","UnitMacAddress","ChannelName","AudioGain","Group-Channel","DeviceID","Frequency","TransmitterType","RFPower","TransmitterPowerLock",
              "TransmitterMenuLock","TransmitterMute","Encryption","AudioLevel","RFLevel"},
      PrettyName = {gsCat1.."Firmware Version",gsCat1.."Mac Address",gsCat1.."Channel Name",gsCat1.."Audio Gain",gsCat1.."Group, Channel",gsCat1.."Device ID",gsCat1.."Frequency",
                    gsCat1.."Transmitter Type",gsCat1.."RF Power",gsCat1.."Transmitter Power Lock",gsCat1.."Transmitter Menu Lock",gsCat1.."Transmitter Mute",gsCat1.."Encyption"}, 
      FB = {true,true,false,false,false,true,true,true,true,true,true,true,true,},
      FillColor = {gaColor.LtGray,gaColor.LtGray,gaColor.White,gaColor.White,gaColor.White,gaColor.LtGray,gaColor.LtGray,gaColor.LtGray,gaColor.LtGray,gaColor.LtGray,gaColor.LtGray,gaColor.LtGray,gaColor.LtGray}
    }
  
    --Basic Labels
    for i=1,#gaLabels.Pos.X do
      table.insert(graphics,{
        Type = "Text",
        Text = gaLabels.Text[i],
        Position = { gaLabels.Pos.X[i], gaLabels.Pos.Y[i]},
        Color = gaColor.White,
        Size = {150,16},
        FontSize = 12,
        HTextAlign = "Right"
      })
    end
  
    --Meter Labels
    for i=1,#gaMeterLabels.Pos.X do
      table.insert(graphics,{
        Type = "Text",
        Text = gaMeterLabels.Text[i],
        Position = { gaMeterLabels.Pos.X[i], gaMeterLabels.Pos.Y[i]},
        Color = gaColor.White,
        Size = {70,16},
        FontSize = 12,
        HTextAlign = "Center"
      })
    end
  
    --Named Components Layouts
    for i=1,#gaLayouts.Pos.X do
      layout[gaLayouts.Text[i]] = {
        PrettyName = gaLayouts.PrettyName[i],
        Style = "Indicator",
        Position = { gaLayouts.Pos.X[i], gaLayouts.Pos.Y[i]},
        Size = {180,16},
        Color = gaLayouts.FillColor[i],
        FontSize = 14,
        HTextAlign = "Center",
        IsReadOnly = gaLayouts.FB[i]
      }
    end
    layout["AudioLevel"] = {
      PrettyName = gsCat1.."Audio Level",
      Style = "Meter",
      MeterStyle = "Level",
      ShowTextBox = true,
      Position = {400,110},
      Size = {36,128},
      Color = gaColor.Green,
    }
    layout["RFLevel"] = {
      PrettyName = gsCat1.."RF Level",
      Style = "Meter",
      MeterStyle = "Level",
      ShowTextBox = true,
      Position = {490,110},
      Size = {36,128},
      Color = {223,0,36},
    }
    layout["AntennaA"] = {
      PrettyName = gsCat1.."Antenna A Status",
      Style = "Led",
      Position = {410,280},
      Size = {16,16},
      Color = {255,0,0},
      UnlinkOffColor = false,
      Margin = 3,
      IsReadOnly = true,
    }
    layout["AntennaB"] = {
      PrettyName = gsCat1.."Antenna B Status",
      Style = "Led",
      Position = {500,280},
      Size = {16,16},
      Color = {255,0,0},
      UnlinkOffColor = false,
      Margin = 3,
      IsReadOnly = true,
    }
    layout["EncryptionModeToggle"] = {
      PrettyName = gsCat1.."Encryption Mode Toggle",
      Style = "Button",
      ButtonStyle = "Trigger",
      ButtonVisualStyle = "Flat",
      CornerRadius = 2,
      Margin = 1,
      Position = {380,330},
      Size = {36,16},
      Color = gaColor.Green,
      UnlinkOffColor = false,
      OffColor = gaColor.Green
    }
  elseif CurrentPage == "Battery" then
      table.insert(graphics,{
        Type = "GroupBox",
        Fill = gaColor.Black,
        CornerRadius = 5,
        StrokeWidth = 1,
        Position = {5,5},
        Size = {550,370}
      })
      Logo = ""
      table.insert(graphics,{
        Type = "Svg",
        Image = Logo,
        Position = {40,5},
        Size = {300,64},
        ZOrder = 1000
      })
      table.insert(graphics,{
        Type = "Text",
        Text = "QLX-D",
        Position = {340, 5},
        Color = gaColor.Green,
        Size = {150,64},
        FontSize = 40,
        Font = "Open Sans",
        FontStyle = "Extrabold",
        HTextAlign = "Left"
      })
      table.insert(graphics,{
        Type = "Text",
        Text = "©",
        Position = {475, 20},
        Color = gaColor.Green,
        Size = {20,20},
        FontSize = 16,
        Font = "Open Sans",
        FontStyle = "Extrabold",
        HTextAlign = "Left"
      })
      table.insert(graphics,{
        Type = "Header",
        Text = "Battery Info",
        Position = {15,70},
        Size = {530,11},
        Color = gaColor.Green,
        FontSize = 16,
        Font = "Roboto",
        FontStyle = "Bold",
        HTextAlign = "Center",
      })
      local gaLabels = {
        Pos = {X={20,20,20,20,20,20,400},Y={110,130,150,170,190,210,354}},
        Text = {"Battery Type:", "Battery Cycles:", "Battery Run Time:", "Battery Temperature:", "Battery Charge:", "Battery Health:","Version "..PluginInfo.Version}
      }
      local gaMeterLabels = {
        Pos = {X={380},Y={90}},
        Text = {"Battery Level"} 
      }
      local gaLayouts = {
        Pos = {X={175,175,175,175,175,175},Y={110,130,150,170,190,210}},
        Text = {"BatteryType","BatteryCycle","BatteryRunTime","BatteryTemp","BatteryCharge","BatteryHealth"},
        PrettyName = {gsCat2.."Type",gsCat2.."Cycles",gsCat2.."Run Time",gsCat2.."Temperature",gsCat2.."Charge",gsCat2.."Health"}, 
      }
      --Basic Labels
      for i=1,#gaLabels.Pos.X do
        table.insert(graphics,{
          Type = "Text",
          Text = gaLabels.Text[i],
          Position = { gaLabels.Pos.X[i], gaLabels.Pos.Y[i]},
          Color = gaColor.White,
          Size = {150,16},
          FontSize = 12,
          HTextAlign = "Right"
        })
      end
      --Meter Labels
      for i=1,#gaMeterLabels.Pos.X do
        table.insert(graphics,{
          Type = "Text",
          Text = gaMeterLabels.Text[i],
          Position = { gaMeterLabels.Pos.X[i], gaMeterLabels.Pos.Y[i]},
          Color = gaColor.White,
          Size = {100,16},
          FontSize = 12,
          HTextAlign = "Center"
        })
      end
      --Named Components Layouts
      for i=1,#gaLayouts.Pos.X do
        layout[gaLayouts.Text[i]] = {
          PrettyName = gaLayouts.PrettyName[i],
          Style = "Indicator",
          Position = { gaLayouts.Pos.X[i], gaLayouts.Pos.Y[i]},
          Size = {180,16},
          Color = gaColor.LtGray,
          FontSize = 14,
          HTextAlign = "Center",
          IsReadOnly = true
        }
      end
      layout["BatteryLevel"] = {
        PrettyName = gsCat2.."Level",
        Style = "Meter",
        MeterStyle = "Segmented",
        ShowTextBox = true,
        Position = {412,110},
        Size = {36,128},
        Color = gaColor.Green,
      }
  elseif CurrentPage == "Setup" then
    table.insert(graphics,{
      Type = "GroupBox",
      Fill = gaColor.Black,
      CornerRadius = 5,
      StrokeWidth = 1,
      Position = {5,5},
      Size = {550,370}
    })
    Logo = ""
    table.insert(graphics,{
      Type = "Svg",
      Image = Logo,
      Position = {40,5},
      Size = {300,64},
      ZOrder = 1000
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "QLX-D",
      Position = {340, 5},
      Color = gaColor.Green,
      Size = {150,64},
      FontSize = 40,
      Font = "Open Sans",
      FontStyle = "Extrabold",
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "©",
      Position = {475, 20},
      Color = gaColor.Green,
      Size = {20,20},
      FontSize = 16,
      Font = "Open Sans",
      FontStyle = "Extrabold",
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Header",
      Text = "Setup",
      Position = {15,70},
      Size = {530,11},
      Color = gaColor.Green,
      FontSize = 16,
      Font = "Roboto",
      FontStyle = "Bold",
      HTextAlign = "Center",
    })
    local gaLabels = {
      Pos = {X={30,30,400},Y={110,130,354}},
      Text = {"IP Address:","Connection Status:","Version "..PluginInfo.Version,}
    }
    --Basic Labels
    for i=1,#gaLabels.Pos.X do
      table.insert(graphics,{
        Type = "Text",
        Text = gaLabels.Text[i],
        Position = { gaLabels.Pos.X[i], gaLabels.Pos.Y[i]},
        Color = gaColor.White,
        Size = {150,16},
        FontSize = 12,
        HTextAlign = "Right"
      })
    end
    layout["IPAddress"] = {
      PrettyName = "Connection Info~Unit IP Address",
      Style = "Indicator",
      Position = {185,110},
      Size = {250,16},
      Color = gaColor.White,
      FontSize = 14,
      HTextAlign = "Center",
      IsReadOnly = false
    }
    
    layout["Status"] = {
      PrettyName = "Connection Info~Connection Status",
      Style = "Indicator",
      Position = {185,130},
      Size = {250,100},
      Color = {255,255,255},
      FontSize = 16,
      HTextAlign = "Center",
      IsReadOnly = true
    }
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  --TCP Socket Defined
  ------------------------------------------------------------
  gsIPAddress = Controls["IPAddress"].String
  gsPort = 2202
  
  TCPClient = TcpSocket.New() --Define Socket
  TCPClient.ReadTimeout = 0
  TCPClient.WriteTimeout = 0
  TCPClient.ReconnectTimeout = 5
  
  --Debug Function
  ---------------------------------------------------------
  function DebugFormat(string) -- Format strings containing non-printable characters so we can see what they are
    local visual = ""
    for i=1,#string do
      local byte = string:sub(i,i)
      if string.byte(byte) >= 32 and string.byte(byte) <= 126 then
        visual = visual..byte
      else
        visual = visual..string.format("[%02xh]",string.byte(byte))
      end
    end
    return visual
  end
  
  DebugTx = false
  DebugRx = false
  DebugFunction = false
  DebugPrint = Properties["Debug Print"].Value
  
  -- A function to determine common print statement scenarios for troubleshooting
  function SetupDebugPrint()
    if DebugPrint=="Tx/Rx" then
      DebugTx,DebugRx=true,true
    elseif DebugPrint=="Tx" then
      DebugTx=true
    elseif DebugPrint=="Rx" then
      DebugRx=true
    elseif DebugPrint=="Function Calls" then
      DebugFunction=true
    elseif DebugPrint=="All" then
      DebugTx,DebugRx,DebugFunction=true,true,true
    end
  end
  
  SetupDebugPrint()
  
  --Value Constants
  -----------------------------------------------------------
  gsFWVersion = "FW_VER"
  gsChanName = "CHAN_NAME"
  gsDeviceID = "DEVICE_ID"
  gsAudioGain = "AUDIO_GAIN"
  gsGroupChannel = "GROUP_CHAN"
  gsFreq = "FREQUENCY"
  gsBattType = "BATT_TYPE"
  gsBattBars = "BATT_BARS"
  gsTXType = "TX_TYPE"
  gsTXRFPWR = "TX_RF_PWR"
  gsTXPWRLock = "TX_PWR_LOCK"
  gsTXMenuLock = "TX_MENU_LOCK"
  gsEncryption = "ENCRYPTION " 
  gsTXMuteStatus = "TX_MUTE_STATUS"
  gsMACAddress = "MAC_ADDR"
  gsBattCyle = "BATT_CYCLE"
  gsBattRunTime = "BATT_RUN_TIME"
  gsBattTemp = "BATT_TEMP_F"
  gsBattCharge = "BATT_CHARGE"
  gsBattHealth = "BATT_HEALTH"
  gsArray = {gsFWVersion,gsChanName,gsDeviceID,gsAudioGain,gsGroupChannel,gsFreq,gsBattType,gsBattBars,gsTXType,gsTXRFPWR,gsTXPWRLock,gsTXMenuLock,gsEncryption,gsTXMuteStatus,gsMACAddress,gsBattCyle,gsBattRunTime,gsBattTemp,gsBattCharge,gsBattHealth}
  
  gcFWVersion = Controls["UnitFirmware"]
  gcChanName = Controls["ChannelName"]
  gcDeviceID = Controls["DeviceID"]	
  gcAudioGain = Controls["AudioGain"]	
  gcGroupChannel = Controls["Group-Channel"]	
  gcFreq = Controls["Frequency"]	
  gcBattType = Controls["BatteryType"]
  gcBattBars = Controls["BatteryLevel"]	
  gcTXType = Controls["TransmitterType"]	
  gcTXRFPWR = Controls["RFPower"]	
  gcTXPWRLock = Controls["TransmitterPowerLock"]
  gcTXMenuLock = Controls["TransmitterMenuLock"]
  gcEncryption = Controls["Encryption"]
  gcTXMuteStatus = Controls["TransmitterMute"]
  gcMACAddress = Controls["UnitMacAddress"]
  gcBattCyle = Controls["BatteryCycle"]
  gcBattRunTime = Controls["BatteryRunTime"]
  gcBattTemp = Controls["BatteryTemp"]
  gcBattCharge = Controls["BatteryCharge"]
  gcBattHealth = Controls["BatteryHealth"]
  gcArray = {gcFWVersion,gcChanName,gcDeviceID,gcAudioGain,gcGroupChannel,gcFreq,gcBattType,gcBattBars,gcTXType,gcTXRFPWR,gcTXPWRLock,gcTXMenuLock,gcEncryption,gcTXMuteStatus,gcMACAddress,gcBattCyle,gcBattRunTime,gcBattTemp,gcBattCharge,gcBattHealth}
  
  --Parse Data
  -----------------------------------------------------------
  function dataNotSupportedCheck(lsReturnVal, gaArrayIndex)
    if(gaArrayIndex == 16 )then  --For rechargable Battery cycles When using AA or unit is off
        if(lsReturnVal == "65535")then
          return("Off/Not Applicable")
        else
          return(lsReturnVal)
        end
    elseif(gaArrayIndex == 17 )then  --For rechargable Battery run time When using AA or unit is off
        if(lsReturnVal == "65535")then
          return("Off/Not Applicable")
        elseif(lsReturnVal == "65533")then 
          return("Charging")
        elseif(lsReturnVal == "65534")then 
          return("Calculating")
        else
          return(string.format("Time Left: %d:%02d", math.floor(lsReturnVal/60), math.fmod(lsReturnVal,60)))
        end
    elseif(gaArrayIndex == 18 )then  --For rechargable Battery temp When using AA or unit is off
      if(lsReturnVal == "255")then
        return("Off/Not Applicable")    
      else
        return(string.format((lsReturnVal - 40).." F"))
      end
    elseif(gaArrayIndex == 19 )then  --For rechargable Battery charge When using AA or unit is off
      if(lsReturnVal == "255")then
        return("Not Applicable")
      else
        return(string.format(lsReturnVal.."%"))
      end
    elseif(gaArrayIndex == 20 )then  --For rechargable Battery Health When using AA or unit is off
      if(lsReturnVal == "255")then
        return("Not Applicable")
      else
        return(string.format(lsReturnVal.."%"))
      end
    else
      return(lsReturnVal)
    end
  end
  
  function rxDataParse(lsRXData)
    if(DebugRx)then print(DebugFormat(lsRXData))end --Debug
    
    local lsCommandReturn = string.sub(lsRXData,3,5)
    
    if(lsCommandReturn == "REP")then  --Report Returned
      for x,reports in pairs(gsArray)do       --Search through All Reported Values
          if(string.find(lsRXData, gsArray[x]) ~= nil)then --If you find the value match and its at least one succesfully matach found
              local lsStart, lsEnd = string.find(lsRXData,gsArray[x]) --Find start and end position of Match
              local lsLen = string.len(lsRXData) -- Find total length of string
              
              if(x == 13)then --If Encryption Detected Filter Out Space
                lsEnd = lsEnd + 1
              else
                lsEnd = lsEnd + 2
              end
              
              local lsFilteredString = string.sub(lsRXData, lsEnd, (lsLen - 1)) --Pull out just raw value and send it to controls
            
            if(string.find(lsFilteredString, "{") or string.find(lsFilteredString, "}") ~= nil)then  --If you find brackets Cleanup
                lsFilteredString = string.gsub(lsFilteredString, "{", "")
                lsFilteredString = string.gsub(lsFilteredString, "}", "")              
                gcArray[x].String = dataNotSupportedCheck(lsFilteredString, x)
            else
              gcArray[x].String = dataNotSupportedCheck(lsFilteredString, x)
            end
          end
      end
    elseif(lsCommandReturn == "SAM")then  --Sample Levels Returned
      local lsAntennaInfo = string.sub(lsRXData, 16, 17)  --Antenna Infor
      Controls["RFLevel"].String = string.sub(lsRXData, 19, 21)  --RF Level
      Controls["AudioLevel"].String = string.sub(lsRXData, 23, 25)  --Audio Level
      
      if(lsAntennaInfo == "AX")then
        Controls["AntennaA"].Boolean = true
        Controls["AntennaB"].Boolean = false
      elseif(lsAntennaInfo == "XB")then
        Controls["AntennaA"].Boolean = false
        Controls["AntennaB"].Boolean = true
      elseif(lsAntennaInfo == "XX")then
        Controls["AntennaA"].Boolean = false
        Controls["AntennaB"].Boolean = false
      end
    end  
  
  end
  
  
  --Timers
  -----------------------------------------------------------
  QueryTimer = Timer.New()
  
  QueryTimer.EventHandler = function()
    TCPClient:Write("< GET 1 ALL >")            ---Get All Data
      if(DebugTx)then print(DebugFormat("TX: ".."< GET 1 ALL >"))end
    TCPClient:Write("< GET ENCRYPTION >")
      if(DebugTx)then print(DebugFormat("TX: ".."< GET ENCRYPTION >"))end
  end
  
  --TCP Socket Event Handlers
  -----------------------------------------------------------
  TCPClient.Connected = function(TCPClient)     --Is Connected
    if(DebugFunction)then print("TCP socket is connected")end
    Controls["Status"].Value = 0
    Controls["Status"].String = '' 
    
    QueryTimer:Start(15)
    TCPClient:Write("< SET 1 METER_RATE 300 >")            ---Get Sample Data
      if(DebugTx)then print(DebugFormat("TX: ".."< SET 1 METER_RATE 300 >"))end
    TCPClient:Write("< GET 1 ALL >")            ---Get All Data Initially
      if(DebugTx)then print(DebugFormat("TX: ".."< GET 1 ALL >"))end
    TCPClient:Write("< GET ENCRYPTION >")
      if(DebugTx)then print(DebugFormat("TX: ".."< GET ENCRYPTION >"))end
  
  end
  TCPClient.Reconnect = function(TCPClient)     --Reconnecting
    if(DebugFunction)then print("TCP socket is reconnecting")end
    Controls["Status"].Value = 5
    Controls["Status"].String = 'Reconnecting'
  end
  TCPClient.Data = function(TCPClient)          --RX Data
    if(DebugFunction)then print("TCP socket has data:")end
    repeat
      msg = TCPClient:ReadLine(TcpSocket.EOL.Custom,">")
      if(msg ~= nil)then
        rxDataParse(msg)
        if(DebugRx)then print(DebugFormat("Raw Received Message: "..msg))end
      else
        break
      end
    until(TCPClient.BufferLength == 0)
  end
  TCPClient.Closed = function(TCPClient)        --Socket Closed
    if(DebugFunction)then print("TCP socket was closed by the remote end")end
    Controls["Status"].Value = 2 
    Controls["Status"].String = 'Closed'
    QueryTimer:Stop()
  end
  TCPClient.Error = function(TCPClient, Err)    --Error On Socket
    if(DebugFunction)then print("TCP socket had an error:", Err)end
    Controls["Status"].Value = 2
    Controls["Status"].String = Err
    QueryTimer:Stop()
  end
  TCPClient.Timeout = function(TCPClient, Err)   --Timeout Occured
    if(DebugFunction)then print("TCP socket timed out", Err)end
    Controls["Status"].Value = 2
    Controls["Status"].String = 'TimeOut'
    QueryTimer:Stop()
  end
   
   
  --Connect Events
  ---------------------------------------------------------- 
  if(gsIPAddress ~= "" and gsPort ~= "")then      --Connect on Startup
    TCPClient:Connect(gsIPAddress, gsPort)
  else
    Controls["Status"].Value = 2 
    Controls["Status"].String = 'Invalid IP Address'
  end
  
  Controls["IPAddress"].EventHandler = function()
      gsIPAddress = Controls["IPAddress"].String
      TCPClient:Disconnect()
      if(gsIPAddress ~= "" and gsPort ~= "")then 
        TCPClient:Connect(gsIPAddress, gsPort)
      else
        Controls["Status"].Value = 2 
        Controls["Status"].String = 'Invalid IP Address'
      end  
  end
  
  
  --Set Events
  ---------------------------------------------------------
  Controls["ChannelName"].EventHandler = function()
    if(string.len(Controls["ChannelName"].String) <= 8)then
      TCPClient:Write("< SET 1 CHAN_NAME {"..Controls["ChannelName"].String.."} >")            --Write Channel Name 8 chr max
      if(DebugTx)then print(DebugFormat("TX: ".."< SET 1 CHAN_NAME {"..Controls["ChannelName"].String.."} >"))end
    else
    end
  end
  
  Controls["AudioGain"].EventHandler = function()
      TCPClient:Write("< SET 1 AUDIO_GAIN "..Controls["AudioGain"].String.." >")            --Write Channel Gain 000-060 values
      if(DebugTx)then print(DebugFormat("TX: ".."< SET 1 AUDIO_GAIN "..Controls["AudioGain"].String.." >"))end
  end
  
  Controls["Group-Channel"].EventHandler = function()
      TCPClient:Write("< SET 1 GROUP_CHAN "..Controls["Group-Channel"].String.." >")                                   --Write Group and Channel Need Commma Separate
      if(DebugTx)then print(DebugFormat("TX: ".."< SET 1 GROUP_CHAN "..Controls["Group-Channel"].String.." >"))end
  
  end
  
  --[[Controls["EncryptionModeToggle"].EventHandler = function()
    if(string.find(Controls["Encryption"].String, "ON") ~= nil)then
      TCPClient:Write("< SET ENCRYPTION OFF >")                                   --Toggle Encryption Off
    else
      TCPClient:Write("< SET ENCRYPTION ON >")                                   --Toggle Encryption On
    end
  end]]--
end
